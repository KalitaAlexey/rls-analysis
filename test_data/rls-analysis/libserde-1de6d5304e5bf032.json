{"kind":"JsonApi","prelude":{"crate_name":"serde","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs","byte_start":0,"byte_end":1963,"line_start":1,"line_end":58,"column_start":1,"column_end":10}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":9},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs","byte_start":1840,"byte_end":1845,"line_start":51,"line_end":51,"column_start":9,"column_end":14},"name":"bytes","qualname":"::bytes","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1940},{"krate":0,"index":1947},{"krate":0,"index":1959},{"krate":0,"index":1987},{"krate":0,"index":14},{"krate":0,"index":18},{"krate":0,"index":24},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":36},{"krate":0,"index":41},{"krate":0,"index":47},{"krate":0,"index":121}],"decl_id":null,"docs":" Helper module to enable serializing bytes more efficiently\n"},{"kind":"Struct","id":{"krate":0,"index":1927},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":7751,"byte_end":7756,"line_start":18,"line_end":18,"column_start":12,"column_end":17},"name":"Bytes","qualname":"::bytes::Bytes","value":"Bytes { bytes }","parent":null,"children":[{"krate":0,"index":1928}],"decl_id":null,"docs":" `Bytes` wraps a `&[u8]` in order to serialize into a byte array.\n"},{"kind":"Method","id":{"krate":0,"index":16},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":7853,"byte_end":7856,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"new","qualname":"<Bytes<'a>>::new","value":"fn (bytes: &'a [u8]) -> Self","parent":{"krate":0,"index":1927},"children":[],"decl_id":null,"docs":" Wrap an existing `&[u8]`.\n"},{"kind":"Struct","id":{"krate":0,"index":1999},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":9373,"byte_end":9380,"line_start":91,"line_end":91,"column_start":16,"column_end":23},"name":"ByteBuf","qualname":"::bytes::bytebuf::ByteBuf","value":"ByteBuf { bytes }","parent":null,"children":[{"krate":0,"index":2000}],"decl_id":null,"docs":" `ByteBuf` wraps a `Vec<u8>` and serializes as a byte array.\n"},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":9494,"byte_end":9497,"line_start":97,"line_end":97,"column_start":16,"column_end":19},"name":"new","qualname":"<ByteBuf>::new","value":"fn () -> Self","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Construct a new, empty `ByteBuf`.\n"},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":9648,"byte_end":9661,"line_start":102,"line_end":102,"column_start":16,"column_end":29},"name":"with_capacity","qualname":"<ByteBuf>::with_capacity","value":"fn (cap: usize) -> Self","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Construct a new, empty `ByteBuf` with the specified capacity.\n"},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":9809,"byte_end":9813,"line_start":107,"line_end":107,"column_start":16,"column_end":20},"name":"from","qualname":"<ByteBuf>::from","value":"fn <T> (bytes: T) -> Self","parent":{"krate":0,"index":1999},"children":[],"decl_id":null,"docs":" Wrap existing bytes in a `ByteBuf`.\n"},{"kind":"Struct","id":{"krate":0,"index":95},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/bytes.rs","byte_start":11521,"byte_end":11535,"line_start":179,"line_end":179,"column_start":16,"column_end":30},"name":"ByteBufVisitor","qualname":"::bytes::bytebuf::ByteBufVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":" This type implements the `serde::de::Visitor` trait for a `ByteBuf`.\n"},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs","byte_start":1855,"byte_end":1857,"line_start":52,"line_end":52,"column_start":9,"column_end":11},"name":"de","qualname":"::de","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":541},{"krate":0,"index":1052},{"krate":0,"index":1130},{"krate":0,"index":11375},{"krate":0,"index":11408},{"krate":0,"index":11409},{"krate":0,"index":11412},{"krate":0,"index":11418},{"krate":0,"index":11421},{"krate":0,"index":1149},{"krate":0,"index":1154},{"krate":0,"index":1158},{"krate":0,"index":1294},{"krate":0,"index":1394},{"krate":0,"index":1403},{"krate":0,"index":1414},{"krate":0,"index":1437},{"krate":0,"index":1455},{"krate":0,"index":1461},{"krate":0,"index":1481}],"decl_id":null,"docs":" Generic deserialization framework.\n"},{"kind":"Mod","id":{"krate":0,"index":131},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":13559,"byte_end":13564,"line_start":15,"line_end":15,"column_start":9,"column_end":14},"name":"impls","qualname":"::de::impls","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":146},{"krate":0,"index":155},{"krate":0,"index":159},{"krate":0,"index":161},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":2141},{"krate":0,"index":2145},{"krate":0,"index":2149},{"krate":0,"index":2153},{"krate":0,"index":2157},{"krate":0,"index":2161},{"krate":0,"index":2165},{"krate":0,"index":2169},{"krate":0,"index":2173},{"krate":0,"index":2177},{"krate":0,"index":2181},{"krate":0,"index":2185},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":209},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":236},{"krate":0,"index":249},{"krate":0,"index":254},{"krate":0,"index":257},{"krate":0,"index":263},{"krate":0,"index":2191},{"krate":0,"index":2194},{"krate":0,"index":2197},{"krate":0,"index":2209},{"krate":0,"index":2218},{"krate":0,"index":2221},{"krate":0,"index":2224},{"krate":0,"index":2236},{"krate":0,"index":2245},{"krate":0,"index":2248},{"krate":0,"index":2251},{"krate":0,"index":2263},{"krate":0,"index":2272},{"krate":0,"index":2276},{"krate":0,"index":2280},{"krate":0,"index":2293},{"krate":0,"index":2303},{"krate":0,"index":2306},{"krate":0,"index":2309},{"krate":0,"index":2321},{"krate":0,"index":2330},{"krate":0,"index":2333},{"krate":0,"index":2336},{"krate":0,"index":2348},{"krate":0,"index":269},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":289},{"krate":0,"index":2359},{"krate":0,"index":2372},{"krate":0,"index":2380},{"krate":0,"index":2396},{"krate":0,"index":2404},{"krate":0,"index":2423},{"krate":0,"index":2431},{"krate":0,"index":2453},{"krate":0,"index":2461},{"krate":0,"index":2486},{"krate":0,"index":2494},{"krate":0,"index":2522},{"krate":0,"index":2530},{"krate":0,"index":2561},{"krate":0,"index":2569},{"krate":0,"index":2603},{"krate":0,"index":2611},{"krate":0,"index":2648},{"krate":0,"index":2656},{"krate":0,"index":2696},{"krate":0,"index":2704},{"krate":0,"index":2747},{"krate":0,"index":2755},{"krate":0,"index":2801},{"krate":0,"index":2809},{"krate":0,"index":2858},{"krate":0,"index":2866},{"krate":0,"index":2918},{"krate":0,"index":2926},{"krate":0,"index":2981},{"krate":0,"index":2989},{"krate":0,"index":3047},{"krate":0,"index":3055},{"krate":0,"index":3116},{"krate":0,"index":3124},{"krate":0,"index":3188},{"krate":0,"index":3196},{"krate":0,"index":3263},{"krate":0,"index":3271},{"krate":0,"index":3341},{"krate":0,"index":3349},{"krate":0,"index":3422},{"krate":0,"index":3430},{"krate":0,"index":3506},{"krate":0,"index":3514},{"krate":0,"index":3593},{"krate":0,"index":3601},{"krate":0,"index":3683},{"krate":0,"index":3691},{"krate":0,"index":3776},{"krate":0,"index":3784},{"krate":0,"index":3872},{"krate":0,"index":3880},{"krate":0,"index":3971},{"krate":0,"index":3979},{"krate":0,"index":4073},{"krate":0,"index":4081},{"krate":0,"index":4178},{"krate":0,"index":4186},{"krate":0,"index":4286},{"krate":0,"index":4294},{"krate":0,"index":4397},{"krate":0,"index":4405},{"krate":0,"index":4511},{"krate":0,"index":5639},{"krate":0,"index":5642},{"krate":0,"index":5645},{"krate":0,"index":5655},{"krate":0,"index":5660},{"krate":0,"index":5664},{"krate":0,"index":5668},{"krate":0,"index":5682},{"krate":0,"index":5688},{"krate":0,"index":5693},{"krate":0,"index":5698},{"krate":0,"index":5716},{"krate":0,"index":5723},{"krate":0,"index":5729},{"krate":0,"index":5735},{"krate":0,"index":5757},{"krate":0,"index":5765},{"krate":0,"index":5772},{"krate":0,"index":5779},{"krate":0,"index":5805},{"krate":0,"index":5814},{"krate":0,"index":5822},{"krate":0,"index":5830},{"krate":0,"index":5860},{"krate":0,"index":5870},{"krate":0,"index":5879},{"krate":0,"index":5888},{"krate":0,"index":5922},{"krate":0,"index":5933},{"krate":0,"index":5943},{"krate":0,"index":5953},{"krate":0,"index":5991},{"krate":0,"index":6003},{"krate":0,"index":6014},{"krate":0,"index":6025},{"krate":0,"index":6067},{"krate":0,"index":6080},{"krate":0,"index":6092},{"krate":0,"index":6104},{"krate":0,"index":6150},{"krate":0,"index":6164},{"krate":0,"index":6177},{"krate":0,"index":6190},{"krate":0,"index":6240},{"krate":0,"index":6255},{"krate":0,"index":6269},{"krate":0,"index":6283},{"krate":0,"index":6337},{"krate":0,"index":6353},{"krate":0,"index":6368},{"krate":0,"index":6383},{"krate":0,"index":6441},{"krate":0,"index":6458},{"krate":0,"index":6474},{"krate":0,"index":6490},{"krate":0,"index":6552},{"krate":0,"index":6570},{"krate":0,"index":6587},{"krate":0,"index":6604},{"krate":0,"index":6670},{"krate":0,"index":6689},{"krate":0,"index":6707},{"krate":0,"index":6725},{"krate":0,"index":6795},{"krate":0,"index":7119},{"krate":0,"index":7123},{"krate":0,"index":7127},{"krate":0,"index":7141},{"krate":0,"index":7151},{"krate":0,"index":7156},{"krate":0,"index":7161},{"krate":0,"index":7176},{"krate":0,"index":297},{"krate":0,"index":304},{"krate":0,"index":311},{"krate":0,"index":318},{"krate":0,"index":325},{"krate":0,"index":332},{"krate":0,"index":339},{"krate":0,"index":341},{"krate":0,"index":351},{"krate":0,"index":355},{"krate":0,"index":361},{"krate":0,"index":367},{"krate":0,"index":372},{"krate":0,"index":378},{"krate":0,"index":384},{"krate":0,"index":391},{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":495}],"decl_id":null,"docs":" This module contains `Deserialize` and `Visitor` implementations.\n"},{"kind":"Struct","id":{"krate":0,"index":144},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":44154,"byte_end":44165,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"UnitVisitor","qualname":"::de::impls::UnitVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":" A visitor that produces a `()`.\n"},{"kind":"Struct","id":{"krate":0,"index":159},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":44780,"byte_end":44791,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"BoolVisitor","qualname":"::de::impls::BoolVisitor","value":"","parent":null,"children":[],"decl_id":null,"docs":" A visitor that produces a `bool`.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":45539,"byte_end":45566,"line_start":142,"line_end":142,"column_start":14,"column_end":41},"name":"impl_deserialize_num_method","qualname":"impl_deserialize_num_method::9443987036930892429","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":47474,"byte_end":47494,"line_start":199,"line_end":199,"column_start":14,"column_end":34},"name":"impl_deserialize_num","qualname":"impl_deserialize_num::15102374485160875903","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":254},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":51584,"byte_end":51602,"line_start":358,"line_end":358,"column_start":12,"column_end":30},"name":"PhantomDataVisitor","qualname":"::de::impls::PhantomDataVisitor","value":"PhantomDataVisitor { marker }","parent":null,"children":[{"krate":0,"index":255}],"decl_id":null,"docs":" A visitor that produces a `PhantomData`.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":52251,"byte_end":52259,"line_start":384,"line_end":384,"column_start":14,"column_end":22},"name":"seq_impl","qualname":"seq_impl::16712851813943973567","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":55815,"byte_end":55818,"line_start":520,"line_end":520,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayVisitor<A>>::new","value":"fn () -> Self","parent":{"krate":0,"index":269},"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":56563,"byte_end":56574,"line_start":556,"line_end":556,"column_start":14,"column_end":25},"name":"array_impls","qualname":"array_impls::4064084148841792570","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":59261,"byte_end":59272,"line_start":629,"line_end":629,"column_start":14,"column_end":25},"name":"tuple_impls","qualname":"tuple_impls::102862705842267286","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":61840,"byte_end":61848,"line_start":698,"line_end":698,"column_start":14,"column_end":22},"name":"map_impl","qualname":"map_impl::10960944387218362959","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":396},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":69727,"byte_end":69731,"line_start":972,"line_end":972,"column_start":22,"column_end":26},"name":"Secs","qualname":"::de::impls::<impl de::Deserialize for std::time::Duration>::deserialize::Field::Secs","value":"Field::Secs","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":397},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":69733,"byte_end":69738,"line_start":972,"line_end":972,"column_start":28,"column_end":33},"name":"Nanos","qualname":"::de::impls::<impl de::Deserialize for std::time::Duration>::deserialize::Field::Nanos","value":"Field::Nanos","parent":{"krate":0,"index":395},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":454},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":74913,"byte_end":74915,"line_start":1108,"line_end":1108,"column_start":13,"column_end":15},"name":"Ok","qualname":"::de::impls::<impl de::Deserialize for std::result::Result<T, E>>::deserialize::Field::Ok","value":"Field::Ok","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":455},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":74929,"byte_end":74932,"line_start":1109,"line_end":1109,"column_start":13,"column_end":16},"name":"Err","qualname":"::de::impls::<impl de::Deserialize for std::result::Result<T, E>>::deserialize::Field::Err","value":"Field::Err","parent":{"krate":0,"index":453},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":493},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/impls.rs","byte_start":78494,"byte_end":78504,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"IgnoredAny","qualname":"::de::impls::IgnoredAny","value":"","parent":null,"children":[],"decl_id":null,"docs":" A target for deserializers that want to ignore data. Implements\n Deserialize and silently eats data given to it.\n"},{"kind":"Mod","id":{"krate":0,"index":541},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":13574,"byte_end":13579,"line_start":16,"line_end":16,"column_start":9,"column_end":14},"name":"value","qualname":"::de::value","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","parent":null,"children":[{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":7247},{"krate":0,"index":7263},{"krate":0,"index":7273},{"krate":0,"index":7292},{"krate":0,"index":551},{"krate":0,"index":568},{"krate":0,"index":579},{"krate":0,"index":584},{"krate":0,"index":589},{"krate":0,"index":594},{"krate":0,"index":598},{"krate":0,"index":7460},{"krate":0,"index":7465},{"krate":0,"index":7470},{"krate":0,"index":7598},{"krate":0,"index":7603},{"krate":0,"index":7608},{"krate":0,"index":7736},{"krate":0,"index":7741},{"krate":0,"index":7746},{"krate":0,"index":7874},{"krate":0,"index":7879},{"krate":0,"index":7884},{"krate":0,"index":8012},{"krate":0,"index":8017},{"krate":0,"index":8022},{"krate":0,"index":8150},{"krate":0,"index":8155},{"krate":0,"index":8160},{"krate":0,"index":8288},{"krate":0,"index":8293},{"krate":0,"index":8298},{"krate":0,"index":8426},{"krate":0,"index":8431},{"krate":0,"index":8436},{"krate":0,"index":8564},{"krate":0,"index":8569},{"krate":0,"index":8574},{"krate":0,"index":8702},{"krate":0,"index":8707},{"krate":0,"index":8712},{"krate":0,"index":8840},{"krate":0,"index":8845},{"krate":0,"index":8850},{"krate":0,"index":8978},{"krate":0,"index":8983},{"krate":0,"index":8988},{"krate":0,"index":9116},{"krate":0,"index":9121},{"krate":0,"index":9126},{"krate":0,"index":9254},{"krate":0,"index":9259},{"krate":0,"index":9264},{"krate":0,"index":609},{"krate":0,"index":615},{"krate":0,"index":621},{"krate":0,"index":637},{"krate":0,"index":660},{"krate":0,"index":665},{"krate":0,"index":670},{"krate":0,"index":685},{"krate":0,"index":708},{"krate":0,"index":714},{"krate":0,"index":720},{"krate":0,"index":737},{"krate":0,"index":760},{"krate":0,"index":766},{"krate":0,"index":772},{"krate":0,"index":781},{"krate":0,"index":796},{"krate":0,"index":803},{"krate":0,"index":810},{"krate":0,"index":817},{"krate":0,"index":822},{"krate":0,"index":827},{"krate":0,"index":835},{"krate":0,"index":844},{"krate":0,"index":860},{"krate":0,"index":881},{"krate":0,"index":908},{"krate":0,"index":924},{"krate":0,"index":931},{"krate":0,"index":952},{"krate":0,"index":960},{"krate":0,"index":977},{"krate":0,"index":985},{"krate":0,"index":993},{"krate":0,"index":998},{"krate":0,"index":1003},{"krate":0,"index":1011},{"krate":0,"index":1017},{"krate":0,"index":1023},{"krate":0,"index":1033},{"krate":0,"index":1038},{"krate":0,"index":1043}],"decl_id":null,"docs":" This module supports deserializing from primitives with the `ValueDeserializer` trait.\n"},{"kind":"Enum","id":{"krate":0,"index":7247},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":82392,"byte_end":82397,"line_start":51,"line_end":51,"column_start":10,"column_end":15},"name":"Error","qualname":"::de::value::Error","value":"Error::{Custom, InvalidType, InvalidLength, InvalidValue, EndOfStream, UnknownVariant, UnknownField, MissingField}","parent":null,"children":[{"krate":0,"index":7248},{"krate":0,"index":7250},{"krate":0,"index":7252},{"krate":0,"index":7254},{"krate":0,"index":7256},{"krate":0,"index":7257},{"krate":0,"index":7259},{"krate":0,"index":7261}],"decl_id":null,"docs":" This represents all the possible errors that can occur using the `ValueDeserializer`.\n"},{"kind":"Tuple","id":{"krate":0,"index":7248},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":82503,"byte_end":82509,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Custom","qualname":"::de::value::Error::Custom","value":"Error::Custom(String)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" The value had some custom error.\n"},{"kind":"Tuple","id":{"krate":0,"index":7250},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":82700,"byte_end":82711,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"InvalidType","qualname":"::de::value::Error::InvalidType","value":"Error::InvalidType(de::Type)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" The value had an incorrect type.\n"},{"kind":"Tuple","id":{"krate":0,"index":7252},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":82769,"byte_end":82782,"line_start":63,"line_end":63,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::de::value::Error::InvalidLength","value":"Error::InvalidLength(usize)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" The value had an invalid length.\n"},{"kind":"Tuple","id":{"krate":0,"index":7254},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":82911,"byte_end":82923,"line_start":67,"line_end":67,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::de::value::Error::InvalidValue","value":"Error::InvalidValue(String)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" The value is invalid and cannot be deserialized.\n"},{"kind":"Tuple","id":{"krate":0,"index":7256},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":83136,"byte_end":83147,"line_start":73,"line_end":73,"column_start":5,"column_end":16},"name":"EndOfStream","qualname":"::de::value::Error::EndOfStream","value":"Error::EndOfStream","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" EOF while deserializing a value.\n"},{"kind":"Tuple","id":{"krate":0,"index":7257},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":83245,"byte_end":83259,"line_start":77,"line_end":77,"column_start":5,"column_end":19},"name":"UnknownVariant","qualname":"::de::value::Error::UnknownVariant","value":"Error::UnknownVariant(String)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" Unknown variant in enum.\n"},{"kind":"Tuple","id":{"krate":0,"index":7259},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":83500,"byte_end":83512,"line_start":84,"line_end":84,"column_start":5,"column_end":17},"name":"UnknownField","qualname":"::de::value::Error::UnknownField","value":"Error::UnknownField(String)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" Unknown field in struct.\n"},{"kind":"Tuple","id":{"krate":0,"index":7261},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":83695,"byte_end":83707,"line_start":90,"line_end":90,"column_start":5,"column_end":17},"name":"MissingField","qualname":"::de::value::Error::MissingField","value":"Error::MissingField(&'static str)","parent":{"krate":0,"index":7247},"children":[],"decl_id":null,"docs":" Struct is missing a field.\n"},{"kind":"Trait","id":{"krate":0,"index":584},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":86425,"byte_end":86442,"line_start":153,"line_end":153,"column_start":11,"column_end":28},"name":"ValueDeserializer","qualname":"::de::value::ValueDeserializer","value":"ValueDeserializer<E: de::Error = Error>","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"decl_id":null,"docs":" This trait converts primitive types into a deserializer.\n"},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":86611,"byte_end":86628,"line_start":158,"line_end":158,"column_start":8,"column_end":25},"name":"into_deserializer","qualname":"::de::value::ValueDeserializer::into_deserializer","value":"fn (self) -> Self::Deserializer","parent":{"krate":0,"index":584},"children":[],"decl_id":null,"docs":" Convert this value into a deserializer.\n"},{"kind":"Struct","id":{"krate":0,"index":594},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":87016,"byte_end":87032,"line_start":174,"line_end":174,"column_start":12,"column_end":28},"name":"UnitDeserializer","qualname":"::de::value::UnitDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `()`.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/macros.rs","byte_start":7119,"byte_end":7141,"line_start":175,"line_end":175,"column_start":14,"column_end":36},"name":"forward_to_deserialize","qualname":"forward_to_deserialize::6013632409388042766","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":87809,"byte_end":87831,"line_start":202,"line_end":202,"column_start":14,"column_end":36},"name":"primitive_deserializer","qualname":"primitive_deserializer::4993147056078507015","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":89999,"byte_end":90014,"line_start":259,"line_end":259,"column_start":12,"column_end":27},"name":"StrDeserializer","qualname":"::de::value::StrDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `&str`.\n"},{"kind":"Struct","id":{"krate":0,"index":660},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":92463,"byte_end":92481,"line_start":344,"line_end":344,"column_start":12,"column_end":30},"name":"StringDeserializer","qualname":"::de::value::StringDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `String`.\n"},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":95090,"byte_end":95108,"line_start":432,"line_end":432,"column_start":12,"column_end":30},"name":"CowStrDeserializer","qualname":"::de::value::CowStrDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `String`.\n"},{"kind":"Struct","id":{"krate":0,"index":760},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":97785,"byte_end":97800,"line_start":520,"line_end":520,"column_start":12,"column_end":27},"name":"SeqDeserializer","qualname":"::de::value::SeqDeserializer","value":"SeqDeserializer { iter, len, marker }","parent":null,"children":[{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763}],"decl_id":null,"docs":" A helper deserializer that deserializes a sequence.\n"},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":97985,"byte_end":97988,"line_start":530,"line_end":530,"column_start":12,"column_end":15},"name":"new","qualname":"<SeqDeserializer<I, E>>::new","value":"fn (iter: I, len: usize) -> Self","parent":{"krate":0,"index":760},"children":[],"decl_id":null,"docs":" Construct a new `SeqDeserializer<I>`.\n"},{"kind":"Struct","id":{"krate":0,"index":817},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":100921,"byte_end":100943,"line_start":636,"line_end":636,"column_start":12,"column_end":34},"name":"SeqVisitorDeserializer","qualname":"::de::value::SeqVisitorDeserializer","value":"SeqVisitorDeserializer { visitor, marker }","parent":null,"children":[{"krate":0,"index":818},{"krate":0,"index":819}],"decl_id":null,"docs":" A helper deserializer that deserializes a sequence using a `SeqVisitor`.\n"},{"kind":"Method","id":{"krate":0,"index":825},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":101178,"byte_end":101181,"line_start":646,"line_end":646,"column_start":12,"column_end":15},"name":"new","qualname":"<SeqVisitorDeserializer<V_, E>>::new","value":"fn (visitor: V_) -> Self","parent":{"krate":0,"index":817},"children":[],"decl_id":null,"docs":" Construct a new `SeqVisitorDeserializer<V_, E>`.\n"},{"kind":"Struct","id":{"krate":0,"index":835},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":102019,"byte_end":102034,"line_start":674,"line_end":674,"column_start":12,"column_end":27},"name":"MapDeserializer","qualname":"::de::value::MapDeserializer","value":"MapDeserializer { iter, value, len, marker }","parent":null,"children":[{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839}],"decl_id":null,"docs":" A helper deserializer that deserializes a map.\n"},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":102535,"byte_end":102538,"line_start":693,"line_end":693,"column_start":12,"column_end":15},"name":"new","qualname":"<MapDeserializer<I, K, V, E>>::new","value":"fn (iter: I, len: usize) -> Self","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" Construct a new `MapDeserializer<I, K, V, E>` with a specific length.\n"},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":102885,"byte_end":102894,"line_start":704,"line_end":704,"column_start":12,"column_end":21},"name":"unbounded","qualname":"<MapDeserializer<I, K, V, E>>::unbounded","value":"fn (iter: I) -> Self","parent":{"krate":0,"index":835},"children":[],"decl_id":null,"docs":" Construct a new `MapDeserializer<I, K, V, E>` that is not bounded\n by a specific length and that delegates to `iter` for its size hint.\n"},{"kind":"Struct","id":{"krate":0,"index":993},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":110129,"byte_end":110151,"line_start":959,"line_end":959,"column_start":12,"column_end":34},"name":"MapVisitorDeserializer","qualname":"::de::value::MapVisitorDeserializer","value":"MapVisitorDeserializer { visitor, marker }","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":995}],"decl_id":null,"docs":" A helper deserializer that deserializes a map using a `MapVisitor`.\n"},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":110386,"byte_end":110389,"line_start":969,"line_end":969,"column_start":12,"column_end":15},"name":"new","qualname":"<MapVisitorDeserializer<V_, E>>::new","value":"fn (visitor: V_) -> Self","parent":{"krate":0,"index":993},"children":[],"decl_id":null,"docs":" Construct a new `MapVisitorDeserializer<V_, E>`.\n"},{"kind":"Struct","id":{"krate":0,"index":1017},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":111490,"byte_end":111507,"line_start":1007,"line_end":1007,"column_start":12,"column_end":29},"name":"BytesDeserializer","qualname":"::de::value::BytesDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `&[u8]`.\n"},{"kind":"Struct","id":{"krate":0,"index":1038},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/value.rs","byte_start":112691,"byte_end":112710,"line_start":1045,"line_end":1045,"column_start":12,"column_end":31},"name":"ByteBufDeserializer","qualname":"::de::value::ByteBufDeserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A helper deserializer that deserializes a `Vec<u8>`.\n"},{"kind":"Trait","id":{"krate":0,"index":1057},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":114229,"byte_end":114236,"line_start":22,"line_end":22,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::de::from_primitive::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":1058},{"krate":0,"index":1059}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n"},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":114372,"byte_end":114381,"line_start":25,"line_end":25,"column_start":8,"column_end":17},"name":"min_value","qualname":"::de::from_primitive::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n"},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":114466,"byte_end":114475,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"max_value","qualname":"::de::from_primitive::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":1057},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":114503,"byte_end":114515,"line_start":30,"line_end":30,"column_start":14,"column_end":26},"name":"bounded_impl","qualname":"bounded_impl::14615370289065867795","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":1060},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115290,"byte_end":115301,"line_start":58,"line_end":58,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::de::from_primitive::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":1061},{"krate":0,"index":1065},{"krate":0,"index":1069},{"krate":0,"index":1073},{"krate":0,"index":1077},{"krate":0,"index":1079},{"krate":0,"index":1083},{"krate":0,"index":1087},{"krate":0,"index":1091},{"krate":0,"index":1095},{"krate":0,"index":1097},{"krate":0,"index":1101}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n"},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115377,"byte_end":115385,"line_start":61,"line_end":61,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::de::from_primitive::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n"},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115538,"byte_end":115543,"line_start":67,"line_end":67,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::de::from_primitive::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n"},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115691,"byte_end":115697,"line_start":73,"line_end":73,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::de::from_primitive::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n"},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115847,"byte_end":115853,"line_start":79,"line_end":79,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::de::from_primitive::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n"},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":115989,"byte_end":115995,"line_start":84,"line_end":84,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::de::from_primitive::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116092,"byte_end":116100,"line_start":88,"line_end":88,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::de::from_primitive::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n"},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116253,"byte_end":116258,"line_start":94,"line_end":94,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::de::from_primitive::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n"},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116406,"byte_end":116412,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::de::from_primitive::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n"},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116562,"byte_end":116568,"line_start":106,"line_end":106,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::de::from_primitive::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n"},{"kind":"Method","id":{"krate":0,"index":1095},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116718,"byte_end":116724,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::de::from_primitive::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1097},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116820,"byte_end":116826,"line_start":116,"line_end":116,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::de::from_primitive::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n"},{"kind":"Method","id":{"krate":0,"index":1101},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":116976,"byte_end":116982,"line_start":122,"line_end":122,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::de::from_primitive::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":1060},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":118016,"byte_end":118037,"line_start":160,"line_end":160,"column_start":14,"column_end":35},"name":"impl_to_primitive_int","qualname":"impl_to_primitive_int::10131408767184425268","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":120454,"byte_end":120476,"line_start":230,"line_end":230,"column_start":14,"column_end":36},"name":"impl_to_primitive_uint","qualname":"impl_to_primitive_uint::11698654710691365577","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":122555,"byte_end":122578,"line_start":287,"line_end":287,"column_start":14,"column_end":37},"name":"impl_to_primitive_float","qualname":"impl_to_primitive_float::2370446334943728373","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":1105},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":123869,"byte_end":123882,"line_start":323,"line_end":323,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::de::from_primitive::FromPrimitive","value":"FromPrimitive:  Sized","parent":null,"children":[{"krate":0,"index":1106},{"krate":0,"index":1108},{"krate":0,"index":1110},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":123913,"byte_end":123923,"line_start":325,"line_end":325,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::de::from_primitive::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124022,"byte_end":124029,"line_start":330,"line_end":330,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::de::from_primitive::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124125,"byte_end":124133,"line_start":335,"line_end":335,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::de::from_primitive::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124230,"byte_end":124238,"line_start":340,"line_end":340,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::de::from_primitive::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124321,"byte_end":124329,"line_start":344,"line_end":344,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::de::from_primitive::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124377,"byte_end":124387,"line_start":347,"line_end":347,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::de::from_primitive::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124486,"byte_end":124493,"line_start":352,"line_end":352,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::de::from_primitive::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124589,"byte_end":124597,"line_start":357,"line_end":357,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::de::from_primitive::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124694,"byte_end":124702,"line_start":362,"line_end":362,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::de::from_primitive::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124785,"byte_end":124793,"line_start":366,"line_end":366,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::de::from_primitive::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124841,"byte_end":124849,"line_start":369,"line_end":369,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::de::from_primitive::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":124946,"byte_end":124954,"line_start":374,"line_end":374,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::de::from_primitive::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":1105},"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/from_primitive.rs","byte_start":125045,"byte_end":125064,"line_start":379,"line_end":379,"column_start":14,"column_end":33},"name":"impl_from_primitive","qualname":"impl_from_primitive::3518911262857250987","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":1130},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":13794,"byte_end":13799,"line_start":23,"line_end":23,"column_start":11,"column_end":16},"name":"Error","qualname":"::de::Error","value":"Error:  Sized + error::Error","parent":null,"children":[{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1135},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1141},{"krate":0,"index":1143},{"krate":0,"index":1145},{"krate":0,"index":1147}],"decl_id":null,"docs":" `Error` is a trait that allows a `Deserialize` to generically create a\n `Deserializer` error.\n"},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":13959,"byte_end":13965,"line_start":26,"line_end":26,"column_start":8,"column_end":14},"name":"custom","qualname":"::de::Error::custom","value":"fn <T> (msg: T) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when there is general error when deserializing a type.\n"},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":14282,"byte_end":14295,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"end_of_stream","qualname":"::de::Error::end_of_stream","value":"fn () -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` type unexpectedly hit the end of the stream.\n"},{"kind":"Method","id":{"krate":0,"index":1135},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":14381,"byte_end":14393,"line_start":36,"line_end":36,"column_start":8,"column_end":20},"name":"invalid_type","qualname":"::de::Error::invalid_type","value":"fn (ty: Type) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` was passed an incorrect type.\n"},{"kind":"Method","id":{"krate":0,"index":1137},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":14563,"byte_end":14576,"line_start":41,"line_end":41,"column_start":8,"column_end":21},"name":"invalid_value","qualname":"::de::Error::invalid_value","value":"fn (msg: &str) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` was passed an incorrect value.\n"},{"kind":"Method","id":{"krate":0,"index":1139},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":14928,"byte_end":14942,"line_start":49,"line_end":49,"column_start":8,"column_end":22},"name":"invalid_length","qualname":"::de::Error::invalid_length","value":"fn (len: usize) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.\n\n The parameter `len` is the number of arguments found in the serialization. The sequence\n may either expect more arguments or less arguments.\n"},{"kind":"Method","id":{"krate":0,"index":1141},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":15115,"byte_end":15130,"line_start":54,"line_end":54,"column_start":8,"column_end":23},"name":"unknown_variant","qualname":"::de::Error::unknown_variant","value":"fn (field: &str) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` enum type received an unexpected variant.\n"},{"kind":"Method","id":{"krate":0,"index":1143},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":15315,"byte_end":15328,"line_start":59,"line_end":59,"column_start":8,"column_end":21},"name":"unknown_field","qualname":"::de::Error::unknown_field","value":"fn (field: &str) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` struct type received an unexpected struct field.\n"},{"kind":"Method","id":{"krate":0,"index":1145},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":15499,"byte_end":15512,"line_start":64,"line_end":64,"column_start":8,"column_end":21},"name":"missing_field","qualname":"::de::Error::missing_field","value":"fn (field: &'static str) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" raised when a `deserialize` struct type did not receive a field.\n"},{"kind":"Method","id":{"krate":0,"index":1147},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":15723,"byte_end":15738,"line_start":70,"line_end":70,"column_start":8,"column_end":23},"name":"duplicate_field","qualname":"::de::Error::duplicate_field","value":"fn (field: &'static str) -> Self","parent":{"krate":0,"index":1130},"children":[],"decl_id":null,"docs":" Raised when a `Deserialize` struct type received more than one of the\n same struct field.\n"},{"kind":"Enum","id":{"krate":0,"index":11375},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16010,"byte_end":16014,"line_start":78,"line_end":78,"column_start":10,"column_end":14},"name":"Type","qualname":"::de::Type","value":"Type::{Bool, Usize, U8, U16, U32, U64, Isize, I8, I16, I32, I64, F32, F64, Char, Str, String, Unit, Option, Seq, Map, UnitStruct, NewtypeStruct, TupleStruct, Struct, FieldName, Tuple, Enum, VariantName, StructVariant, TupleVariant, UnitVariant, Bytes}","parent":null,"children":[{"krate":0,"index":11376},{"krate":0,"index":11377},{"krate":0,"index":11378},{"krate":0,"index":11379},{"krate":0,"index":11380},{"krate":0,"index":11381},{"krate":0,"index":11382},{"krate":0,"index":11383},{"krate":0,"index":11384},{"krate":0,"index":11385},{"krate":0,"index":11386},{"krate":0,"index":11387},{"krate":0,"index":11388},{"krate":0,"index":11389},{"krate":0,"index":11390},{"krate":0,"index":11391},{"krate":0,"index":11392},{"krate":0,"index":11393},{"krate":0,"index":11394},{"krate":0,"index":11395},{"krate":0,"index":11396},{"krate":0,"index":11397},{"krate":0,"index":11398},{"krate":0,"index":11399},{"krate":0,"index":11400},{"krate":0,"index":11401},{"krate":0,"index":11402},{"krate":0,"index":11403},{"krate":0,"index":11404},{"krate":0,"index":11405},{"krate":0,"index":11406},{"krate":0,"index":11407}],"decl_id":null,"docs":" `Type` represents all the primitive types that can be deserialized. This is used by\n `Error::invalid_type`.\n"},{"kind":"Tuple","id":{"krate":0,"index":11376},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16055,"byte_end":16059,"line_start":80,"line_end":80,"column_start":5,"column_end":9},"name":"Bool","qualname":"::de::Type::Bool","value":"Type::Bool","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `bool` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11377},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16101,"byte_end":16106,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Usize","qualname":"::de::Type::Usize","value":"Type::Usize","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `usize` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11378},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16145,"byte_end":16147,"line_start":86,"line_end":86,"column_start":5,"column_end":7},"name":"U8","qualname":"::de::Type::U8","value":"Type::U8","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `u8` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11379},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16187,"byte_end":16190,"line_start":89,"line_end":89,"column_start":5,"column_end":8},"name":"U16","qualname":"::de::Type::U16","value":"Type::U16","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `u16` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11380},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16230,"byte_end":16233,"line_start":92,"line_end":92,"column_start":5,"column_end":8},"name":"U32","qualname":"::de::Type::U32","value":"Type::U32","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `u32` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11381},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16273,"byte_end":16276,"line_start":95,"line_end":95,"column_start":5,"column_end":8},"name":"U64","qualname":"::de::Type::U64","value":"Type::U64","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `u64` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11382},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16318,"byte_end":16323,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Isize","qualname":"::de::Type::Isize","value":"Type::Isize","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `isize` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11383},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16362,"byte_end":16364,"line_start":101,"line_end":101,"column_start":5,"column_end":7},"name":"I8","qualname":"::de::Type::I8","value":"Type::I8","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `i8` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11384},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16404,"byte_end":16407,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"I16","qualname":"::de::Type::I16","value":"Type::I16","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `i16` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11385},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16447,"byte_end":16450,"line_start":107,"line_end":107,"column_start":5,"column_end":8},"name":"I32","qualname":"::de::Type::I32","value":"Type::I32","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `i32` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11386},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16490,"byte_end":16493,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"I64","qualname":"::de::Type::I64","value":"Type::I64","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `i64` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11387},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16533,"byte_end":16536,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"F32","qualname":"::de::Type::F32","value":"Type::F32","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `f32` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11388},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16576,"byte_end":16579,"line_start":116,"line_end":116,"column_start":5,"column_end":8},"name":"F64","qualname":"::de::Type::F64","value":"Type::F64","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `f64` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11389},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16620,"byte_end":16624,"line_start":119,"line_end":119,"column_start":5,"column_end":9},"name":"Char","qualname":"::de::Type::Char","value":"Type::Char","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `char` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11390},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16665,"byte_end":16668,"line_start":122,"line_end":122,"column_start":5,"column_end":8},"name":"Str","qualname":"::de::Type::Str","value":"Type::Str","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `&str` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11391},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16711,"byte_end":16717,"line_start":125,"line_end":125,"column_start":5,"column_end":11},"name":"String","qualname":"::de::Type::String","value":"Type::String","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `String` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11392},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16756,"byte_end":16760,"line_start":128,"line_end":128,"column_start":5,"column_end":9},"name":"Unit","qualname":"::de::Type::Unit","value":"Type::Unit","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `()` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11393},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16807,"byte_end":16813,"line_start":131,"line_end":131,"column_start":5,"column_end":11},"name":"Option","qualname":"::de::Type::Option","value":"Type::Option","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents an `Option<T>` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11394},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16856,"byte_end":16859,"line_start":134,"line_end":134,"column_start":5,"column_end":8},"name":"Seq","qualname":"::de::Type::Seq","value":"Type::Seq","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a sequence type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11395},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16897,"byte_end":16900,"line_start":137,"line_end":137,"column_start":5,"column_end":8},"name":"Map","qualname":"::de::Type::Map","value":"Type::Map","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a map type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11396},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16946,"byte_end":16956,"line_start":140,"line_end":140,"column_start":5,"column_end":15},"name":"UnitStruct","qualname":"::de::Type::UnitStruct","value":"Type::UnitStruct","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a unit struct type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11397},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":16998,"byte_end":17011,"line_start":143,"line_end":143,"column_start":5,"column_end":18},"name":"NewtypeStruct","qualname":"::de::Type::NewtypeStruct","value":"Type::NewtypeStruct","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a newtype type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11398},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17058,"byte_end":17069,"line_start":146,"line_end":146,"column_start":5,"column_end":16},"name":"TupleStruct","qualname":"::de::Type::TupleStruct","value":"Type::TupleStruct","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a tuple struct type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11399},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17110,"byte_end":17116,"line_start":149,"line_end":149,"column_start":5,"column_end":11},"name":"Struct","qualname":"::de::Type::Struct","value":"Type::Struct","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a struct type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11400},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17163,"byte_end":17172,"line_start":152,"line_end":152,"column_start":5,"column_end":14},"name":"FieldName","qualname":"::de::Type::FieldName","value":"Type::FieldName","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a struct field name.\n"},{"kind":"Tuple","id":{"krate":0,"index":11401},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17212,"byte_end":17217,"line_start":155,"line_end":155,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::de::Type::Tuple","value":"Type::Tuple","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a tuple type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11402},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17259,"byte_end":17263,"line_start":158,"line_end":158,"column_start":5,"column_end":9},"name":"Enum","qualname":"::de::Type::Enum","value":"Type::Enum","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents an `enum` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":11403},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17311,"byte_end":17322,"line_start":161,"line_end":161,"column_start":5,"column_end":16},"name":"VariantName","qualname":"::de::Type::VariantName","value":"Type::VariantName","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents an enum variant name.\n"},{"kind":"Tuple","id":{"krate":0,"index":11404},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17366,"byte_end":17379,"line_start":164,"line_end":164,"column_start":5,"column_end":18},"name":"StructVariant","qualname":"::de::Type::StructVariant","value":"Type::StructVariant","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a struct variant.\n"},{"kind":"Tuple","id":{"krate":0,"index":11405},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17422,"byte_end":17434,"line_start":167,"line_end":167,"column_start":5,"column_end":17},"name":"TupleVariant","qualname":"::de::Type::TupleVariant","value":"Type::TupleVariant","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a tuple variant.\n"},{"kind":"Tuple","id":{"krate":0,"index":11406},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17476,"byte_end":17487,"line_start":170,"line_end":170,"column_start":5,"column_end":16},"name":"UnitVariant","qualname":"::de::Type::UnitVariant","value":"Type::UnitVariant","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a unit variant.\n"},{"kind":"Tuple","id":{"krate":0,"index":11407},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":17529,"byte_end":17534,"line_start":173,"line_end":173,"column_start":5,"column_end":10},"name":"Bytes","qualname":"::de::Type::Bytes","value":"Type::Bytes","parent":{"krate":0,"index":11375},"children":[],"decl_id":null,"docs":" Represents a `&[u8]` type.\n"},{"kind":"Trait","id":{"krate":0,"index":1154},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":19323,"byte_end":19334,"line_start":219,"line_end":219,"column_start":11,"column_end":22},"name":"Deserialize","qualname":"::de::Deserialize","value":"Deserialize:  Sized","parent":null,"children":[{"krate":0,"index":1155}],"decl_id":null,"docs":" `Deserialize` represents a type that can be deserialized.\n"},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":19409,"byte_end":19420,"line_start":221,"line_end":221,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::de::Deserialize::deserialize","value":"fn <D> (deserializer: &mut D) -> Result<Self, D::Error>","parent":{"krate":0,"index":1154},"children":[],"decl_id":null,"docs":" Deserialize this value given this `Deserializer`.\n"},{"kind":"Trait","id":{"krate":0,"index":1158},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":20480,"byte_end":20492,"line_start":239,"line_end":239,"column_start":11,"column_end":23},"name":"Deserializer","qualname":"::de::Deserializer","value":"Deserializer","parent":null,"children":[{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1164},{"krate":0,"index":1168},{"krate":0,"index":1172},{"krate":0,"index":1176},{"krate":0,"index":1180},{"krate":0,"index":1184},{"krate":0,"index":1188},{"krate":0,"index":1192},{"krate":0,"index":1196},{"krate":0,"index":1200},{"krate":0,"index":1204},{"krate":0,"index":1208},{"krate":0,"index":1212},{"krate":0,"index":1216},{"krate":0,"index":1220},{"krate":0,"index":1224},{"krate":0,"index":1228},{"krate":0,"index":1232},{"krate":0,"index":1236},{"krate":0,"index":1240},{"krate":0,"index":1245},{"krate":0,"index":1249},{"krate":0,"index":1253},{"krate":0,"index":1258},{"krate":0,"index":1263},{"krate":0,"index":1269},{"krate":0,"index":1275},{"krate":0,"index":1279},{"krate":0,"index":1284},{"krate":0,"index":1290}],"decl_id":null,"docs":" `Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\n value. It supports two entry point styles which enables different kinds of deserialization.\n\n 1) The `deserialize` method. File formats like JSON embed the type of its construct in its file\n    format. This allows the `Deserializer` to deserialize into a generic type like\n    `json::Value`, which can represent all JSON types.\n\n 2) The `deserialize_*` methods. File formats like bincode do not embed in its format how to\n    decode its values. It relies instead on the `Deserialize` type to hint to the `Deserializer`\n    with the `deserialize_*` methods how it should parse the next value. One downside though to\n    only supporting the `deserialize_*` types is that it does not allow for deserializing into a\n    generic `json::Value`-esque type.\n"},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":20696,"byte_end":20707,"line_start":244,"line_end":244,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::de::Deserializer::deserialize","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method walks a visitor through a value as it is being deserialized.\n"},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":20884,"byte_end":20900,"line_start":248,"line_end":248,"column_start":8,"column_end":24},"name":"deserialize_bool","qualname":"::de::Deserializer::deserialize_bool","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `bool` value.\n"},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":21144,"byte_end":21161,"line_start":253,"line_end":253,"column_start":8,"column_end":25},"name":"deserialize_usize","qualname":"::de::Deserializer::deserialize_usize","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `usize` value.\n A reasonable default is to forward to `deserialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1172},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":21402,"byte_end":21416,"line_start":258,"line_end":258,"column_start":8,"column_end":22},"name":"deserialize_u8","qualname":"::de::Deserializer::deserialize_u8","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `u8` value.\n A reasonable default is to forward to `deserialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":21658,"byte_end":21673,"line_start":263,"line_end":263,"column_start":8,"column_end":23},"name":"deserialize_u16","qualname":"::de::Deserializer::deserialize_u16","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `u16` value.\n A reasonable default is to forward to `deserialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":21915,"byte_end":21930,"line_start":268,"line_end":268,"column_start":8,"column_end":23},"name":"deserialize_u32","qualname":"::de::Deserializer::deserialize_u32","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `u32` value.\n A reasonable default is to forward to `deserialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":22107,"byte_end":22122,"line_start":272,"line_end":272,"column_start":8,"column_end":23},"name":"deserialize_u64","qualname":"::de::Deserializer::deserialize_u64","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `u64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":22366,"byte_end":22383,"line_start":277,"line_end":277,"column_start":8,"column_end":25},"name":"deserialize_isize","qualname":"::de::Deserializer::deserialize_isize","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `isize` value.\n A reasonable default is to forward to `deserialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":22624,"byte_end":22638,"line_start":282,"line_end":282,"column_start":8,"column_end":22},"name":"deserialize_i8","qualname":"::de::Deserializer::deserialize_i8","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `i8` value.\n A reasonable default is to forward to `deserialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":22880,"byte_end":22895,"line_start":287,"line_end":287,"column_start":8,"column_end":23},"name":"deserialize_i16","qualname":"::de::Deserializer::deserialize_i16","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `i16` value.\n A reasonable default is to forward to `deserialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":23137,"byte_end":23152,"line_start":292,"line_end":292,"column_start":8,"column_end":23},"name":"deserialize_i32","qualname":"::de::Deserializer::deserialize_i32","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `i32` value.\n A reasonable default is to forward to `deserialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1204},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":23329,"byte_end":23344,"line_start":296,"line_end":296,"column_start":8,"column_end":23},"name":"deserialize_i64","qualname":"::de::Deserializer::deserialize_i64","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `i64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1208},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":23585,"byte_end":23600,"line_start":301,"line_end":301,"column_start":8,"column_end":23},"name":"deserialize_f32","qualname":"::de::Deserializer::deserialize_f32","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `f32` value.\n A reasonable default is to forward to `deserialize_f64`.\n"},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":23776,"byte_end":23791,"line_start":305,"line_end":305,"column_start":8,"column_end":23},"name":"deserialize_f64","qualname":"::de::Deserializer::deserialize_f64","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `f64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1216},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":23968,"byte_end":23984,"line_start":309,"line_end":309,"column_start":8,"column_end":24},"name":"deserialize_char","qualname":"::de::Deserializer::deserialize_char","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `char` value.\n"},{"kind":"Method","id":{"krate":0,"index":1220},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":24161,"byte_end":24176,"line_start":313,"line_end":313,"column_start":8,"column_end":23},"name":"deserialize_str","qualname":"::de::Deserializer::deserialize_str","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `&str` value.\n"},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":24355,"byte_end":24373,"line_start":317,"line_end":317,"column_start":8,"column_end":26},"name":"deserialize_string","qualname":"::de::Deserializer::deserialize_string","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `String` value.\n"},{"kind":"Method","id":{"krate":0,"index":1228},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":24551,"byte_end":24567,"line_start":321,"line_end":321,"column_start":8,"column_end":24},"name":"deserialize_unit","qualname":"::de::Deserializer::deserialize_unit","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `unit` value.\n"},{"kind":"Method","id":{"krate":0,"index":1232},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":24918,"byte_end":24936,"line_start":327,"line_end":327,"column_start":8,"column_end":26},"name":"deserialize_option","qualname":"::de::Deserializer::deserialize_option","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an `Option` value. This allows\n deserializers that encode an optional value as a nullable value to convert the null value\n into a `None`, and a regular value as `Some(value)`.\n"},{"kind":"Method","id":{"krate":0,"index":1236},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":25201,"byte_end":25216,"line_start":332,"line_end":332,"column_start":8,"column_end":23},"name":"deserialize_seq","qualname":"::de::Deserializer::deserialize_seq","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a sequence value. This allows\n deserializers to parse sequences that aren't tagged as sequences.\n"},{"kind":"Method","id":{"krate":0,"index":1240},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":25477,"byte_end":25503,"line_start":337,"line_end":337,"column_start":8,"column_end":34},"name":"deserialize_seq_fixed_size","qualname":"::de::Deserializer::deserialize_seq_fixed_size","value":"fn <V> (&mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a fixed size array. This allows\n deserializers to parse arrays that aren't tagged as arrays.\n"},{"kind":"Method","id":{"krate":0,"index":1245},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":25887,"byte_end":25904,"line_start":345,"line_end":345,"column_start":8,"column_end":25},"name":"deserialize_bytes","qualname":"::de::Deserializer::deserialize_bytes","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a `Vec<u8>`. This allows\n deserializers that provide a custom byte vector serialization to properly deserialize the\n type.\n"},{"kind":"Method","id":{"krate":0,"index":1249},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":26163,"byte_end":26178,"line_start":350,"line_end":350,"column_start":8,"column_end":23},"name":"deserialize_map","qualname":"::de::Deserializer::deserialize_map","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a map of values. This allows\n deserializers to parse sequences that aren't tagged as maps.\n"},{"kind":"Method","id":{"krate":0,"index":1253},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":26442,"byte_end":26465,"line_start":355,"line_end":355,"column_start":8,"column_end":31},"name":"deserialize_unit_struct","qualname":"::de::Deserializer::deserialize_unit_struct","value":"fn <V> (&mut self, name: &'static str, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a unit struct. This allows\n deserializers to a unit struct that aren't tagged as a unit struct.\n"},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":26909,"byte_end":26935,"line_start":363,"line_end":363,"column_start":8,"column_end":34},"name":"deserialize_newtype_struct","qualname":"::de::Deserializer::deserialize_newtype_struct","value":"fn <V> (&mut self, name: &'static str, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a newtype struct. This allows\n deserializers to a newtype struct that aren't tagged as a newtype struct.\n A reasonable default is to simply deserialize the expected value directly.\n"},{"kind":"Method","id":{"krate":0,"index":1263},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":27292,"byte_end":27316,"line_start":370,"line_end":370,"column_start":8,"column_end":32},"name":"deserialize_tuple_struct","qualname":"::de::Deserializer::deserialize_tuple_struct","value":"fn <V> (&mut self, name: &'static str, len: usize, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a tuple struct. This allows\n deserializers to parse sequences that aren't tagged as sequences.\n"},{"kind":"Method","id":{"krate":0,"index":1269},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":27705,"byte_end":27723,"line_start":378,"line_end":378,"column_start":8,"column_end":26},"name":"deserialize_struct","qualname":"::de::Deserializer::deserialize_struct","value":"fn <V> (&mut self, name: &'static str, fields: &'static [&'static str], visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a struct. This allows\n deserializers to parse sequences that aren't tagged as maps.\n"},{"kind":"Method","id":{"krate":0,"index":1275},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":28179,"byte_end":28203,"line_start":387,"line_end":387,"column_start":8,"column_end":32},"name":"deserialize_struct_field","qualname":"::de::Deserializer::deserialize_struct_field","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting some sort of struct field\n name.  This allows deserializers to choose between &str, usize, or &[u8] to properly\n deserialize a struct field.\n"},{"kind":"Method","id":{"krate":0,"index":1279},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":28489,"byte_end":28506,"line_start":392,"line_end":392,"column_start":8,"column_end":25},"name":"deserialize_tuple","qualname":"::de::Deserializer::deserialize_tuple","value":"fn <V> (&mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting a tuple value. This allows\n deserializers that provide a custom tuple serialization to properly deserialize the type.\n"},{"kind":"Method","id":{"krate":0,"index":1284},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":28818,"byte_end":28834,"line_start":398,"line_end":398,"column_start":8,"column_end":24},"name":"deserialize_enum","qualname":"::de::Deserializer::deserialize_enum","value":"fn <V> (&mut self, name: &'static str, variants: &'static [&'static str], visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type is expecting an enum value. This allows\n deserializers that provide a custom enumeration serialization to properly deserialize the\n type.\n"},{"kind":"Method","id":{"krate":0,"index":1290},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":29208,"byte_end":29231,"line_start":406,"line_end":406,"column_start":8,"column_end":31},"name":"deserialize_ignored_any","qualname":"::de::Deserializer::deserialize_ignored_any","value":"fn <V> (&mut self, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1158},"children":[],"decl_id":null,"docs":" This method hints that the `Deserialize` type needs to deserialize a value whose type\n doesn't matter because it is ignored.\n"},{"kind":"Trait","id":{"krate":0,"index":1294},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":29482,"byte_end":29489,"line_start":413,"line_end":413,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::de::Visitor","value":"Visitor","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296},{"krate":0,"index":1300},{"krate":0,"index":1304},{"krate":0,"index":1308},{"krate":0,"index":1312},{"krate":0,"index":1316},{"krate":0,"index":1320},{"krate":0,"index":1324},{"krate":0,"index":1328},{"krate":0,"index":1332},{"krate":0,"index":1336},{"krate":0,"index":1340},{"krate":0,"index":1344},{"krate":0,"index":1348},{"krate":0,"index":1352},{"krate":0,"index":1356},{"krate":0,"index":1360},{"krate":0,"index":1363},{"krate":0,"index":1367},{"krate":0,"index":1370},{"krate":0,"index":1374},{"krate":0,"index":1378},{"krate":0,"index":1382},{"krate":0,"index":1386},{"krate":0,"index":1390}],"decl_id":null,"docs":" This trait represents a visitor that walks through a deserializer.\n"},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":29632,"byte_end":29642,"line_start":418,"line_end":418,"column_start":8,"column_end":18},"name":"visit_bool","qualname":"::de::Visitor::visit_bool","value":"fn <E> (&mut self, v: bool) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_bool` deserializes a `bool` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":29861,"byte_end":29872,"line_start":426,"line_end":426,"column_start":8,"column_end":19},"name":"visit_isize","qualname":"::de::Visitor::visit_isize","value":"fn <E> (&mut self, v: isize) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_isize` deserializes a `isize` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":30055,"byte_end":30063,"line_start":433,"line_end":433,"column_start":8,"column_end":16},"name":"visit_i8","qualname":"::de::Visitor::visit_i8","value":"fn <E> (&mut self, v: i8) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_i8` deserializes a `i8` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1308},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":30245,"byte_end":30254,"line_start":440,"line_end":440,"column_start":8,"column_end":17},"name":"visit_i16","qualname":"::de::Visitor::visit_i16","value":"fn <E> (&mut self, v: i16) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_i16` deserializes a `i16` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":30437,"byte_end":30446,"line_start":447,"line_end":447,"column_start":8,"column_end":17},"name":"visit_i32","qualname":"::de::Visitor::visit_i32","value":"fn <E> (&mut self, v: i32) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_i32` deserializes a `i32` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":30629,"byte_end":30638,"line_start":454,"line_end":454,"column_start":8,"column_end":17},"name":"visit_i64","qualname":"::de::Visitor::visit_i64","value":"fn <E> (&mut self, v: i64) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_i64` deserializes a `i64` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":30855,"byte_end":30866,"line_start":462,"line_end":462,"column_start":8,"column_end":19},"name":"visit_usize","qualname":"::de::Visitor::visit_usize","value":"fn <E> (&mut self, v: usize) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_usize` deserializes a `usize` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":31049,"byte_end":31057,"line_start":469,"line_end":469,"column_start":8,"column_end":16},"name":"visit_u8","qualname":"::de::Visitor::visit_u8","value":"fn <E> (&mut self, v: u8) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_u8` deserializes a `u8` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":31239,"byte_end":31248,"line_start":476,"line_end":476,"column_start":8,"column_end":17},"name":"visit_u16","qualname":"::de::Visitor::visit_u16","value":"fn <E> (&mut self, v: u16) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_u16` deserializes a `u16` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":31431,"byte_end":31440,"line_start":483,"line_end":483,"column_start":8,"column_end":17},"name":"visit_u32","qualname":"::de::Visitor::visit_u32","value":"fn <E> (&mut self, v: u32) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_u32` deserializes a `u32` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":31623,"byte_end":31632,"line_start":490,"line_end":490,"column_start":8,"column_end":17},"name":"visit_u64","qualname":"::de::Visitor::visit_u64","value":"fn <E> (&mut self, v: u64) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_u64` deserializes a `u64` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":31845,"byte_end":31854,"line_start":498,"line_end":498,"column_start":8,"column_end":17},"name":"visit_f32","qualname":"::de::Visitor::visit_f32","value":"fn <E> (&mut self, v: f32) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_f32` deserializes a `f32` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":32037,"byte_end":32046,"line_start":505,"line_end":505,"column_start":8,"column_end":17},"name":"visit_f64","qualname":"::de::Visitor::visit_f64","value":"fn <E> (&mut self, v: f64) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_f64` deserializes a `f64` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":32275,"byte_end":32285,"line_start":514,"line_end":514,"column_start":8,"column_end":18},"name":"visit_char","qualname":"::de::Visitor::visit_char","value":"fn <E> (&mut self, v: char) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_char` deserializes a `char` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":32494,"byte_end":32503,"line_start":521,"line_end":521,"column_start":8,"column_end":17},"name":"visit_str","qualname":"::de::Visitor::visit_str","value":"fn <E> (&mut self, v: &str) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_str` deserializes a `&str` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":32967,"byte_end":32979,"line_start":533,"line_end":533,"column_start":8,"column_end":20},"name":"visit_string","qualname":"::de::Visitor::visit_string","value":"fn <E> (&mut self, v: String) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\n a copy if it is deserializing a string from a `String` type.  By default it passes a `&str`\n to the `visit_str` method.\n"},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":33159,"byte_end":33169,"line_start":540,"line_end":540,"column_start":8,"column_end":18},"name":"visit_unit","qualname":"::de::Visitor::visit_unit","value":"fn <E> (&mut self) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_unit` deserializes a `()` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":33384,"byte_end":33401,"line_start":548,"line_end":548,"column_start":8,"column_end":25},"name":"visit_unit_struct","qualname":"::de::Visitor::visit_unit_struct","value":"fn <E> (&mut self, name: &'static str) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_unit_struct` deserializes a unit struct into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":33617,"byte_end":33627,"line_start":556,"line_end":556,"column_start":8,"column_end":18},"name":"visit_none","qualname":"::de::Visitor::visit_none","value":"fn <E> (&mut self) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_none` deserializes a none value into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1370},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":33817,"byte_end":33827,"line_start":563,"line_end":563,"column_start":8,"column_end":18},"name":"visit_some","qualname":"::de::Visitor::visit_some","value":"fn <D> (&mut self, deserializer: &mut D) -> Result<Self::Value, D::Error>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_some` deserializes a value into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1374},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":34093,"byte_end":34113,"line_start":571,"line_end":571,"column_start":8,"column_end":28},"name":"visit_newtype_struct","qualname":"::de::Visitor::visit_newtype_struct","value":"fn <D> (&mut self, deserializer: &mut D) -> Result<Self::Value, D::Error>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_newtype_struct` deserializes a value into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1378},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":34382,"byte_end":34391,"line_start":579,"line_end":579,"column_start":8,"column_end":17},"name":"visit_seq","qualname":"::de::Visitor::visit_seq","value":"fn <V> (&mut self, visitor: V) -> Result<Self::Value, V::Error>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_seq` deserializes a `SeqVisitor` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":34633,"byte_end":34642,"line_start":587,"line_end":587,"column_start":8,"column_end":17},"name":"visit_map","qualname":"::de::Visitor::visit_map","value":"fn <V> (&mut self, visitor: V) -> Result<Self::Value, V::Error>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_map` deserializes a `MapVisitor` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1386},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":34881,"byte_end":34892,"line_start":595,"line_end":595,"column_start":8,"column_end":19},"name":"visit_bytes","qualname":"::de::Visitor::visit_bytes","value":"fn <E> (&mut self, v: &[u8]) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_bytes` deserializes a `&[u8]` into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":35176,"byte_end":35190,"line_start":604,"line_end":604,"column_start":8,"column_end":22},"name":"visit_byte_buf","qualname":"::de::Visitor::visit_byte_buf","value":"fn <E> (&mut self, v: Vec<u8>) -> Result<Self::Value, E>","parent":{"krate":0,"index":1294},"children":[],"decl_id":null,"docs":" `visit_byte_buf` deserializes a `Vec<u8>` into a `Value`.\n"},{"kind":"Trait","id":{"krate":0,"index":1394},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":35583,"byte_end":35593,"line_start":617,"line_end":617,"column_start":11,"column_end":21},"name":"SeqVisitor","qualname":"::de::SeqVisitor","value":"SeqVisitor","parent":null,"children":[{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1401}],"decl_id":null,"docs":" `SeqVisitor` visits each item in a sequence.\n\n This is a trait that a `Deserializer` passes to a `Visitor` implementation, which deserializes\n each item in a sequence.\n"},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":35853,"byte_end":35858,"line_start":623,"line_end":623,"column_start":8,"column_end":13},"name":"visit","qualname":"::de::SeqVisitor::visit","value":"fn <T> (&mut self) -> Result<Option<T>, Self::Error>","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\n are no more remaining items.\n"},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":36037,"byte_end":36040,"line_start":627,"line_end":627,"column_start":8,"column_end":11},"name":"end","qualname":"::de::SeqVisitor::end","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.\n"},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":36179,"byte_end":36188,"line_start":631,"line_end":631,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::de::SeqVisitor::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":1394},"children":[],"decl_id":null,"docs":" Return the lower and upper bound of items remaining in the sequence.\n"},{"kind":"Trait","id":{"krate":0,"index":1414},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":36897,"byte_end":36907,"line_start":662,"line_end":662,"column_start":11,"column_end":21},"name":"MapVisitor","qualname":"::de::MapVisitor","value":"MapVisitor","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1423},{"krate":0,"index":1426},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433}],"decl_id":null,"docs":" `MapVisitor` visits each item in a sequence.\n\n This is a trait that a `Deserializer` passes to a `Visitor` implementation.\n"},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":37194,"byte_end":37199,"line_start":669,"line_end":669,"column_start":8,"column_end":13},"name":"visit","qualname":"::de::MapVisitor::visit","value":"fn <K, V> (&mut self) -> Result<Option<(K, V)>, Self::Error>","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n `Ok(None)` if there are no more remaining items.\n"},{"kind":"Method","id":{"krate":0,"index":1423},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":37676,"byte_end":37685,"line_start":684,"line_end":684,"column_start":8,"column_end":17},"name":"visit_key","qualname":"::de::MapVisitor::visit_key","value":"fn <K> (&mut self) -> Result<Option<K>, Self::Error>","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\n more remaining items.\n"},{"kind":"Method","id":{"krate":0,"index":1426},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":37838,"byte_end":37849,"line_start":688,"line_end":688,"column_start":8,"column_end":19},"name":"visit_value","qualname":"::de::MapVisitor::visit_value","value":"fn <V> (&mut self) -> Result<V, Self::Error>","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" This returns a `Ok(value)` for the next value in the map.\n"},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":38020,"byte_end":38023,"line_start":692,"line_end":692,"column_start":8,"column_end":11},"name":"end","qualname":"::de::MapVisitor::end","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" This signals to the `MapVisitor` that the `Visitor` does not expect any more items.\n"},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":38162,"byte_end":38171,"line_start":696,"line_end":696,"column_start":8,"column_end":17},"name":"size_hint","qualname":"::de::MapVisitor::size_hint","value":"fn (&self) -> (usize, Option<usize>)","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Return the lower and upper bound of items remaining in the sequence.\n"},{"kind":"Method","id":{"krate":0,"index":1433},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":38307,"byte_end":38320,"line_start":701,"line_end":701,"column_start":8,"column_end":21},"name":"missing_field","qualname":"::de::MapVisitor::missing_field","value":"fn <V> (&mut self, field: &'static str) -> Result<V, Self::Error>","parent":{"krate":0,"index":1414},"children":[],"decl_id":null,"docs":" Report that the struct has a field that wasn't deserialized\n"},{"kind":"Trait","id":{"krate":0,"index":1455},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":39454,"byte_end":39465,"line_start":748,"line_end":748,"column_start":11,"column_end":22},"name":"EnumVisitor","qualname":"::de::EnumVisitor","value":"EnumVisitor","parent":null,"children":[{"krate":0,"index":1456},{"krate":0,"index":1457}],"decl_id":null,"docs":" `EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n `Deserializer` in order to deserialize enums.\n"},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":39598,"byte_end":39603,"line_start":753,"line_end":753,"column_start":8,"column_end":13},"name":"visit","qualname":"::de::EnumVisitor::visit","value":"fn <V> (&mut self, visitor: V) -> Result<Self::Value, V::Error>","parent":{"krate":0,"index":1455},"children":[],"decl_id":null,"docs":" Visit the specific variant with the `VariantVisitor`.\n"},{"kind":"Trait","id":{"krate":0,"index":1461},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":39947,"byte_end":39961,"line_start":761,"line_end":761,"column_start":11,"column_end":25},"name":"VariantVisitor","qualname":"::de::VariantVisitor","value":"VariantVisitor","parent":null,"children":[{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1466},{"krate":0,"index":1468},{"krate":0,"index":1471},{"krate":0,"index":1476}],"decl_id":null,"docs":" `VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n `Deserialize` in order to deserialize a specific enum variant.\n"},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":40160,"byte_end":40173,"line_start":766,"line_end":766,"column_start":8,"column_end":21},"name":"visit_variant","qualname":"::de::VariantVisitor::visit_variant","value":"fn <V> (&mut self) -> Result<V, Self::Error>","parent":{"krate":0,"index":1461},"children":[],"decl_id":null,"docs":" `visit_variant` is called to identify which variant to deserialize.\n"},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":40328,"byte_end":40338,"line_start":770,"line_end":770,"column_start":8,"column_end":18},"name":"visit_unit","qualname":"::de::VariantVisitor::visit_unit","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":1461},"children":[],"decl_id":null,"docs":" `visit_unit` is called when deserializing a variant with no values.\n"},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":40622,"byte_end":40635,"line_start":776,"line_end":776,"column_start":8,"column_end":21},"name":"visit_newtype","qualname":"::de::VariantVisitor::visit_newtype","value":"fn <T> (&mut self) -> Result<T, Self::Error>","parent":{"krate":0,"index":1461},"children":[],"decl_id":null,"docs":" `visit_newtype` is called when deserializing a variant with a single value.\n A good default is often to use the `visit_tuple` method to deserialize a `(value,)`.\n"},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":40915,"byte_end":40926,"line_start":782,"line_end":782,"column_start":8,"column_end":19},"name":"visit_tuple","qualname":"::de::VariantVisitor::visit_tuple","value":"fn <V> (&mut self, len: usize, visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1461},"children":[],"decl_id":null,"docs":" `visit_tuple` is called when deserializing a tuple-like variant.\n If no tuple variants are expected, yield a\n `Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`\n"},{"kind":"Method","id":{"krate":0,"index":1476},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/de/mod.rs","byte_start":41281,"byte_end":41293,"line_start":790,"line_end":790,"column_start":8,"column_end":20},"name":"visit_struct","qualname":"::de::VariantVisitor::visit_struct","value":"fn <V> (&mut self, fields: &'static [&'static str], visitor: V) -> Result<V::Value, Self::Error>","parent":{"krate":0,"index":1461},"children":[],"decl_id":null,"docs":" `visit_struct` is called when deserializing a struct-like variant.\n If no struct variants are expected, yield a\n `Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`\n"},{"kind":"Mod","id":{"krate":0,"index":1503},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs","byte_start":1891,"byte_end":1895,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"name":"iter","qualname":"::iter","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","parent":null,"children":[{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1511},{"krate":0,"index":1525},{"krate":0,"index":1529}],"decl_id":null,"docs":" Module that contains helper iterators.\n"},{"kind":"Struct","id":{"krate":0,"index":1506},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":126488,"byte_end":126503,"line_start":7,"line_end":7,"column_start":12,"column_end":27},"name":"LineColIterator","qualname":"::iter::LineColIterator","value":"LineColIterator { iter, line, col }","parent":null,"children":[{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509}],"decl_id":null,"docs":" Iterator over a byte stream that tracks the current position's line and column.\n"},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":126721,"byte_end":126724,"line_start":15,"line_end":15,"column_start":12,"column_end":15},"name":"new","qualname":"<LineColIterator<Iter>>::new","value":"fn (iter: Iter) -> LineColIterator<Iter>","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Construct a new `LineColIterator<Iter>`.\n"},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":126936,"byte_end":126940,"line_start":24,"line_end":24,"column_start":12,"column_end":16},"name":"line","qualname":"<LineColIterator<Iter>>::line","value":"fn (&self) -> usize","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Report the current line inside the iterator.\n"},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":127038,"byte_end":127041,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"col","qualname":"<LineColIterator<Iter>>::col","value":"fn (&self) -> usize","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Report the current column inside the iterator.\n"},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":127136,"byte_end":127143,"line_start":30,"line_end":30,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<LineColIterator<Iter>>::get_ref","value":"fn (&self) -> &Iter","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Gets a reference to the underlying iterator.\n"},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":127248,"byte_end":127255,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LineColIterator<Iter>>::get_mut","value":"fn (&mut self) -> &mut Iter","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Gets a mutable reference to the underlying iterator.\n"},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":127386,"byte_end":127396,"line_start":36,"line_end":36,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<LineColIterator<Iter>>::into_inner","value":"fn (self) -> Iter","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" Unwraps this `LineColIterator`, returning the underlying iterator.\n"},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/iter.rs","byte_start":127547,"byte_end":127551,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"peek","qualname":"<LineColIterator<Peekable<Iter>>>::peek","value":"fn (&mut self) -> Option<&io::Result<u8>>","parent":{"krate":0,"index":1506},"children":[],"decl_id":null,"docs":" peeks at the next value\n"},{"kind":"Mod","id":{"krate":0,"index":1537},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/lib.rs","byte_start":1905,"byte_end":1908,"line_start":55,"line_end":55,"column_start":9,"column_end":12},"name":"ser","qualname":"::ser","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","parent":null,"children":[{"krate":0,"index":1538},{"krate":0,"index":1539},{"krate":0,"index":1705},{"krate":0,"index":1711},{"krate":0,"index":1716}],"decl_id":null,"docs":" Generic serialization framework.\n # For Developers who want to serialize objects\n Implement the `Serialize` trait for the type of objects you want to serialize. Call methods of\n the `serializer` object. For which methods to call and how to do so, look at the documentation\n of the `Serializer` trait.\n\n # For Serialization Format Developers\n Implement the `Serializer` trait for a structure that contains fields that enable it to write\n the serialization result to your target. When a method's argument is an object of type\n `Serialize`, you can either forward the serializer object (`self`) or create a new one,\n depending on the quirks of your format.\n"},{"kind":"Mod","id":{"krate":0,"index":1539},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":129004,"byte_end":129009,"line_start":21,"line_end":21,"column_start":9,"column_end":14},"name":"impls","qualname":"::ser::impls","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","parent":null,"children":[{"krate":0,"index":1540},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547},{"krate":0,"index":1548},{"krate":0,"index":1549},{"krate":0,"index":11461},{"krate":0,"index":11466},{"krate":0,"index":11471},{"krate":0,"index":11476},{"krate":0,"index":11481},{"krate":0,"index":11486},{"krate":0,"index":11491},{"krate":0,"index":11496},{"krate":0,"index":11501},{"krate":0,"index":11506},{"krate":0,"index":11511},{"krate":0,"index":11516},{"krate":0,"index":11521},{"krate":0,"index":11526},{"krate":0,"index":1550},{"krate":0,"index":1555},{"krate":0,"index":1560},{"krate":0,"index":1568},{"krate":0,"index":1574},{"krate":0,"index":11535},{"krate":0,"index":11548},{"krate":0,"index":11561},{"krate":0,"index":11574},{"krate":0,"index":11587},{"krate":0,"index":11600},{"krate":0,"index":11613},{"krate":0,"index":11626},{"krate":0,"index":11639},{"krate":0,"index":11652},{"krate":0,"index":11665},{"krate":0,"index":11678},{"krate":0,"index":11691},{"krate":0,"index":11704},{"krate":0,"index":11717},{"krate":0,"index":11730},{"krate":0,"index":11743},{"krate":0,"index":11756},{"krate":0,"index":11769},{"krate":0,"index":11782},{"krate":0,"index":11795},{"krate":0,"index":11808},{"krate":0,"index":11821},{"krate":0,"index":11834},{"krate":0,"index":11847},{"krate":0,"index":11860},{"krate":0,"index":11873},{"krate":0,"index":11886},{"krate":0,"index":11899},{"krate":0,"index":11912},{"krate":0,"index":11925},{"krate":0,"index":11938},{"krate":0,"index":11951},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":12024},{"krate":0,"index":12031},{"krate":0,"index":12039},{"krate":0,"index":12048},{"krate":0,"index":12058},{"krate":0,"index":12069},{"krate":0,"index":12081},{"krate":0,"index":12094},{"krate":0,"index":12108},{"krate":0,"index":12123},{"krate":0,"index":12139},{"krate":0,"index":12156},{"krate":0,"index":12174},{"krate":0,"index":12193},{"krate":0,"index":12213},{"krate":0,"index":12234},{"krate":0,"index":1600},{"krate":0,"index":1603},{"krate":0,"index":1607},{"krate":0,"index":1614},{"krate":0,"index":1621},{"krate":0,"index":1627},{"krate":0,"index":1633},{"krate":0,"index":1639},{"krate":0,"index":1646},{"krate":0,"index":1655},{"krate":0,"index":1661},{"krate":0,"index":1666},{"krate":0,"index":1671},{"krate":0,"index":1676},{"krate":0,"index":1683},{"krate":0,"index":1688},{"krate":0,"index":1693},{"krate":0,"index":1700}],"decl_id":null,"docs":" Implementations for all of Rust's builtin types. Tuples implement the `Serialize` trait if they\n have at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\n You can always forward array serialization to slice serialization, which works for any length.\n Long tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\n that case the number of fields is irrelevant.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","byte_start":147320,"byte_end":147330,"line_start":77,"line_end":77,"column_start":14,"column_end":24},"name":"impl_visit","qualname":"impl_visit::5821204903659922430","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","byte_start":149910,"byte_end":149921,"line_start":171,"line_end":171,"column_start":14,"column_end":25},"name":"array_impls","qualname":"array_impls::5095452647585378796","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","byte_start":151124,"byte_end":151137,"line_start":224,"line_end":224,"column_start":14,"column_end":27},"name":"serialize_seq","qualname":"serialize_seq::8419995664464591791","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","byte_start":153499,"byte_end":153510,"line_start":316,"line_end":316,"column_start":14,"column_end":25},"name":"tuple_impls","qualname":"tuple_impls::9100484186272699170","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/impls.rs","byte_start":157631,"byte_end":157644,"line_start":514,"line_end":514,"column_start":14,"column_end":27},"name":"serialize_map","qualname":"serialize_map::15237456161891048805","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":1705},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":129200,"byte_end":129205,"line_start":27,"line_end":27,"column_start":11,"column_end":16},"name":"Error","qualname":"::ser::Error","value":"Error:  Sized + error::Error","parent":null,"children":[{"krate":0,"index":1706},{"krate":0,"index":1709}],"decl_id":null,"docs":" `Error` is a trait that allows a `Serialize` to generically create a\n `Serializer` error.\n"},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":129365,"byte_end":129371,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"custom","qualname":"::ser::Error::custom","value":"fn <T> (msg: T) -> Self","parent":{"krate":0,"index":1705},"children":[],"decl_id":null,"docs":" Raised when there is a general error when serializing a type.\n"},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":129672,"byte_end":129685,"line_start":37,"line_end":37,"column_start":8,"column_end":21},"name":"invalid_value","qualname":"::ser::Error::invalid_value","value":"fn (msg: &str) -> Self","parent":{"krate":0,"index":1705},"children":[],"decl_id":null,"docs":" Raised when a `Serialize` was passed an incorrect value.\n"},{"kind":"Trait","id":{"krate":0,"index":1711},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":129940,"byte_end":129949,"line_start":45,"line_end":45,"column_start":11,"column_end":20},"name":"Serialize","qualname":"::ser::Serialize","value":"Serialize","parent":null,"children":[{"krate":0,"index":1712}],"decl_id":null,"docs":" A trait that describes a type that can be serialized by a `Serializer`.\n"},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":130011,"byte_end":130020,"line_start":47,"line_end":47,"column_start":8,"column_end":17},"name":"serialize","qualname":"::ser::Serialize::serialize","value":"fn <S> (&self, serializer: &mut S) -> Result<(), S::Error>","parent":{"krate":0,"index":1711},"children":[],"decl_id":null,"docs":" Serializes this value into this serializer.\n"},{"kind":"Trait","id":{"krate":0,"index":1716},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":131849,"byte_end":131859,"line_start":74,"line_end":74,"column_start":11,"column_end":21},"name":"Serializer","qualname":"::ser::Serializer","value":"Serializer","parent":null,"children":[{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1719},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1728},{"krate":0,"index":1731},{"krate":0,"index":1734},{"krate":0,"index":1737},{"krate":0,"index":1740},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749},{"krate":0,"index":1752},{"krate":0,"index":1755},{"krate":0,"index":1758},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1767},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1778},{"krate":0,"index":1783},{"krate":0,"index":1788},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1801},{"krate":0,"index":1804},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":1818},{"krate":0,"index":1823},{"krate":0,"index":1826},{"krate":0,"index":1830},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1844},{"krate":0,"index":1849},{"krate":0,"index":1852},{"krate":0,"index":1855},{"krate":0,"index":1860},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1872},{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1887},{"krate":0,"index":1893}],"decl_id":null,"docs":" A trait that describes a type that can serialize a stream of values into the underlying format.\n\n # For `Serialize` Developers\n Non-aggrergate types like integers and strings can be serialized directly by calling the\n appropriate function. For Aggregate types there's an initial `serialize_T` method that yields\n a State object that you should not interact with. For each part of the aggregate there's a\n `serialize_T_elt` method that allows you to pass values or key/value pairs. The types of the\n values or the keys may change between calls, but the serialization format may not necessarily\n accept it. The `serialize_T_elt` method also takes a mutable reference to the state object.\n Make sure that you always use the same state object and only the state object that was returned\n by the `serialize_T` method. Finally, when your object is done, call the `serialize_T_end`\n method and pass the state object by value\n\n # For Serialization Format Developers\n If your format has different situations where it accepts different types, create a\n `Serializer` for each situation. You can create the sub-`Serializer` in one of the aggregate\n `serialize_T` methods and return it as a state object. Remember to also set the corresponding\n associated type `TState`. In the `serialize_T_elt` methods you will be given a mutable\n reference to that state. You do not need to do any additional checks for the correctness of the\n state object, as it is expected that the user will not modify it. Due to the generic nature\n of the `Serialize` impls, modifying the object is impossible on stable Rust.\n"},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":133553,"byte_end":133567,"line_start":108,"line_end":108,"column_start":8,"column_end":22},"name":"serialize_bool","qualname":"::ser::Serializer::serialize_bool","value":"fn (&mut self, v: bool) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `bool` value.\n"},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":133837,"byte_end":133852,"line_start":113,"line_end":113,"column_start":8,"column_end":23},"name":"serialize_isize","qualname":"::ser::Serializer::serialize_isize","value":"fn (&mut self, v: isize) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `isize` value. If the format does not differentiate\n between `isize` and `i64`, a reasonable implementation would be to cast\n the value to `i64` and forward to `serialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1731},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":134117,"byte_end":134129,"line_start":118,"line_end":118,"column_start":8,"column_end":20},"name":"serialize_i8","qualname":"::ser::Serializer::serialize_i8","value":"fn (&mut self, v: i8) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `i8` value. If the format does not differentiate between\n `i8` and `i64`, a reasonable implementation would be to cast the value\n to `i64` and forward to `serialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":134393,"byte_end":134406,"line_start":123,"line_end":123,"column_start":8,"column_end":21},"name":"serialize_i16","qualname":"::ser::Serializer::serialize_i16","value":"fn (&mut self, v: i16) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `i16` value. If the format does not differentiate between\n `i16` and `i64`, a reasonable implementation would be to cast the value\n to `i64` and forward to `serialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":134671,"byte_end":134684,"line_start":128,"line_end":128,"column_start":8,"column_end":21},"name":"serialize_i32","qualname":"::ser::Serializer::serialize_i32","value":"fn (&mut self, v: i32) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `i32` value. If the format does not differentiate between\n `i32` and `i64`, a reasonable implementation would be to cast the value\n to `i64` and forward to `serialize_i64`.\n"},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":134775,"byte_end":134788,"line_start":131,"line_end":131,"column_start":8,"column_end":21},"name":"serialize_i64","qualname":"::ser::Serializer::serialize_i64","value":"fn (&mut self, v: i64) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `i64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":135056,"byte_end":135071,"line_start":136,"line_end":136,"column_start":8,"column_end":23},"name":"serialize_usize","qualname":"::ser::Serializer::serialize_usize","value":"fn (&mut self, v: usize) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `usize` value. If the format does not differentiate between\n `usize` and `u64`, a reasonable implementation would be to cast the\n value to `u64` and forward to `serialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":135335,"byte_end":135347,"line_start":141,"line_end":141,"column_start":8,"column_end":20},"name":"serialize_u8","qualname":"::ser::Serializer::serialize_u8","value":"fn (&mut self, v: u8) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `u8` value. If the format does not differentiate between\n `u8` and `u64`, a reasonable implementation would be to cast the value\n to `u64` and forward to `serialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1749},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":135610,"byte_end":135623,"line_start":146,"line_end":146,"column_start":8,"column_end":21},"name":"serialize_u16","qualname":"::ser::Serializer::serialize_u16","value":"fn (&mut self, v: u16) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `u16` value. If the format does not differentiate between\n `u16` and `u64`, a reasonable implementation would be to cast the value\n to `u64` and forward to `serialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1752},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":135887,"byte_end":135900,"line_start":151,"line_end":151,"column_start":8,"column_end":21},"name":"serialize_u32","qualname":"::ser::Serializer::serialize_u32","value":"fn (&mut self, v: u32) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `u32` value. If the format does not differentiate between\n `u32` and `u64`, a reasonable implementation would be to cast the value\n to `u64` and forward to `serialize_u64`.\n"},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":135991,"byte_end":136004,"line_start":154,"line_end":154,"column_start":8,"column_end":21},"name":"serialize_u64","qualname":"::ser::Serializer::serialize_u64","value":"fn (&mut self, v: u64) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" `Serializes a `u64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1758},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":136269,"byte_end":136282,"line_start":159,"line_end":159,"column_start":8,"column_end":21},"name":"serialize_f32","qualname":"::ser::Serializer::serialize_f32","value":"fn (&mut self, v: f32) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `f32` value. If the format does not differentiate between\n `f32` and `f64`, a reasonable implementation would be to cast the value\n to `f64` and forward to `serialize_f64`.\n"},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":136373,"byte_end":136386,"line_start":162,"line_end":162,"column_start":8,"column_end":21},"name":"serialize_f64","qualname":"::ser::Serializer::serialize_f64","value":"fn (&mut self, v: f64) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes an `f64` value.\n"},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":136596,"byte_end":136610,"line_start":166,"line_end":166,"column_start":8,"column_end":22},"name":"serialize_char","qualname":"::ser::Serializer::serialize_char","value":"fn (&mut self, v: char) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a character. If the format does not support characters,\n it is reasonable to serialize it as a single element `str` or a `u32`.\n"},{"kind":"Method","id":{"krate":0,"index":1767},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":136696,"byte_end":136709,"line_start":169,"line_end":169,"column_start":8,"column_end":21},"name":"serialize_str","qualname":"::ser::Serializer::serialize_str","value":"fn (&mut self, value: &str) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `&str`.\n"},{"kind":"Method","id":{"krate":0,"index":1770},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":137301,"byte_end":137316,"line_start":182,"line_end":182,"column_start":8,"column_end":23},"name":"serialize_bytes","qualname":"::ser::Serializer::serialize_bytes","value":"fn (&mut self, value: &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Enables serializers to serialize byte slices more compactly or more\n efficiently than other types of slices. If no efficient implementation\n is available, a reasonable implementation would be to forward to\n `serialize_seq`. If forwarded, the implementation looks usually just like this:\n ```rust\n let mut state = try!(self.serialize_seq(value));\n for b in value {\n     try!(self.serialize_seq_elt(&mut state, b));\n }\n self.serialize_seq_end(state)\n ```\n"},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":137459,"byte_end":137473,"line_start":185,"line_end":185,"column_start":8,"column_end":22},"name":"serialize_unit","qualname":"::ser::Serializer::serialize_unit","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `()` value. It's reasonable to just not serialize anything.\n"},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":137638,"byte_end":137659,"line_start":189,"line_end":189,"column_start":8,"column_end":29},"name":"serialize_unit_struct","qualname":"::ser::Serializer::serialize_unit_struct","value":"fn (&mut self, name: &'static str) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a unit struct value. A reasonable implementation would be to\n forward to `serialize_unit`.\n"},{"kind":"Method","id":{"krate":0,"index":1778},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":137918,"byte_end":137940,"line_start":197,"line_end":197,"column_start":8,"column_end":30},"name":"serialize_unit_variant","qualname":"::ser::Serializer::serialize_unit_variant","value":"fn (&mut self, name: &'static str, variant_index: usize, variant: &'static str) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a unit variant, otherwise known as a variant with no\n arguments. A reasonable implementation would be to forward to\n `serialize_unit`.\n"},{"kind":"Method","id":{"krate":0,"index":1783},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":138407,"byte_end":138431,"line_start":208,"line_end":208,"column_start":8,"column_end":32},"name":"serialize_newtype_struct","qualname":"::ser::Serializer::serialize_newtype_struct","value":"fn <T> (&mut self, name: &'static str, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Allows a tuple struct with a single element, also known as a newtype\n struct, to be more efficiently serialized than a tuple struct with\n multiple items. A reasonable implementation would be to forward to\n `serialize_tuple_struct` or to just serialize the inner value without wrapping.\n"},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":138762,"byte_end":138787,"line_start":217,"line_end":217,"column_start":8,"column_end":33},"name":"serialize_newtype_variant","qualname":"::ser::Serializer::serialize_newtype_variant","value":"fn <T> (&mut self, name: &'static str, variant_index: usize, variant: &'static str, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Allows a variant with a single item to be more efficiently serialized\n than a variant with multiple items. A reasonable implementation would be\n to forward to `serialize_tuple_variant`.\n"},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":139006,"byte_end":139020,"line_start":226,"line_end":226,"column_start":8,"column_end":22},"name":"serialize_none","qualname":"::ser::Serializer::serialize_none","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `None` value.\n"},{"kind":"Method","id":{"krate":0,"index":1797},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":139108,"byte_end":139122,"line_start":229,"line_end":229,"column_start":8,"column_end":22},"name":"serialize_some","qualname":"::ser::Serializer::serialize_some","value":"fn <T> (&mut self, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a `Some(...)` value.\n"},{"kind":"Method","id":{"krate":0,"index":1801},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":139374,"byte_end":139387,"line_start":236,"line_end":236,"column_start":8,"column_end":21},"name":"serialize_seq","qualname":"::ser::Serializer::serialize_seq","value":"fn (&mut self, len: Option<usize>) -> Result<Self::SeqState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a sequence. This call must be followed by zero or\n more calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.\n"},{"kind":"Method","id":{"krate":0,"index":1804},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":139582,"byte_end":139599,"line_start":243,"line_end":243,"column_start":8,"column_end":25},"name":"serialize_seq_elt","qualname":"::ser::Serializer::serialize_seq_elt","value":"fn <T> (&mut self, state: &mut Self::SeqState, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a sequence element. Must have previously called\n `serialize_seq`.\n"},{"kind":"Method","id":{"krate":0,"index":1809},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":139771,"byte_end":139788,"line_start":250,"line_end":250,"column_start":8,"column_end":25},"name":"serialize_seq_end","qualname":"::ser::Serializer::serialize_seq_end","value":"fn (&mut self, state: Self::SeqState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a sequence.\n"},{"kind":"Method","id":{"krate":0,"index":1812},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":140174,"byte_end":140198,"line_start":259,"line_end":259,"column_start":8,"column_end":32},"name":"serialize_seq_fixed_size","qualname":"::ser::Serializer::serialize_seq_fixed_size","value":"fn (&mut self, size: usize) -> Result<Self::SeqState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a sequence whose length will be known at\n deserialization time. This call must be followed by zero or more calls\n to `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\n implementation would be to forward to `serialize_seq`.\n"},{"kind":"Method","id":{"krate":0,"index":1815},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":140528,"byte_end":140543,"line_start":267,"line_end":267,"column_start":8,"column_end":23},"name":"serialize_tuple","qualname":"::ser::Serializer::serialize_tuple","value":"fn (&mut self, len: usize) -> Result<Self::TupleState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a tuple. This call must be followed by zero or more\n calls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\n reasonable implementation would be to forward to `serialize_seq`.\n"},{"kind":"Method","id":{"krate":0,"index":1818},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":140731,"byte_end":140750,"line_start":274,"line_end":274,"column_start":8,"column_end":27},"name":"serialize_tuple_elt","qualname":"::ser::Serializer::serialize_tuple_elt","value":"fn <T> (&mut self, state: &mut Self::TupleState, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a tuple element. Must have previously called\n `serialize_tuple`.\n"},{"kind":"Method","id":{"krate":0,"index":1823},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":140921,"byte_end":140940,"line_start":281,"line_end":281,"column_start":8,"column_end":27},"name":"serialize_tuple_end","qualname":"::ser::Serializer::serialize_tuple_end","value":"fn (&mut self, state: Self::TupleState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a tuple.\n"},{"kind":"Method","id":{"krate":0,"index":1826},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":141301,"byte_end":141323,"line_start":290,"line_end":290,"column_start":8,"column_end":30},"name":"serialize_tuple_struct","qualname":"::ser::Serializer::serialize_tuple_struct","value":"fn (&mut self, name: &'static str, len: usize) -> Result<Self::TupleStructState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a tuple struct. This call must be followed by zero\n or more calls to `serialize_tuple_struct_elt`, then a call to\n `serialize_tuple_struct_end`. A reasonable implementation would be to\n forward to `serialize_tuple`.\n"},{"kind":"Method","id":{"krate":0,"index":1830},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":141559,"byte_end":141585,"line_start":298,"line_end":298,"column_start":8,"column_end":34},"name":"serialize_tuple_struct_elt","qualname":"::ser::Serializer::serialize_tuple_struct_elt","value":"fn <T> (&mut self, state: &mut Self::TupleStructState, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a tuple struct element. Must have previously called\n `serialize_tuple_struct`.\n"},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":141769,"byte_end":141795,"line_start":305,"line_end":305,"column_start":8,"column_end":34},"name":"serialize_tuple_struct_end","qualname":"::ser::Serializer::serialize_tuple_struct_end","value":"fn (&mut self, state: Self::TupleStructState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a tuple struct.\n"},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":142172,"byte_end":142195,"line_start":314,"line_end":314,"column_start":8,"column_end":31},"name":"serialize_tuple_variant","qualname":"::ser::Serializer::serialize_tuple_variant","value":"fn (&mut self, name: &'static str, variant_index: usize, variant: &'static str, len: usize) -> Result<Self::TupleVariantState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a tuple variant. This call must be followed by zero\n or more calls to `serialize_tuple_variant_elt`, then a call to\n `serialize_tuple_variant_end`. A reasonable implementation would be to\n forward to `serialize_tuple_struct`.\n"},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":142495,"byte_end":142522,"line_start":324,"line_end":324,"column_start":8,"column_end":35},"name":"serialize_tuple_variant_elt","qualname":"::ser::Serializer::serialize_tuple_variant_elt","value":"fn <T> (&mut self, state: &mut Self::TupleVariantState, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a tuple variant element. Must have previously called\n `serialize_tuple_variant`.\n"},{"kind":"Method","id":{"krate":0,"index":1849},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":142708,"byte_end":142735,"line_start":331,"line_end":331,"column_start":8,"column_end":35},"name":"serialize_tuple_variant_end","qualname":"::ser::Serializer::serialize_tuple_variant_end","value":"fn (&mut self, state: Self::TupleVariantState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a tuple variant.\n"},{"kind":"Method","id":{"krate":0,"index":1852},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":143024,"byte_end":143037,"line_start":339,"line_end":339,"column_start":8,"column_end":21},"name":"serialize_map","qualname":"::ser::Serializer::serialize_map","value":"fn (&mut self, len: Option<usize>) -> Result<Self::MapState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a map. This call must be followed by zero or more\n calls to `serialize_map_key` and `serialize_map_value`, then a call to\n `serialize_map_end`.\n"},{"kind":"Method","id":{"krate":0,"index":1855},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":143214,"byte_end":143231,"line_start":345,"line_end":345,"column_start":8,"column_end":25},"name":"serialize_map_key","qualname":"::ser::Serializer::serialize_map_key","value":"fn <T> (&mut self, state: &mut Self::MapState, key: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serialize a map key. Must have previously called `serialize_map`.\n"},{"kind":"Method","id":{"krate":0,"index":1860},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":143435,"byte_end":143454,"line_start":352,"line_end":352,"column_start":8,"column_end":27},"name":"serialize_map_value","qualname":"::ser::Serializer::serialize_map_value","value":"fn <T> (&mut self, state: &mut Self::MapState, value: T) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serialize a map value. Must have previously called `serialize_map`.\n"},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":143620,"byte_end":143637,"line_start":359,"line_end":359,"column_start":8,"column_end":25},"name":"serialize_map_end","qualname":"::ser::Serializer::serialize_map_end","value":"fn (&mut self, state: Self::MapState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a map.\n"},{"kind":"Method","id":{"krate":0,"index":1868},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":143892,"byte_end":143908,"line_start":366,"line_end":366,"column_start":8,"column_end":24},"name":"serialize_struct","qualname":"::ser::Serializer::serialize_struct","value":"fn (&mut self, name: &'static str, len: usize) -> Result<Self::StructState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a struct. This call must be followed by zero or more\n calls to `serialize_struct_elt`, then a call to `serialize_struct_end`.\n"},{"kind":"Method","id":{"krate":0,"index":1872},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":144125,"byte_end":144145,"line_start":374,"line_end":374,"column_start":8,"column_end":28},"name":"serialize_struct_elt","qualname":"::ser::Serializer::serialize_struct_elt","value":"fn <V> (&mut self, state: &mut Self::StructState, key: &'static str, value: V) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serializes a struct field. Must have previously called\n `serialize_struct`.\n"},{"kind":"Method","id":{"krate":0,"index":1878},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":144345,"byte_end":144365,"line_start":382,"line_end":382,"column_start":8,"column_end":28},"name":"serialize_struct_end","qualname":"::ser::Serializer::serialize_struct_end","value":"fn (&mut self, state: Self::StructState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a struct.\n"},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":144655,"byte_end":144679,"line_start":390,"line_end":390,"column_start":8,"column_end":32},"name":"serialize_struct_variant","qualname":"::ser::Serializer::serialize_struct_variant","value":"fn (&mut self, name: &'static str, variant_index: usize, variant: &'static str, len: usize) -> Result<Self::StructVariantState, Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Begins to serialize a struct variant. This call must be followed by zero\n or more calls to `serialize_struct_variant_elt`, then a call to\n `serialize_struct_variant_end`.\n"},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":144981,"byte_end":145009,"line_start":400,"line_end":400,"column_start":8,"column_end":36},"name":"serialize_struct_variant_elt","qualname":"::ser::Serializer::serialize_struct_variant_elt","value":"fn <V> (&mut self, state: &mut Self::StructVariantState, key: &'static str, value: V) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Serialize a struct variant element. Must have previously called\n `serialize_struct_variant`.\n"},{"kind":"Method","id":{"krate":0,"index":1893},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/ser/mod.rs","byte_start":145224,"byte_end":145252,"line_start":408,"line_end":408,"column_start":8,"column_end":36},"name":"serialize_struct_variant_end","qualname":"::ser::Serializer::serialize_struct_variant_end","value":"fn (&mut self, state: Self::StructVariantState) -> Result<(), Self::Error>","parent":{"krate":0,"index":1716},"children":[],"decl_id":null,"docs":" Finishes serializing a struct variant.\n"},{"kind":"Function","id":{"krate":0,"index":1904},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/utils.rs","byte_start":164038,"byte_end":164049,"line_start":12,"line_end":12,"column_start":8,"column_end":19},"name":"encode_utf8","qualname":"::utils::encode_utf8","value":"fn (c: char) -> EncodeUtf8","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1910},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/utils.rs","byte_start":164853,"byte_end":164863,"line_start":37,"line_end":37,"column_start":12,"column_end":22},"name":"EncodeUtf8","qualname":"::utils::EncodeUtf8","value":"EncodeUtf8 { buf, pos }","parent":null,"children":[{"krate":0,"index":1911},{"krate":0,"index":1912}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1915},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/utils.rs","byte_start":165008,"byte_end":165014,"line_start":44,"line_end":44,"column_start":12,"column_end":18},"name":"as_str","qualname":"<EncodeUtf8>::as_str","value":"fn (&self) -> &str","parent":{"krate":0,"index":1910},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1925},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde-0.8.17/src/utils.rs","byte_start":165670,"byte_end":165689,"line_start":70,"line_end":70,"column_start":8,"column_end":27},"name":"Pattern_White_Space","qualname":"::utils::Pattern_White_Space","value":"fn (c: char) -> bool","parent":null,"children":[],"decl_id":null,"docs":""}],"refs":[],"macro_refs":[]}