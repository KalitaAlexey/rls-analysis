{"kind":"JsonApi","prelude":{"crate_name":"rustc_serialize","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs","byte_start":472,"byte_end":2076,"line_start":11,"line_end":69,"column_start":1,"column_end":1}},"imports":[{"kind":"GlobUse","id":{"krate":0,"index":799},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37391,"byte_end":37392,"line_start":15,"line_end":15,"column_start":32,"column_end":33},"name":"*","value":"InvalidBase64Length, InvalidBase64Byte"},{"kind":"GlobUse","id":{"krate":0,"index":800},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37422,"byte_end":37423,"line_start":16,"line_end":16,"column_start":29,"column_end":30},"name":"*","value":"UrlSafe, Standard"},{"kind":"GlobUse","id":{"krate":0,"index":889},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":54031,"byte_end":54032,"line_start":15,"line_end":15,"column_start":29,"column_end":30},"name":"*","value":"InvalidHexLength, InvalidHexCharacter"},{"kind":"GlobUse","id":{"krate":0,"index":1901},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs","byte_start":2073,"byte_end":2074,"line_start":68,"line_end":68,"column_start":24,"column_end":25},"name":"*","value":""}],"defs":[{"kind":"Trait","id":{"krate":0,"index":21},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":2838,"byte_end":2845,"line_start":27,"line_end":27,"column_start":11,"column_end":18},"name":"Encoder","qualname":"::serialize::Encoder","value":"Encoder","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":75},{"krate":0,"index":82},{"krate":0,"index":87},{"krate":0,"index":94},{"krate":0,"index":100},{"krate":0,"index":106},{"krate":0,"index":112},{"krate":0,"index":117},{"krate":0,"index":122},{"krate":0,"index":128},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":148},{"krate":0,"index":153},{"krate":0,"index":158},{"krate":0,"index":163}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":2896,"byte_end":2904,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"emit_nil","qualname":"::serialize::Encoder::emit_nil","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":2951,"byte_end":2961,"line_start":32,"line_end":32,"column_start":8,"column_end":18},"name":"emit_usize","qualname":"::serialize::Encoder::emit_usize","value":"fn (&mut self, v: usize) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3018,"byte_end":3026,"line_start":33,"line_end":33,"column_start":8,"column_end":16},"name":"emit_u64","qualname":"::serialize::Encoder::emit_u64","value":"fn (&mut self, v: u64) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3081,"byte_end":3089,"line_start":34,"line_end":34,"column_start":8,"column_end":16},"name":"emit_u32","qualname":"::serialize::Encoder::emit_u32","value":"fn (&mut self, v: u32) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3144,"byte_end":3152,"line_start":35,"line_end":35,"column_start":8,"column_end":16},"name":"emit_u16","qualname":"::serialize::Encoder::emit_u16","value":"fn (&mut self, v: u16) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":37},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3207,"byte_end":3214,"line_start":36,"line_end":36,"column_start":8,"column_end":15},"name":"emit_u8","qualname":"::serialize::Encoder::emit_u8","value":"fn (&mut self, v: u8) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3268,"byte_end":3278,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"emit_isize","qualname":"::serialize::Encoder::emit_isize","value":"fn (&mut self, v: isize) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3335,"byte_end":3343,"line_start":38,"line_end":38,"column_start":8,"column_end":16},"name":"emit_i64","qualname":"::serialize::Encoder::emit_i64","value":"fn (&mut self, v: i64) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3398,"byte_end":3406,"line_start":39,"line_end":39,"column_start":8,"column_end":16},"name":"emit_i32","qualname":"::serialize::Encoder::emit_i32","value":"fn (&mut self, v: i32) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3461,"byte_end":3469,"line_start":40,"line_end":40,"column_start":8,"column_end":16},"name":"emit_i16","qualname":"::serialize::Encoder::emit_i16","value":"fn (&mut self, v: i16) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3524,"byte_end":3531,"line_start":41,"line_end":41,"column_start":8,"column_end":15},"name":"emit_i8","qualname":"::serialize::Encoder::emit_i8","value":"fn (&mut self, v: i8) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3585,"byte_end":3594,"line_start":42,"line_end":42,"column_start":8,"column_end":17},"name":"emit_bool","qualname":"::serialize::Encoder::emit_bool","value":"fn (&mut self, v: bool) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3650,"byte_end":3658,"line_start":43,"line_end":43,"column_start":8,"column_end":16},"name":"emit_f64","qualname":"::serialize::Encoder::emit_f64","value":"fn (&mut self, v: f64) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3713,"byte_end":3721,"line_start":44,"line_end":44,"column_start":8,"column_end":16},"name":"emit_f32","qualname":"::serialize::Encoder::emit_f32","value":"fn (&mut self, v: f32) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3776,"byte_end":3785,"line_start":45,"line_end":45,"column_start":8,"column_end":17},"name":"emit_char","qualname":"::serialize::Encoder::emit_char","value":"fn (&mut self, v: char) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3841,"byte_end":3849,"line_start":46,"line_end":46,"column_start":8,"column_end":16},"name":"emit_str","qualname":"::serialize::Encoder::emit_str","value":"fn (&mut self, v: &str) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":3929,"byte_end":3938,"line_start":49,"line_end":49,"column_start":8,"column_end":17},"name":"emit_enum","qualname":"::serialize::Encoder::emit_enum","value":"fn <F> (&mut self, name: &str, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":4069,"byte_end":4086,"line_start":52,"line_end":52,"column_start":8,"column_end":25},"name":"emit_enum_variant","qualname":"::serialize::Encoder::emit_enum_variant","value":"fn <F> (&mut self, v_name: &str, v_id: usize, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":4327,"byte_end":4348,"line_start":57,"line_end":57,"column_start":8,"column_end":29},"name":"emit_enum_variant_arg","qualname":"::serialize::Encoder::emit_enum_variant_arg","value":"fn <F> (&mut self, a_idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":4513,"byte_end":4537,"line_start":61,"line_end":61,"column_start":8,"column_end":32},"name":"emit_enum_struct_variant","qualname":"::serialize::Encoder::emit_enum_struct_variant","value":"fn <F> (&mut self, v_name: &str, v_id: usize, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":4799,"byte_end":4829,"line_start":66,"line_end":66,"column_start":8,"column_end":38},"name":"emit_enum_struct_variant_field","qualname":"::serialize::Encoder::emit_enum_struct_variant_field","value":"fn <F> (&mut self, f_name: &str, f_idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5099,"byte_end":5110,"line_start":72,"line_end":72,"column_start":8,"column_end":19},"name":"emit_struct","qualname":"::serialize::Encoder::emit_struct","value":"fn <F> (&mut self, name: &str, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5274,"byte_end":5291,"line_start":75,"line_end":75,"column_start":8,"column_end":25},"name":"emit_struct_field","qualname":"::serialize::Encoder::emit_struct_field","value":"fn <F> (&mut self, f_name: &str, f_idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5466,"byte_end":5476,"line_start":79,"line_end":79,"column_start":8,"column_end":18},"name":"emit_tuple","qualname":"::serialize::Encoder::emit_tuple","value":"fn <F> (&mut self, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5606,"byte_end":5620,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"emit_tuple_arg","qualname":"::serialize::Encoder::emit_tuple_arg","value":"fn <F> (&mut self, idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5751,"byte_end":5768,"line_start":84,"line_end":84,"column_start":8,"column_end":25},"name":"emit_tuple_struct","qualname":"::serialize::Encoder::emit_tuple_struct","value":"fn <F> (&mut self, name: &str, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":5938,"byte_end":5959,"line_start":87,"line_end":87,"column_start":8,"column_end":29},"name":"emit_tuple_struct_arg","qualname":"::serialize::Encoder::emit_tuple_struct_arg","value":"fn <F> (&mut self, f_idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6150,"byte_end":6161,"line_start":92,"line_end":92,"column_start":8,"column_end":19},"name":"emit_option","qualname":"::serialize::Encoder::emit_option","value":"fn <F> (&mut self, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6279,"byte_end":6295,"line_start":94,"line_end":94,"column_start":8,"column_end":24},"name":"emit_option_none","qualname":"::serialize::Encoder::emit_option_none","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6342,"byte_end":6358,"line_start":95,"line_end":95,"column_start":8,"column_end":24},"name":"emit_option_some","qualname":"::serialize::Encoder::emit_option_some","value":"fn <F> (&mut self, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6477,"byte_end":6485,"line_start":98,"line_end":98,"column_start":8,"column_end":16},"name":"emit_seq","qualname":"::serialize::Encoder::emit_seq","value":"fn <F> (&mut self, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6615,"byte_end":6627,"line_start":100,"line_end":100,"column_start":8,"column_end":20},"name":"emit_seq_elt","qualname":"::serialize::Encoder::emit_seq_elt","value":"fn <F> (&mut self, idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6758,"byte_end":6766,"line_start":103,"line_end":103,"column_start":8,"column_end":16},"name":"emit_map","qualname":"::serialize::Encoder::emit_map","value":"fn <F> (&mut self, len: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":6896,"byte_end":6912,"line_start":105,"line_end":105,"column_start":8,"column_end":24},"name":"emit_map_elt_key","qualname":"::serialize::Encoder::emit_map_elt_key","value":"fn <F> (&mut self, idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7042,"byte_end":7058,"line_start":107,"line_end":107,"column_start":8,"column_end":24},"name":"emit_map_elt_val","qualname":"::serialize::Encoder::emit_map_elt_val","value":"fn <F> (&mut self, idx: usize, f: F) -> Result<(), Self::Error>","parent":{"krate":0,"index":21},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7194,"byte_end":7201,"line_start":111,"line_end":111,"column_start":11,"column_end":18},"name":"Decoder","qualname":"::serialize::Decoder","value":"Decoder","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":208},{"krate":0,"index":214},{"krate":0,"index":220},{"krate":0,"index":226},{"krate":0,"index":233},{"krate":0,"index":240},{"krate":0,"index":247},{"krate":0,"index":253},{"krate":0,"index":259},{"krate":0,"index":266},{"krate":0,"index":272},{"krate":0,"index":277},{"krate":0,"index":282},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":305}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7252,"byte_end":7260,"line_start":115,"line_end":115,"column_start":8,"column_end":16},"name":"read_nil","qualname":"::serialize::Decoder::read_nil","value":"fn (&mut self) -> Result<(), Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7307,"byte_end":7317,"line_start":116,"line_end":116,"column_start":8,"column_end":18},"name":"read_usize","qualname":"::serialize::Decoder::read_usize","value":"fn (&mut self) -> Result<usize, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7367,"byte_end":7375,"line_start":117,"line_end":117,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::serialize::Decoder::read_u64","value":"fn (&mut self) -> Result<u64, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7423,"byte_end":7431,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::serialize::Decoder::read_u32","value":"fn (&mut self) -> Result<u32, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7479,"byte_end":7487,"line_start":119,"line_end":119,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::serialize::Decoder::read_u16","value":"fn (&mut self) -> Result<u16, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7535,"byte_end":7542,"line_start":120,"line_end":120,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::serialize::Decoder::read_u8","value":"fn (&mut self) -> Result<u8, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7589,"byte_end":7599,"line_start":121,"line_end":121,"column_start":8,"column_end":18},"name":"read_isize","qualname":"::serialize::Decoder::read_isize","value":"fn (&mut self) -> Result<isize, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7649,"byte_end":7657,"line_start":122,"line_end":122,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::serialize::Decoder::read_i64","value":"fn (&mut self) -> Result<i64, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7705,"byte_end":7713,"line_start":123,"line_end":123,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::serialize::Decoder::read_i32","value":"fn (&mut self) -> Result<i32, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7761,"byte_end":7769,"line_start":124,"line_end":124,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::serialize::Decoder::read_i16","value":"fn (&mut self) -> Result<i16, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7817,"byte_end":7824,"line_start":125,"line_end":125,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::serialize::Decoder::read_i8","value":"fn (&mut self) -> Result<i8, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7871,"byte_end":7880,"line_start":126,"line_end":126,"column_start":8,"column_end":17},"name":"read_bool","qualname":"::serialize::Decoder::read_bool","value":"fn (&mut self) -> Result<bool, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7929,"byte_end":7937,"line_start":127,"line_end":127,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::serialize::Decoder::read_f64","value":"fn (&mut self) -> Result<f64, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":7985,"byte_end":7993,"line_start":128,"line_end":128,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::serialize::Decoder::read_f32","value":"fn (&mut self) -> Result<f32, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8041,"byte_end":8050,"line_start":129,"line_end":129,"column_start":8,"column_end":17},"name":"read_char","qualname":"::serialize::Decoder::read_char","value":"fn (&mut self) -> Result<char, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8099,"byte_end":8107,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"read_str","qualname":"::serialize::Decoder::read_str","value":"fn (&mut self) -> Result<String, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8182,"byte_end":8191,"line_start":133,"line_end":133,"column_start":8,"column_end":17},"name":"read_enum","qualname":"::serialize::Decoder::read_enum","value":"fn <T, F> (&mut self, name: &str, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8323,"byte_end":8340,"line_start":136,"line_end":136,"column_start":8,"column_end":25},"name":"read_enum_variant","qualname":"::serialize::Decoder::read_enum_variant","value":"fn <T, F> (&mut self, names: &[&str], f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8512,"byte_end":8533,"line_start":139,"line_end":139,"column_start":8,"column_end":29},"name":"read_enum_variant_arg","qualname":"::serialize::Decoder::read_enum_variant_arg","value":"fn <T, F> (&mut self, a_idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8702,"byte_end":8726,"line_start":143,"line_end":143,"column_start":8,"column_end":32},"name":"read_enum_struct_variant","qualname":"::serialize::Decoder::read_enum_struct_variant","value":"fn <T, F> (&mut self, names: &[&str], f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":8905,"byte_end":8935,"line_start":146,"line_end":146,"column_start":8,"column_end":38},"name":"read_enum_struct_variant_field","qualname":"::serialize::Decoder::read_enum_struct_variant_field","value":"fn <T, F> (&mut self, &f_name: &str, f_idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":233},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":9260,"byte_end":9271,"line_start":153,"line_end":153,"column_start":8,"column_end":19},"name":"read_struct","qualname":"::serialize::Decoder::read_struct","value":"fn <T, F> (&mut self, s_name: &str, len: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":9441,"byte_end":9458,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"read_struct_field","qualname":"::serialize::Decoder::read_struct_field","value":"fn <T, F> (&mut self, f_name: &str, f_idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":9730,"byte_end":9740,"line_start":163,"line_end":163,"column_start":8,"column_end":18},"name":"read_tuple","qualname":"::serialize::Decoder::read_tuple","value":"fn <T, F> (&mut self, len: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":253},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":9871,"byte_end":9885,"line_start":165,"line_end":165,"column_start":8,"column_end":22},"name":"read_tuple_arg","qualname":"::serialize::Decoder::read_tuple_arg","value":"fn <T, F> (&mut self, a_idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10047,"byte_end":10064,"line_start":169,"line_end":169,"column_start":8,"column_end":25},"name":"read_tuple_struct","qualname":"::serialize::Decoder::read_tuple_struct","value":"fn <T, F> (&mut self, s_name: &str, len: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10240,"byte_end":10261,"line_start":172,"line_end":172,"column_start":8,"column_end":29},"name":"read_tuple_struct_arg","qualname":"::serialize::Decoder::read_tuple_struct_arg","value":"fn <T, F> (&mut self, a_idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10456,"byte_end":10467,"line_start":177,"line_end":177,"column_start":8,"column_end":19},"name":"read_option","qualname":"::serialize::Decoder::read_option","value":"fn <T, F> (&mut self, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10592,"byte_end":10600,"line_start":180,"line_end":180,"column_start":8,"column_end":16},"name":"read_seq","qualname":"::serialize::Decoder::read_seq","value":"fn <T, F> (&mut self, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10726,"byte_end":10738,"line_start":182,"line_end":182,"column_start":8,"column_end":20},"name":"read_seq_elt","qualname":"::serialize::Decoder::read_seq_elt","value":"fn <T, F> (&mut self, idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":10870,"byte_end":10878,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"read_map","qualname":"::serialize::Decoder::read_map","value":"fn <T, F> (&mut self, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11004,"byte_end":11020,"line_start":187,"line_end":187,"column_start":8,"column_end":24},"name":"read_map_elt_key","qualname":"::serialize::Decoder::read_map_elt_key","value":"fn <T, F> (&mut self, idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11181,"byte_end":11197,"line_start":190,"line_end":190,"column_start":8,"column_end":24},"name":"read_map_elt_val","qualname":"::serialize::Decoder::read_map_elt_val","value":"fn <T, F> (&mut self, idx: usize, f: F) -> Result<T, Self::Error>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11374,"byte_end":11379,"line_start":195,"line_end":195,"column_start":8,"column_end":13},"name":"error","qualname":"::serialize::Decoder::error","value":"fn (&mut self, err: &str) -> Self::Error","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":308},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11431,"byte_end":11440,"line_start":198,"line_end":198,"column_start":11,"column_end":20},"name":"Encodable","qualname":"::serialize::Encodable","value":"Encodable","parent":null,"children":[{"krate":0,"index":309}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11450,"byte_end":11456,"line_start":199,"line_end":199,"column_start":8,"column_end":14},"name":"encode","qualname":"::serialize::Encodable::encode","value":"fn <S> (&self, s: &mut S) -> Result<(), S::Error>","parent":{"krate":0,"index":308},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":313},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11525,"byte_end":11534,"line_start":202,"line_end":202,"column_start":11,"column_end":20},"name":"Decodable","qualname":"::serialize::Decodable","value":"Decodable:  Sized","parent":null,"children":[{"krate":0,"index":314}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":11551,"byte_end":11557,"line_start":203,"line_end":203,"column_start":8,"column_end":14},"name":"decode","qualname":"::serialize::Decodable::decode","value":"fn <D> (d: &mut D) -> Result<Self, D::Error>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":19404,"byte_end":19409,"line_start":539,"line_end":539,"column_start":14,"column_end":19},"name":"tuple","qualname":"tuple::578978278198373587","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":20689,"byte_end":20694,"line_start":574,"line_end":574,"column_start":14,"column_end":19},"name":"array","qualname":"array::6418629227555991519","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":627},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":24379,"byte_end":24393,"line_start":695,"line_end":695,"column_start":11,"column_end":25},"name":"EncoderHelpers","qualname":"::serialize::EncoderHelpers","value":"EncoderHelpers:  Encoder","parent":null,"children":[{"krate":0,"index":628}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":24412,"byte_end":24425,"line_start":696,"line_end":696,"column_start":8,"column_end":21},"name":"emit_from_vec","qualname":"::serialize::EncoderHelpers::emit_from_vec","value":"fn <T, F> (&mut self, v: &[T], f: F) -> Result<(), <Self as Encoder>::Error>","parent":{"krate":0,"index":627},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":646},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":25048,"byte_end":25062,"line_start":716,"line_end":716,"column_start":11,"column_end":25},"name":"DecoderHelpers","qualname":"::serialize::DecoderHelpers","value":"DecoderHelpers:  Decoder","parent":null,"children":[{"krate":0,"index":647}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/serialize.rs","byte_start":25081,"byte_end":25092,"line_start":717,"line_end":717,"column_start":8,"column_end":19},"name":"read_to_vec","qualname":"::serialize::DecoderHelpers::read_to_vec","value":"fn <T, F> (&mut self, f: F) -> Result<Vec<T>, <Self as Decoder>::Error>","parent":{"krate":0,"index":646},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":798},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs","byte_start":1992,"byte_end":1998,"line_start":63,"line_end":63,"column_start":9,"column_end":15},"name":"base64","qualname":"::base64","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","parent":null,"children":[{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":6036},{"krate":0,"index":6039},{"krate":0,"index":6042},{"krate":0,"index":6043},{"krate":0,"index":6049},{"krate":0,"index":6052},{"krate":0,"index":6055},{"krate":0,"index":6056},{"krate":0,"index":6062},{"krate":0,"index":6067},{"krate":0,"index":6070},{"krate":0,"index":6071},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":812},{"krate":0,"index":848},{"krate":0,"index":6081},{"krate":0,"index":6086},{"krate":0,"index":6089},{"krate":0,"index":851},{"krate":0,"index":858},{"krate":0,"index":862},{"krate":0,"index":866},{"krate":0,"index":869},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":887}],"decl_id":null,"docs":" Base64 binary-to-text encoding\n"},{"kind":"Enum","id":{"krate":0,"index":6036},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37534,"byte_end":37546,"line_start":23,"line_end":23,"column_start":10,"column_end":22},"name":"CharacterSet","qualname":"::base64::CharacterSet","value":"CharacterSet::{Standard, UrlSafe}","parent":null,"children":[{"krate":0,"index":6037},{"krate":0,"index":6038}],"decl_id":null,"docs":" Available encoding character sets\n"},{"kind":"Tuple","id":{"krate":0,"index":6037},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37607,"byte_end":37615,"line_start":25,"line_end":25,"column_start":5,"column_end":13},"name":"Standard","qualname":"::base64::CharacterSet::Standard","value":"CharacterSet::Standard","parent":{"krate":0,"index":6036},"children":[],"decl_id":null,"docs":" The standard character set (uses `+` and `/`)\n"},{"kind":"Tuple","id":{"krate":0,"index":6038},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37675,"byte_end":37682,"line_start":27,"line_end":27,"column_start":5,"column_end":12},"name":"UrlSafe","qualname":"::base64::CharacterSet::UrlSafe","value":"CharacterSet::UrlSafe","parent":{"krate":0,"index":6036},"children":[],"decl_id":null,"docs":" The URL safe character set (uses `-` and `_`)\n"},{"kind":"Enum","id":{"krate":0,"index":6049},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37753,"byte_end":37760,"line_start":32,"line_end":32,"column_start":10,"column_end":17},"name":"Newline","qualname":"::base64::Newline","value":"Newline::{LF, CRLF}","parent":null,"children":[{"krate":0,"index":6050},{"krate":0,"index":6051}],"decl_id":null,"docs":" Available newline types\n"},{"kind":"Tuple","id":{"krate":0,"index":6050},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37812,"byte_end":37814,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"LF","qualname":"::base64::Newline::LF","value":"Newline::LF","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":" A linefeed (i.e. Unix-style newline)\n"},{"kind":"Tuple","id":{"krate":0,"index":6051},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37890,"byte_end":37894,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"CRLF","qualname":"::base64::Newline::CRLF","value":"Newline::CRLF","parent":{"krate":0,"index":6049},"children":[],"decl_id":null,"docs":" A carriage return and a linefeed (i.e. Windows-style newline)\n"},{"kind":"Struct","id":{"krate":0,"index":6062},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":37994,"byte_end":38000,"line_start":41,"line_end":41,"column_start":12,"column_end":18},"name":"Config","qualname":"::base64::Config","value":"Config { char_set, newline, pad, line_length }","parent":null,"children":[{"krate":0,"index":6063},{"krate":0,"index":6064},{"krate":0,"index":6065},{"krate":0,"index":6066}],"decl_id":null,"docs":" Contains configuration parameters for `to_base64`.\n"},{"kind":"Field","id":{"krate":0,"index":6063},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38040,"byte_end":38048,"line_start":43,"line_end":43,"column_start":9,"column_end":17},"name":"char_set","qualname":"::base64::Config::char_set","value":"","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" Character set to use\n"},{"kind":"Field","id":{"krate":0,"index":6064},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38095,"byte_end":38102,"line_start":45,"line_end":45,"column_start":9,"column_end":16},"name":"newline","qualname":"::base64::Config::newline","value":"","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" Newline to use\n"},{"kind":"Field","id":{"krate":0,"index":6065},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38168,"byte_end":38171,"line_start":47,"line_end":47,"column_start":9,"column_end":12},"name":"pad","qualname":"::base64::Config::pad","value":"","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" True to pad output with `=` characters\n"},{"kind":"Field","id":{"krate":0,"index":6066},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38263,"byte_end":38274,"line_start":49,"line_end":49,"column_start":9,"column_end":20},"name":"line_length","qualname":"::base64::Config::line_length","value":"","parent":{"krate":0,"index":6062},"children":[],"decl_id":null,"docs":" `Some(len)` to wrap lines at `len`, `None` to disable line wrapping\n"},{"kind":"Static","id":{"krate":0,"index":803},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38360,"byte_end":38368,"line_start":53,"line_end":53,"column_start":12,"column_end":20},"name":"STANDARD","qualname":"::base64::STANDARD","value":"Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: None}","parent":null,"children":[],"decl_id":null,"docs":" Configuration for RFC 4648 standard base64 encoding\n"},{"kind":"Static","id":{"krate":0,"index":804},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38528,"byte_end":38536,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"URL_SAFE","qualname":"::base64::URL_SAFE","value":"Config {char_set: UrlSafe, newline: Newline::CRLF, pad: false, line_length: None}","parent":null,"children":[],"decl_id":null,"docs":" Configuration for RFC 4648 base64url encoding\n"},{"kind":"Static","id":{"krate":0,"index":805},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":38698,"byte_end":38702,"line_start":61,"line_end":61,"column_start":12,"column_end":16},"name":"MIME","qualname":"::base64::MIME","value":"Config {char_set: Standard, newline: Newline::CRLF, pad: true, line_length: Some(76)}","parent":null,"children":[],"decl_id":null,"docs":" Configuration for RFC 2045 MIME base64 encoding\n"},{"kind":"Trait","id":{"krate":0,"index":808},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":39251,"byte_end":39259,"line_start":73,"line_end":73,"column_start":11,"column_end":19},"name":"ToBase64","qualname":"::base64::ToBase64","value":"ToBase64","parent":null,"children":[{"krate":0,"index":809}],"decl_id":null,"docs":" A trait for converting a value to base64 encoding.\n"},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":39406,"byte_end":39415,"line_start":76,"line_end":76,"column_start":8,"column_end":17},"name":"to_base64","qualname":"::base64::ToBase64::to_base64","value":"fn (&self, config: Config) -> String","parent":{"krate":0,"index":808},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a base64 value following the specified\n format configuration, returning the owned string.\n"},{"kind":"Trait","id":{"krate":0,"index":848},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":43282,"byte_end":43292,"line_start":195,"line_end":195,"column_start":11,"column_end":21},"name":"FromBase64","qualname":"::base64::FromBase64","value":"FromBase64","parent":null,"children":[{"krate":0,"index":849}],"decl_id":null,"docs":" A trait for converting from base64 encoded values.\n"},{"kind":"Method","id":{"krate":0,"index":849},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":43437,"byte_end":43448,"line_start":198,"line_end":198,"column_start":8,"column_end":19},"name":"from_base64","qualname":"::base64::FromBase64::from_base64","value":"fn (&self) -> Result<Vec<u8>, FromBase64Error>","parent":{"krate":0,"index":848},"children":[],"decl_id":null,"docs":" Converts the value of `self`, interpreted as base64 encoded data, into\n an owned vector of bytes, returning the vector.\n"},{"kind":"Enum","id":{"krate":0,"index":6081},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":43592,"byte_end":43607,"line_start":203,"line_end":203,"column_start":10,"column_end":25},"name":"FromBase64Error","qualname":"::base64::FromBase64Error","value":"FromBase64Error::{InvalidBase64Byte, InvalidBase64Length}","parent":null,"children":[{"krate":0,"index":6082},{"krate":0,"index":6085}],"decl_id":null,"docs":" Errors that can occur when decoding a base64 encoded string\n"},{"kind":"Tuple","id":{"krate":0,"index":6082},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":43684,"byte_end":43701,"line_start":205,"line_end":205,"column_start":5,"column_end":22},"name":"InvalidBase64Byte","qualname":"::base64::FromBase64Error::InvalidBase64Byte","value":"FromBase64Error::InvalidBase64Byte(u8, usize)","parent":{"krate":0,"index":6081},"children":[],"decl_id":null,"docs":" The input contained a character not part of the base64 format\n"},{"kind":"Tuple","id":{"krate":0,"index":6085},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/base64.rs","byte_start":43758,"byte_end":43777,"line_start":207,"line_end":207,"column_start":5,"column_end":24},"name":"InvalidBase64Length","qualname":"::base64::FromBase64Error::InvalidBase64Length","value":"FromBase64Error::InvalidBase64Length","parent":{"krate":0,"index":6081},"children":[],"decl_id":null,"docs":" The input had an invalid length\n"},{"kind":"Mod","id":{"krate":0,"index":888},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs","byte_start":2008,"byte_end":2011,"line_start":64,"line_end":64,"column_start":9,"column_end":12},"name":"hex","qualname":"::hex","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","parent":null,"children":[{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":901},{"krate":0,"index":6095},{"krate":0,"index":6100},{"krate":0,"index":6103},{"krate":0,"index":904},{"krate":0,"index":911},{"krate":0,"index":915},{"krate":0,"index":919}],"decl_id":null,"docs":" Hex binary-to-text encoding\n"},{"kind":"Trait","id":{"krate":0,"index":892},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":54135,"byte_end":54140,"line_start":21,"line_end":21,"column_start":11,"column_end":16},"name":"ToHex","qualname":"::hex::ToHex","value":"ToHex","parent":null,"children":[{"krate":0,"index":893}],"decl_id":null,"docs":" A trait for converting a value to hexadecimal encoding\n"},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":54239,"byte_end":54245,"line_start":24,"line_end":24,"column_start":8,"column_end":14},"name":"to_hex","qualname":"::hex::ToHex::to_hex","value":"fn (&self) -> String","parent":{"krate":0,"index":892},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a hex value, returning the owned\n string.\n"},{"kind":"Trait","id":{"krate":0,"index":901},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":55033,"byte_end":55040,"line_start":57,"line_end":57,"column_start":11,"column_end":18},"name":"FromHex","qualname":"::hex::FromHex","value":"FromHex","parent":null,"children":[{"krate":0,"index":902}],"decl_id":null,"docs":" A trait for converting hexadecimal encoded values\n"},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":55190,"byte_end":55198,"line_start":60,"line_end":60,"column_start":8,"column_end":16},"name":"from_hex","qualname":"::hex::FromHex::from_hex","value":"fn (&self) -> Result<Vec<u8>, FromHexError>","parent":{"krate":0,"index":901},"children":[],"decl_id":null,"docs":" Converts the value of `self`, interpreted as hexadecimal encoded data,\n into an owned vector of bytes, returning the vector.\n"},{"kind":"Enum","id":{"krate":0,"index":6095},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":55336,"byte_end":55348,"line_start":65,"line_end":65,"column_start":10,"column_end":22},"name":"FromHexError","qualname":"::hex::FromHexError","value":"FromHexError::{InvalidHexCharacter, InvalidHexLength}","parent":null,"children":[{"krate":0,"index":6096},{"krate":0,"index":6099}],"decl_id":null,"docs":" Errors that can occur when decoding a hex encoded string\n"},{"kind":"Tuple","id":{"krate":0,"index":6096},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":55422,"byte_end":55441,"line_start":67,"line_end":67,"column_start":5,"column_end":24},"name":"InvalidHexCharacter","qualname":"::hex::FromHexError::InvalidHexCharacter","value":"FromHexError::InvalidHexCharacter(char, usize)","parent":{"krate":0,"index":6095},"children":[],"decl_id":null,"docs":" The input contained a character not part of the hex format\n"},{"kind":"Tuple","id":{"krate":0,"index":6099},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/hex.rs","byte_start":55500,"byte_end":55516,"line_start":69,"line_end":69,"column_start":5,"column_end":21},"name":"InvalidHexLength","qualname":"::hex::FromHexError::InvalidHexLength","value":"FromHexError::InvalidHexLength","parent":{"krate":0,"index":6095},"children":[],"decl_id":null,"docs":" The input had an invalid length\n"},{"kind":"Mod","id":{"krate":0,"index":928},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/lib.rs","byte_start":2021,"byte_end":2025,"line_start":65,"line_end":65,"column_start":9,"column_end":13},"name":"json","qualname":"::json","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":6108},{"krate":0,"index":6124},{"krate":0,"index":6134},{"krate":0,"index":6173},{"krate":0,"index":6276},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":947},{"krate":0,"index":950},{"krate":0,"index":954},{"krate":0,"index":6295},{"krate":0,"index":6314},{"krate":0,"index":6317},{"krate":0,"index":6318},{"krate":0,"index":6324},{"krate":0,"index":6331},{"krate":0,"index":959},{"krate":0,"index":969},{"krate":0,"index":6341},{"krate":0,"index":6354},{"krate":0,"index":6389},{"krate":0,"index":6405},{"krate":0,"index":6409},{"krate":0,"index":6410},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":993},{"krate":0,"index":1000},{"krate":0,"index":1005},{"krate":0,"index":1009},{"krate":0,"index":1015},{"krate":0,"index":1019},{"krate":0,"index":1022},{"krate":0,"index":1025},{"krate":0,"index":1029},{"krate":0,"index":1032},{"krate":0,"index":1035},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1053},{"krate":0,"index":1059},{"krate":0,"index":1064},{"krate":0,"index":1070},{"krate":0,"index":1075},{"krate":0,"index":1080},{"krate":0,"index":1092},{"krate":0,"index":1257},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1370},{"krate":0,"index":1376},{"krate":0,"index":6675},{"krate":0,"index":6693},{"krate":0,"index":6728},{"krate":0,"index":6749},{"krate":0,"index":6759},{"krate":0,"index":6778},{"krate":0,"index":1383},{"krate":0,"index":6791},{"krate":0,"index":6797},{"krate":0,"index":6817},{"krate":0,"index":6823},{"krate":0,"index":6832},{"krate":0,"index":6838},{"krate":0,"index":6861},{"krate":0,"index":6867},{"krate":0,"index":1386},{"krate":0,"index":1437},{"krate":0,"index":1445},{"krate":0,"index":1450},{"krate":0,"index":1568},{"krate":0,"index":1572},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1620},{"krate":0,"index":1625},{"krate":0,"index":1791},{"krate":0,"index":7077},{"krate":0,"index":7080},{"krate":0,"index":7083},{"krate":0,"index":7086},{"krate":0,"index":7089},{"krate":0,"index":7092},{"krate":0,"index":7095},{"krate":0,"index":7098},{"krate":0,"index":7101},{"krate":0,"index":7104},{"krate":0,"index":1794},{"krate":0,"index":1797},{"krate":0,"index":1800},{"krate":0,"index":1806},{"krate":0,"index":1809},{"krate":0,"index":1812},{"krate":0,"index":1815},{"krate":0,"index":7107},{"krate":0,"index":7112},{"krate":0,"index":7119},{"krate":0,"index":7128},{"krate":0,"index":7139},{"krate":0,"index":7152},{"krate":0,"index":7167},{"krate":0,"index":7184},{"krate":0,"index":7203},{"krate":0,"index":7224},{"krate":0,"index":7247},{"krate":0,"index":7272},{"krate":0,"index":1818},{"krate":0,"index":1824},{"krate":0,"index":1830},{"krate":0,"index":1837},{"krate":0,"index":1844},{"krate":0,"index":1850},{"krate":0,"index":1854},{"krate":0,"index":1860},{"krate":0,"index":1866},{"krate":0,"index":1873},{"krate":0,"index":1881},{"krate":0,"index":1887},{"krate":0,"index":1896}],"decl_id":null,"docs":" JSON parsing and serialization\n\n # What is JSON?\n\n JSON (JavaScript Object Notation) is a way to write data in Javascript.\n Like XML, it allows encoding structured data in a text format that can be\n easily read by humans. Its simple syntax and native compatibility with\n JavaScript have made it a widely used format.\n\n Data types that can be encoded are JavaScript types (see the `Json` enum\n for more details):\n\n * `I64`: equivalent to rust's `i64`\n * `U64`: equivalent to rust's `u64`\n * `F64`: equivalent to rust's `f64`\n * `Boolean`: equivalent to rust's `bool`\n * `String`: equivalent to rust's `String`\n * `Array`: equivalent to rust's `Vec<T>`, but also allowing objects of\n   different types in the\n   same array\n * `Object`: equivalent to rust's `BTreeMap<String, json::Json>`\n * `Null`\n\n An object is a series of string keys mapping to values, in `\"key\": value`\n format.  Arrays are enclosed in square brackets ([ ... ]) and objects in\n curly brackets ({ ... }).  A simple JSON document encoding a person,\n their age, address and phone numbers could look like\n\n ```ignore\n {\n     \"FirstName\": \"John\",\n     \"LastName\": \"Doe\",\n     \"Age\": 43,\n     \"Address\": {\n         \"Street\": \"Downing Street 10\",\n         \"City\": \"London\",\n         \"Country\": \"Great Britain\"\n     },\n     \"PhoneNumbers\": [\n         \"+44 1234567\",\n         \"+44 2345678\"\n     ]\n }\n ```\n\n # Rust Type-based Encoding and Decoding\n\n Rust provides a mechanism for low boilerplate encoding & decoding of values\n to and from JSON via the serialization API.  To be able to encode a piece\n of data, it must implement the `rustc_serialize::Encodable` trait.  To be\n able to decode a piece of data, it must implement the\n `rustc_serialize::Decodable` trait.  The Rust compiler provides an\n annotation to automatically generate the code for these traits:\n `#[derive(RustcDecodable, RustcEncodable)]`\n\n The JSON API provides an enum `json::Json` and a trait `ToJson` to encode\n objects.  The `ToJson` trait provides a `to_json` method to convert an\n object into a `json::Json` value.  A `json::Json` value can be encoded as a\n string or buffer using the functions described above.  You can also use the\n `json::Encoder` object, which implements the `Encoder` trait.\n\n When using `ToJson`, the `Encodable` trait implementation is not\n mandatory.\n\n # Examples of use\n\n ## Using Autoserialization\n\n Create a struct called `TestStruct` and serialize and deserialize it to and\n from JSON using the serialization API, using the derived serialization code.\n\n ```rust\n extern crate rustc_serialize;\n use rustc_serialize::json;\n\n // Automatically generate `RustcDecodable` and `RustcEncodable` trait\n // implementations\n #[derive(RustcDecodable, RustcEncodable)]\n pub struct TestStruct  {\n     data_int: u8,\n     data_str: String,\n     data_vector: Vec<u8>,\n }\n\n fn main() {\n     let object = TestStruct {\n         data_int: 1,\n         data_str: \"homura\".to_string(),\n         data_vector: vec![2,3,4,5],\n     };\n\n     // Serialize using `json::encode`\n     let encoded = json::encode(&object).unwrap();\n\n     // Deserialize using `json::decode`\n     let decoded: TestStruct = json::decode(&encoded).unwrap();\n }\n ```\n\n ## Using the `ToJson` trait\n\n The examples below use the `ToJson` trait to generate the JSON string,\n which is required for custom mappings.\n\n ### Simple example of `ToJson` usage\n\n ```rust\n extern crate rustc_serialize;\n use rustc_serialize::json::{self, ToJson, Json};\n\n // A custom data structure\n struct ComplexNum {\n     a: f64,\n     b: f64,\n }\n\n // JSON value representation\n impl ToJson for ComplexNum {\n     fn to_json(&self) -> Json {\n         Json::String(format!(\"{}+{}i\", self.a, self.b))\n     }\n }\n\n // Only generate `RustcEncodable` trait implementation\n #[derive(RustcEncodable)]\n pub struct ComplexNumRecord {\n     uid: u8,\n     dsc: String,\n     val: Json,\n }\n\n fn main() {\n     let num = ComplexNum { a: 0.0001, b: 12.539 };\n     let data: String = json::encode(&ComplexNumRecord{\n         uid: 1,\n         dsc: \"test\".to_string(),\n         val: num.to_json(),\n     }).unwrap();\n     println!(\"data: {}\", data);\n     // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539i\"};\n }\n ```\n\n ### Verbose example of `ToJson` usage\n\n ```rust\n extern crate rustc_serialize;\n use std::collections::BTreeMap;\n use rustc_serialize::json::{self, Json, ToJson};\n\n // Only generate `Decodable` trait implementation\n #[derive(RustcDecodable)]\n pub struct TestStruct {\n     data_int: u8,\n     data_str: String,\n     data_vector: Vec<u8>,\n }\n\n // Specify encoding method manually\n impl ToJson for TestStruct {\n     fn to_json(&self) -> Json {\n         let mut d = BTreeMap::new();\n         // All standard types implement `to_json()`, so use it\n         d.insert(\"data_int\".to_string(), self.data_int.to_json());\n         d.insert(\"data_str\".to_string(), self.data_str.to_json());\n         d.insert(\"data_vector\".to_string(), self.data_vector.to_json());\n         Json::Object(d)\n     }\n }\n\n fn main() {\n     // Serialize using `ToJson`\n     let input_data = TestStruct {\n         data_int: 1,\n         data_str: \"madoka\".to_string(),\n         data_vector: vec![2,3,4,5],\n     };\n     let json_obj: Json = input_data.to_json();\n     let json_str: String = json_obj.to_string();\n\n     // Deserialize like before\n     let decoded: TestStruct = json::decode(&json_str).unwrap();\n }\n ```\n\n ## Parsing a `str` to `Json` and reading the result\n\n ```rust\n extern crate rustc_serialize;\n use rustc_serialize::json::Json;\n\n fn main() {\n     let data = Json::from_str(\"{\\\"foo\\\": 13, \\\"bar\\\": \\\"baz\\\"}\").unwrap();\n     println!(\"data: {}\", data);\n     // data: {\"bar\":\"baz\",\"foo\":13}\n     println!(\"object? {}\", data.is_object());\n     // object? true\n\n     let obj = data.as_object().unwrap();\n     let foo = obj.get(\"foo\").unwrap();\n\n     println!(\"array? {:?}\", foo.as_array());\n     // array? None\n     println!(\"u64? {:?}\", foo.as_u64());\n     // u64? Some(13u64)\n\n     for (key, value) in obj.iter() {\n         println!(\"{}: {}\", key, match *value {\n             Json::U64(v) => format!(\"{} (u64)\", v),\n             Json::String(ref v) => format!(\"{} (string)\", v),\n             _ => format!(\"other\")\n         });\n     }\n     // bar: baz (string)\n     // foo: 13 (u64)\n }\n ```\n\n # The status of this library\n\n While this library is the standard way of working with JSON in Rust,\n there is a next-generation library called Serde that's in the works (it's\n faster, overcomes some design limitations of rustc-serialize and has more\n features). You might consider using it when starting a new project or\n evaluating Rust JSON performance.\n"},{"kind":"Enum","id":{"krate":0,"index":6108},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67740,"byte_end":67744,"line_start":261,"line_end":261,"column_start":10,"column_end":14},"name":"Json","qualname":"::json::Json","value":"Json::{I64, U64, F64, String, Boolean, Array, Object, Null}","parent":null,"children":[{"krate":0,"index":6109},{"krate":0,"index":6111},{"krate":0,"index":6113},{"krate":0,"index":6115},{"krate":0,"index":6117},{"krate":0,"index":6119},{"krate":0,"index":6121},{"krate":0,"index":6123}],"decl_id":null,"docs":" Represents a json value\n"},{"kind":"Tuple","id":{"krate":0,"index":6109},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67751,"byte_end":67754,"line_start":262,"line_end":262,"column_start":5,"column_end":8},"name":"I64","qualname":"::json::Json::I64","value":"Json::I64(i64)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6111},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67765,"byte_end":67768,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"U64","qualname":"::json::Json::U64","value":"Json::U64(u64)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6113},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67779,"byte_end":67782,"line_start":264,"line_end":264,"column_start":5,"column_end":8},"name":"F64","qualname":"::json::Json::F64","value":"Json::F64(f64)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6115},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67793,"byte_end":67799,"line_start":265,"line_end":265,"column_start":5,"column_end":11},"name":"String","qualname":"::json::Json::String","value":"Json::String(string::String)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6117},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67821,"byte_end":67828,"line_start":266,"line_end":266,"column_start":5,"column_end":12},"name":"Boolean","qualname":"::json::Json::Boolean","value":"Json::Boolean(bool)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6119},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67840,"byte_end":67845,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Array","qualname":"::json::Json::Array","value":"Json::Array(self::Array)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6121},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67864,"byte_end":67870,"line_start":268,"line_end":268,"column_start":5,"column_end":11},"name":"Object","qualname":"::json::Json::Object","value":"Json::Object(self::Object)","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6123},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67890,"byte_end":67894,"line_start":269,"line_end":269,"column_start":5,"column_end":9},"name":"Null","qualname":"::json::Json::Null","value":"Json::Null","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":""},{"kind":"Type","id":{"krate":0,"index":945},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67908,"byte_end":67913,"line_start":272,"line_end":272,"column_start":10,"column_end":15},"name":"Array","qualname":"::json::Array","value":"Vec<Json>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Type","id":{"krate":0,"index":946},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67936,"byte_end":67942,"line_start":273,"line_end":273,"column_start":10,"column_end":16},"name":"Object","qualname":"::json::Object","value":"BTreeMap<string::String, Json>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":947},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":67989,"byte_end":67999,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"PrettyJson","qualname":"::json::PrettyJson","value":"PrettyJson { inner }","parent":null,"children":[{"krate":0,"index":948}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":950},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68036,"byte_end":68042,"line_start":277,"line_end":277,"column_start":12,"column_end":18},"name":"AsJson","qualname":"::json::AsJson","value":"AsJson { inner }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":954},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68082,"byte_end":68094,"line_start":278,"line_end":278,"column_start":12,"column_end":24},"name":"AsPrettyJson","qualname":"::json::AsPrettyJson","value":"AsPrettyJson { inner, indent }","parent":null,"children":[{"krate":0,"index":955},{"krate":0,"index":956}],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":6295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68247,"byte_end":68256,"line_start":282,"line_end":282,"column_start":10,"column_end":19},"name":"ErrorCode","qualname":"::json::ErrorCode","value":"ErrorCode::{InvalidSyntax, InvalidNumber, EOFWhileParsingObject, EOFWhileParsingArray, EOFWhileParsingValue, EOFWhileParsingString, KeyMustBeAString, ExpectedColon, TrailingCharacters, TrailingComma, InvalidEscape, InvalidUnicodeCodePoint, LoneLeadingSurrogateInHexEscape, UnexpectedEndOfHexEscape, UnrecognizedHex, NotFourDigit, ControlCharacterInString, NotUtf8}","parent":null,"children":[{"krate":0,"index":6296},{"krate":0,"index":6297},{"krate":0,"index":6298},{"krate":0,"index":6299},{"krate":0,"index":6300},{"krate":0,"index":6301},{"krate":0,"index":6302},{"krate":0,"index":6303},{"krate":0,"index":6304},{"krate":0,"index":6305},{"krate":0,"index":6306},{"krate":0,"index":6307},{"krate":0,"index":6308},{"krate":0,"index":6309},{"krate":0,"index":6310},{"krate":0,"index":6311},{"krate":0,"index":6312},{"krate":0,"index":6313}],"decl_id":null,"docs":" The errors that can arise while parsing a JSON stream.\n"},{"kind":"Tuple","id":{"krate":0,"index":6296},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68263,"byte_end":68276,"line_start":283,"line_end":283,"column_start":5,"column_end":18},"name":"InvalidSyntax","qualname":"::json::ErrorCode::InvalidSyntax","value":"ErrorCode::InvalidSyntax","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6297},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68282,"byte_end":68295,"line_start":284,"line_end":284,"column_start":5,"column_end":18},"name":"InvalidNumber","qualname":"::json::ErrorCode::InvalidNumber","value":"ErrorCode::InvalidNumber","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6298},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68301,"byte_end":68322,"line_start":285,"line_end":285,"column_start":5,"column_end":26},"name":"EOFWhileParsingObject","qualname":"::json::ErrorCode::EOFWhileParsingObject","value":"ErrorCode::EOFWhileParsingObject","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6299},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68328,"byte_end":68348,"line_start":286,"line_end":286,"column_start":5,"column_end":25},"name":"EOFWhileParsingArray","qualname":"::json::ErrorCode::EOFWhileParsingArray","value":"ErrorCode::EOFWhileParsingArray","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6300},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68354,"byte_end":68374,"line_start":287,"line_end":287,"column_start":5,"column_end":25},"name":"EOFWhileParsingValue","qualname":"::json::ErrorCode::EOFWhileParsingValue","value":"ErrorCode::EOFWhileParsingValue","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6301},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68380,"byte_end":68401,"line_start":288,"line_end":288,"column_start":5,"column_end":26},"name":"EOFWhileParsingString","qualname":"::json::ErrorCode::EOFWhileParsingString","value":"ErrorCode::EOFWhileParsingString","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6302},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68407,"byte_end":68423,"line_start":289,"line_end":289,"column_start":5,"column_end":21},"name":"KeyMustBeAString","qualname":"::json::ErrorCode::KeyMustBeAString","value":"ErrorCode::KeyMustBeAString","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6303},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68429,"byte_end":68442,"line_start":290,"line_end":290,"column_start":5,"column_end":18},"name":"ExpectedColon","qualname":"::json::ErrorCode::ExpectedColon","value":"ErrorCode::ExpectedColon","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6304},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68448,"byte_end":68466,"line_start":291,"line_end":291,"column_start":5,"column_end":23},"name":"TrailingCharacters","qualname":"::json::ErrorCode::TrailingCharacters","value":"ErrorCode::TrailingCharacters","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6305},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68472,"byte_end":68485,"line_start":292,"line_end":292,"column_start":5,"column_end":18},"name":"TrailingComma","qualname":"::json::ErrorCode::TrailingComma","value":"ErrorCode::TrailingComma","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6306},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68491,"byte_end":68504,"line_start":293,"line_end":293,"column_start":5,"column_end":18},"name":"InvalidEscape","qualname":"::json::ErrorCode::InvalidEscape","value":"ErrorCode::InvalidEscape","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6307},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68510,"byte_end":68533,"line_start":294,"line_end":294,"column_start":5,"column_end":28},"name":"InvalidUnicodeCodePoint","qualname":"::json::ErrorCode::InvalidUnicodeCodePoint","value":"ErrorCode::InvalidUnicodeCodePoint","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6308},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68539,"byte_end":68570,"line_start":295,"line_end":295,"column_start":5,"column_end":36},"name":"LoneLeadingSurrogateInHexEscape","qualname":"::json::ErrorCode::LoneLeadingSurrogateInHexEscape","value":"ErrorCode::LoneLeadingSurrogateInHexEscape","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6309},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68576,"byte_end":68600,"line_start":296,"line_end":296,"column_start":5,"column_end":29},"name":"UnexpectedEndOfHexEscape","qualname":"::json::ErrorCode::UnexpectedEndOfHexEscape","value":"ErrorCode::UnexpectedEndOfHexEscape","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6310},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68606,"byte_end":68621,"line_start":297,"line_end":297,"column_start":5,"column_end":20},"name":"UnrecognizedHex","qualname":"::json::ErrorCode::UnrecognizedHex","value":"ErrorCode::UnrecognizedHex","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6311},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68627,"byte_end":68639,"line_start":298,"line_end":298,"column_start":5,"column_end":17},"name":"NotFourDigit","qualname":"::json::ErrorCode::NotFourDigit","value":"ErrorCode::NotFourDigit","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6312},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68645,"byte_end":68669,"line_start":299,"line_end":299,"column_start":5,"column_end":29},"name":"ControlCharacterInString","qualname":"::json::ErrorCode::ControlCharacterInString","value":"ErrorCode::ControlCharacterInString","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6313},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68675,"byte_end":68682,"line_start":300,"line_end":300,"column_start":5,"column_end":12},"name":"NotUtf8","qualname":"::json::ErrorCode::NotUtf8","value":"ErrorCode::NotUtf8","parent":{"krate":0,"index":6295},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":6324},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68713,"byte_end":68724,"line_start":304,"line_end":304,"column_start":10,"column_end":21},"name":"ParserError","qualname":"::json::ParserError","value":"ParserError::{SyntaxError, IoError}","parent":null,"children":[{"krate":0,"index":6325},{"krate":0,"index":6329}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6325},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68754,"byte_end":68765,"line_start":306,"line_end":306,"column_start":5,"column_end":16},"name":"SyntaxError","qualname":"::json::ParserError::SyntaxError","value":"ParserError::SyntaxError(ErrorCode, usize, usize)","parent":{"krate":0,"index":6324},"children":[],"decl_id":null,"docs":" msg, line, col\n"},{"kind":"Tuple","id":{"krate":0,"index":6329},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":68796,"byte_end":68803,"line_start":307,"line_end":307,"column_start":5,"column_end":12},"name":"IoError","qualname":"::json::ParserError::IoError","value":"ParserError::IoError(io::Error)","parent":{"krate":0,"index":6324},"children":[],"decl_id":null,"docs":""},{"kind":"Type","id":{"krate":0,"index":969},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69226,"byte_end":69238,"line_start":322,"line_end":322,"column_start":10,"column_end":22},"name":"BuilderError","qualname":"::json::BuilderError","value":"ParserError","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":6341},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69292,"byte_end":69304,"line_start":325,"line_end":325,"column_start":10,"column_end":22},"name":"DecoderError","qualname":"::json::DecoderError","value":"DecoderError::{ParseError, ExpectedError, MissingFieldError, UnknownVariantError, ApplicationError, EOF}","parent":null,"children":[{"krate":0,"index":6342},{"krate":0,"index":6344},{"krate":0,"index":6347},{"krate":0,"index":6349},{"krate":0,"index":6351},{"krate":0,"index":6353}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6342},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69311,"byte_end":69321,"line_start":326,"line_end":326,"column_start":5,"column_end":15},"name":"ParseError","qualname":"::json::DecoderError::ParseError","value":"DecoderError::ParseError(ParserError)","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6344},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69340,"byte_end":69353,"line_start":327,"line_end":327,"column_start":5,"column_end":18},"name":"ExpectedError","qualname":"::json::DecoderError::ExpectedError","value":"DecoderError::ExpectedError(string::String, string::String)","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6347},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69391,"byte_end":69408,"line_start":328,"line_end":328,"column_start":5,"column_end":22},"name":"MissingFieldError","qualname":"::json::DecoderError::MissingFieldError","value":"DecoderError::MissingFieldError(string::String)","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6349},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69430,"byte_end":69449,"line_start":329,"line_end":329,"column_start":5,"column_end":24},"name":"UnknownVariantError","qualname":"::json::DecoderError::UnknownVariantError","value":"DecoderError::UnknownVariantError(string::String)","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6351},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69471,"byte_end":69487,"line_start":330,"line_end":330,"column_start":5,"column_end":21},"name":"ApplicationError","qualname":"::json::DecoderError::ApplicationError","value":"DecoderError::ApplicationError(string::String)","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6353},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69509,"byte_end":69512,"line_start":331,"line_end":331,"column_start":5,"column_end":8},"name":"EOF","qualname":"::json::DecoderError::EOF","value":"DecoderError::EOF","parent":{"krate":0,"index":6341},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":6405},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69549,"byte_end":69561,"line_start":335,"line_end":335,"column_start":10,"column_end":22},"name":"EncoderError","qualname":"::json::EncoderError","value":"EncoderError::{FmtError, BadHashmapKey}","parent":null,"children":[{"krate":0,"index":6406},{"krate":0,"index":6408}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6406},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69568,"byte_end":69576,"line_start":336,"line_end":336,"column_start":5,"column_end":13},"name":"FmtError","qualname":"::json::EncoderError::FmtError","value":"EncoderError::FmtError(fmt::Error)","parent":{"krate":0,"index":6405},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6408},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69594,"byte_end":69607,"line_start":337,"line_end":337,"column_start":5,"column_end":18},"name":"BadHashmapKey","qualname":"::json::EncoderError::BadHashmapKey","value":"EncoderError::BadHashmapKey","parent":{"krate":0,"index":6405},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":973},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":69750,"byte_end":69759,"line_start":345,"line_end":345,"column_start":8,"column_end":17},"name":"error_str","qualname":"::json::error_str","value":"fn (error: ErrorCode) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Returns a readable error string for a given error code.\n"},{"kind":"Function","id":{"krate":0,"index":993},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":70919,"byte_end":70925,"line_start":369,"line_end":369,"column_start":8,"column_end":14},"name":"decode","qualname":"::json::decode","value":"fn <T> (s: &str) -> DecodeResult<T>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut function to decode a JSON `&str` into an object\n"},{"kind":"Function","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":71234,"byte_end":71240,"line_start":380,"line_end":380,"column_start":8,"column_end":14},"name":"encode","qualname":"::json::encode","value":"fn <T> (object: &T) -> EncodeResult<string::String>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut function to encode a `T` into a JSON `String`\n"},{"kind":"Type","id":{"krate":0,"index":1042},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":72813,"byte_end":72825,"line_start":447,"line_end":447,"column_start":10,"column_end":22},"name":"EncodeResult","qualname":"::json::EncodeResult","value":"Result<T, EncoderError>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Type","id":{"krate":0,"index":1044},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":72865,"byte_end":72877,"line_start":448,"line_end":448,"column_start":10,"column_end":22},"name":"DecodeResult","qualname":"::json::DecodeResult","value":"Result<T, DecoderError>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":1071},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":75724,"byte_end":75731,"line_start":559,"line_end":559,"column_start":5,"column_end":12},"name":"Compact","qualname":"::json::EncodingFormat::Compact","value":"EncodingFormat::Compact","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1072},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":75737,"byte_end":75743,"line_start":560,"line_end":560,"column_start":5,"column_end":11},"name":"Pretty","qualname":"::json::EncodingFormat::Pretty","value":"EncodingFormat::Pretty { curr_indent, indent }","parent":{"krate":0,"index":1070},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1075},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":75868,"byte_end":75875,"line_start":567,"line_end":567,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::json::Encoder","value":"Encoder { writer, format, is_emitting_map_key }","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078}],"decl_id":null,"docs":" A structure for implementing serialization to JSON.\n"},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":76130,"byte_end":76140,"line_start":576,"line_end":576,"column_start":12,"column_end":22},"name":"new_pretty","qualname":"<Encoder<'a>>::new_pretty","value":"fn (writer: &'a mut fmt::Write) -> Encoder<'a>","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Creates a new encoder whose output will be written in human-readable\n JSON to the specified writer\n"},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":76526,"byte_end":76529,"line_start":589,"line_end":589,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<'a>>::new","value":"fn (writer: &'a mut fmt::Write) -> Encoder<'a>","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Creates a new encoder whose output will be written in compact\n JSON to the specified writer\n"},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":76838,"byte_end":76848,"line_start":599,"line_end":599,"column_start":12,"column_end":22},"name":"set_indent","qualname":"<Encoder<'a>>::set_indent","value":"fn (&mut self, new_indent: u32) -> Result<(), ()>","parent":{"krate":0,"index":1075},"children":[],"decl_id":null,"docs":" Set the number of spaces to indent for each level.\n This is safe to set during encoding.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":75428,"byte_end":75451,"line_start":546,"line_end":546,"column_start":14,"column_end":37},"name":"emit_enquoted_if_mapkey","qualname":"emit_enquoted_if_mapkey::3383741186972126779","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1269},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":89936,"byte_end":89943,"line_start":937,"line_end":937,"column_start":8,"column_end":15},"name":"as_json","qualname":"::json::as_json","value":"fn <T> (t: &T) -> AsJson<T>","parent":null,"children":[],"decl_id":null,"docs":" Create an `AsJson` wrapper which can be used to print a value as JSON\n on-the-fly via `write!`\n"},{"kind":"Function","id":{"krate":0,"index":1272},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":90122,"byte_end":90136,"line_start":943,"line_end":943,"column_start":8,"column_end":22},"name":"as_pretty_json","qualname":"::json::as_pretty_json","value":"fn <T> (t: &T) -> AsPrettyJson<T>","parent":null,"children":[],"decl_id":null,"docs":" Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\n on-the-fly via `write!`\n"},{"kind":"Method","id":{"krate":0,"index":1276},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":90302,"byte_end":90313,"line_start":949,"line_end":949,"column_start":12,"column_end":23},"name":"from_reader","qualname":"<Json>::from_reader","value":"fn (rdr: &mut io::Read) -> Result<Self, BuilderError>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Decodes a json value from an `&mut io::Read`\n"},{"kind":"Method","id":{"krate":0,"index":1283},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":90785,"byte_end":90793,"line_start":964,"line_end":964,"column_start":12,"column_end":20},"name":"from_str","qualname":"<Json>::from_str","value":"fn (s: &str) -> Result<Self, BuilderError>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Decodes a json value from a string\n"},{"kind":"Method","id":{"krate":0,"index":1286},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":91045,"byte_end":91051,"line_start":971,"line_end":971,"column_start":12,"column_end":18},"name":"pretty","qualname":"<Json>::pretty","value":"fn (&self) -> PrettyJson","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Borrow this json object as a pretty object to generate a pretty\n representation for it via `Display`.\n"},{"kind":"Method","id":{"krate":0,"index":1288},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":91254,"byte_end":91258,"line_start":977,"line_end":977,"column_start":12,"column_end":16},"name":"find","qualname":"<Json>::find","value":"fn <'a, > (&'a self, key: &str) -> Option<&'a Json>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Object, returns the value associated with the provided key.\n Otherwise, returns None.\n"},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":91647,"byte_end":91656,"line_start":987,"line_end":987,"column_start":12,"column_end":21},"name":"find_path","qualname":"<Json>::find_path","value":"fn <'a, > (&'a self, keys: &[&str]) -> Option<&'a Json>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Attempts to get a nested Json Object for each key in `keys`.\n If any key is found not to exist, find_path will return None.\n Otherwise, it will return the Json value associated with the final key.\n"},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":92166,"byte_end":92172,"line_start":1001,"line_end":1001,"column_start":12,"column_end":18},"name":"search","qualname":"<Json>::search","value":"fn <'a, > (&'a self, key: &str) -> Option<&'a Json>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Object, performs a depth-first search until\n a value associated with the provided key is found. If no value is found\n or the Json value is not an Object, returns None.\n"},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":92877,"byte_end":92886,"line_start":1022,"line_end":1022,"column_start":12,"column_end":21},"name":"is_object","qualname":"<Json>::is_object","value":"fn <'a, > (&'a self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is an Object. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":93069,"byte_end":93078,"line_start":1028,"line_end":1028,"column_start":12,"column_end":21},"name":"as_object","qualname":"<Json>::as_object","value":"fn <'a, > (&'a self) -> Option<&'a Object>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Object, returns the associated BTreeMap.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":93350,"byte_end":93363,"line_start":1037,"line_end":1037,"column_start":12,"column_end":25},"name":"as_object_mut","qualname":"<Json>::as_object_mut","value":"fn <'a, > (&'a mut self) -> Option<&'a mut Object>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Object, returns the associated mutable BTreeMap.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":93615,"byte_end":93623,"line_start":1045,"line_end":1045,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Json>::is_array","value":"fn <'a, > (&'a self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is an Array. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":93802,"byte_end":93810,"line_start":1051,"line_end":1051,"column_start":12,"column_end":20},"name":"as_array","qualname":"<Json>::as_array","value":"fn <'a, > (&'a self) -> Option<&'a Array>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Array, returns the associated vector.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1328},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":94083,"byte_end":94095,"line_start":1060,"line_end":1060,"column_start":12,"column_end":24},"name":"as_array_mut","qualname":"<Json>::as_array_mut","value":"fn <'a, > (&'a mut self) -> Option<&'a mut Array>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is an Array, returns the associated mutable vector.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":94347,"byte_end":94356,"line_start":1068,"line_end":1068,"column_start":12,"column_end":21},"name":"is_string","qualname":"<Json>::is_string","value":"fn <'a, > (&'a self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a String. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":94533,"byte_end":94542,"line_start":1074,"line_end":1074,"column_start":12,"column_end":21},"name":"as_string","qualname":"<Json>::as_string","value":"fn <'a, > (&'a self) -> Option<&'a str>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a String, returns the associated str.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":94772,"byte_end":94781,"line_start":1082,"line_end":1082,"column_start":12,"column_end":21},"name":"is_number","qualname":"<Json>::is_number","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a Number. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":95011,"byte_end":95017,"line_start":1090,"line_end":1090,"column_start":12,"column_end":18},"name":"is_i64","qualname":"<Json>::is_i64","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a i64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":95217,"byte_end":95223,"line_start":1098,"line_end":1098,"column_start":12,"column_end":18},"name":"is_u64","qualname":"<Json>::is_u64","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a u64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":95423,"byte_end":95429,"line_start":1106,"line_end":1106,"column_start":12,"column_end":18},"name":"is_f64","qualname":"<Json>::is_f64","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a f64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":95654,"byte_end":95660,"line_start":1115,"line_end":1115,"column_start":12,"column_end":18},"name":"as_i64","qualname":"<Json>::as_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a number, return or cast it to a i64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":95995,"byte_end":96001,"line_start":1126,"line_end":1126,"column_start":12,"column_end":18},"name":"as_u64","qualname":"<Json>::as_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a number, return or cast it to a u64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":96288,"byte_end":96294,"line_start":1136,"line_end":1136,"column_start":12,"column_end":18},"name":"as_f64","qualname":"<Json>::as_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a number, return or cast it to a f64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":96594,"byte_end":96604,"line_start":1146,"line_end":1146,"column_start":12,"column_end":22},"name":"is_boolean","qualname":"<Json>::is_boolean","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a Boolean. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":96777,"byte_end":96787,"line_start":1152,"line_end":1152,"column_start":12,"column_end":22},"name":"as_boolean","qualname":"<Json>::as_boolean","value":"fn (&self) -> Option<bool>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a Boolean, returns the associated bool.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97001,"byte_end":97008,"line_start":1160,"line_end":1160,"column_start":12,"column_end":19},"name":"is_null","qualname":"<Json>::is_null","value":"fn (&self) -> bool","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" Returns true if the Json value is a Null. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1368},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97158,"byte_end":97165,"line_start":1166,"line_end":1166,"column_start":12,"column_end":19},"name":"as_null","qualname":"<Json>::as_null","value":"fn (&self) -> Option<()>","parent":{"krate":0,"index":6108},"children":[],"decl_id":null,"docs":" If the Json value is a Null, returns ().\n Returns None otherwise.\n"},{"kind":"Enum","id":{"krate":0,"index":6675},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97776,"byte_end":97785,"line_start":1195,"line_end":1195,"column_start":10,"column_end":19},"name":"JsonEvent","qualname":"::json::JsonEvent","value":"JsonEvent::{ObjectStart, ObjectEnd, ArrayStart, ArrayEnd, BooleanValue, I64Value, U64Value, F64Value, StringValue, NullValue, Error}","parent":null,"children":[{"krate":0,"index":6676},{"krate":0,"index":6677},{"krate":0,"index":6678},{"krate":0,"index":6679},{"krate":0,"index":6680},{"krate":0,"index":6682},{"krate":0,"index":6684},{"krate":0,"index":6686},{"krate":0,"index":6688},{"krate":0,"index":6690},{"krate":0,"index":6691}],"decl_id":null,"docs":" The output of the streaming parser.\n"},{"kind":"Tuple","id":{"krate":0,"index":6676},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97792,"byte_end":97803,"line_start":1196,"line_end":1196,"column_start":5,"column_end":16},"name":"ObjectStart","qualname":"::json::JsonEvent::ObjectStart","value":"JsonEvent::ObjectStart","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6677},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97809,"byte_end":97818,"line_start":1197,"line_end":1197,"column_start":5,"column_end":14},"name":"ObjectEnd","qualname":"::json::JsonEvent::ObjectEnd","value":"JsonEvent::ObjectEnd","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6678},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97824,"byte_end":97834,"line_start":1198,"line_end":1198,"column_start":5,"column_end":15},"name":"ArrayStart","qualname":"::json::JsonEvent::ArrayStart","value":"JsonEvent::ArrayStart","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6679},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97840,"byte_end":97848,"line_start":1199,"line_end":1199,"column_start":5,"column_end":13},"name":"ArrayEnd","qualname":"::json::JsonEvent::ArrayEnd","value":"JsonEvent::ArrayEnd","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6680},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97854,"byte_end":97866,"line_start":1200,"line_end":1200,"column_start":5,"column_end":17},"name":"BooleanValue","qualname":"::json::JsonEvent::BooleanValue","value":"JsonEvent::BooleanValue(bool)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6682},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97878,"byte_end":97886,"line_start":1201,"line_end":1201,"column_start":5,"column_end":13},"name":"I64Value","qualname":"::json::JsonEvent::I64Value","value":"JsonEvent::I64Value(i64)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6684},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97897,"byte_end":97905,"line_start":1202,"line_end":1202,"column_start":5,"column_end":13},"name":"U64Value","qualname":"::json::JsonEvent::U64Value","value":"JsonEvent::U64Value(u64)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6686},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97916,"byte_end":97924,"line_start":1203,"line_end":1203,"column_start":5,"column_end":13},"name":"F64Value","qualname":"::json::JsonEvent::F64Value","value":"JsonEvent::F64Value(f64)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6688},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97935,"byte_end":97946,"line_start":1204,"line_end":1204,"column_start":5,"column_end":16},"name":"StringValue","qualname":"::json::JsonEvent::StringValue","value":"JsonEvent::StringValue(string::String)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6690},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97968,"byte_end":97977,"line_start":1205,"line_end":1205,"column_start":5,"column_end":14},"name":"NullValue","qualname":"::json::JsonEvent::NullValue","value":"JsonEvent::NullValue","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6691},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":97983,"byte_end":97988,"line_start":1206,"line_end":1206,"column_start":5,"column_end":10},"name":"Error","qualname":"::json::JsonEvent::Error","value":"JsonEvent::Error(ParserError)","parent":{"krate":0,"index":6675},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6750},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98117,"byte_end":98127,"line_start":1212,"line_end":1212,"column_start":5,"column_end":15},"name":"ParseArray","qualname":"::json::ParserState::ParseArray","value":"ParserState::ParseArray(bool)","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6752},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98193,"byte_end":98208,"line_start":1214,"line_end":1214,"column_start":5,"column_end":20},"name":"ParseArrayComma","qualname":"::json::ParserState::ParseArrayComma","value":"ParserState::ParseArrayComma","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6753},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98279,"byte_end":98290,"line_start":1216,"line_end":1216,"column_start":5,"column_end":16},"name":"ParseObject","qualname":"::json::ParserState::ParseObject","value":"ParserState::ParseObject(bool)","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6755},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98357,"byte_end":98373,"line_start":1218,"line_end":1218,"column_start":5,"column_end":21},"name":"ParseObjectComma","qualname":"::json::ParserState::ParseObjectComma","value":"ParserState::ParseObjectComma","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6756},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98401,"byte_end":98411,"line_start":1220,"line_end":1220,"column_start":5,"column_end":15},"name":"ParseStart","qualname":"::json::ParserState::ParseStart","value":"ParserState::ParseStart","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6757},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98453,"byte_end":98470,"line_start":1222,"line_end":1222,"column_start":5,"column_end":22},"name":"ParseBeforeFinish","qualname":"::json::ParserState::ParseBeforeFinish","value":"ParserState::ParseBeforeFinish","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6758},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98507,"byte_end":98520,"line_start":1224,"line_end":1224,"column_start":5,"column_end":18},"name":"ParseFinished","qualname":"::json::ParserState::ParseFinished","value":"ParserState::ParseFinished","parent":{"krate":0,"index":6749},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1383},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98672,"byte_end":98677,"line_start":1230,"line_end":1230,"column_start":12,"column_end":17},"name":"Stack","qualname":"::json::Stack","value":"Stack { stack, str_buffer }","parent":null,"children":[{"krate":0,"index":1384},{"krate":0,"index":1385}],"decl_id":null,"docs":" A Stack represents the current position of the parser in the logical\n structure of the JSON stream.\n For example foo.bar[3].x\n"},{"kind":"Enum","id":{"krate":0,"index":6791},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98965,"byte_end":98977,"line_start":1239,"line_end":1239,"column_start":10,"column_end":22},"name":"StackElement","qualname":"::json::StackElement","value":"StackElement::{Index, Key}","parent":null,"children":[{"krate":0,"index":6792},{"krate":0,"index":6794}],"decl_id":null,"docs":" StackElements compose a Stack.\n For example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\n StackElements compositing the stack that represents foo.bar[3].x\n"},{"kind":"Tuple","id":{"krate":0,"index":6792},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":98988,"byte_end":98993,"line_start":1240,"line_end":1240,"column_start":5,"column_end":10},"name":"Index","qualname":"::json::StackElement::Index","value":"StackElement::Index(u32)","parent":{"krate":0,"index":6791},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6794},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99004,"byte_end":99007,"line_start":1241,"line_end":1241,"column_start":5,"column_end":8},"name":"Key","qualname":"::json::StackElement::Key","value":"StackElement::Key(&'l str)","parent":{"krate":0,"index":6791},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6833},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99213,"byte_end":99226,"line_start":1248,"line_end":1248,"column_start":5,"column_end":18},"name":"InternalIndex","qualname":"::json::InternalStackElement::InternalIndex","value":"InternalStackElement::InternalIndex(u32)","parent":{"krate":0,"index":6832},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":6835},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99237,"byte_end":99248,"line_start":1249,"line_end":1249,"column_start":5,"column_end":16},"name":"InternalKey","qualname":"::json::InternalStackElement::InternalKey","value":"InternalStackElement::InternalKey(u16, u16)","parent":{"krate":0,"index":6832},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1387},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99302,"byte_end":99305,"line_start":1253,"line_end":1253,"column_start":12,"column_end":15},"name":"new","qualname":"<Stack>::new","value":"fn () -> Stack","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99450,"byte_end":99453,"line_start":1258,"line_end":1258,"column_start":12,"column_end":15},"name":"len","qualname":"<Stack>::len","value":"fn (&self) -> usize","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns The number of elements in the Stack.\n"},{"kind":"Method","id":{"krate":0,"index":1390},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99547,"byte_end":99555,"line_start":1261,"line_end":1261,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Stack>::is_empty","value":"fn (&self) -> bool","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns true if the stack is empty.\n"},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":99769,"byte_end":99772,"line_start":1266,"line_end":1266,"column_start":12,"column_end":15},"name":"get","qualname":"<Stack>::get","value":"fn <'l, > (&'l self, idx: usize) -> StackElement<'l>","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Provides access to the StackElement at a given index.\n lower indices are at the bottom of the stack while higher indices are\n at the top.\n"},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":100201,"byte_end":100212,"line_start":1277,"line_end":1277,"column_start":12,"column_end":23},"name":"is_equal_to","qualname":"<Stack>::is_equal_to","value":"fn (&self, rhs: &[StackElement]) -> bool","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Compares this stack with an array of StackElements.\n"},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":100564,"byte_end":100575,"line_start":1287,"line_end":1287,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<Stack>::starts_with","value":"fn (&self, rhs: &[StackElement]) -> bool","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns true if the bottom-most elements of this stack are the same as\n the ones passed as parameter.\n"},{"kind":"Method","id":{"krate":0,"index":1407},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":100923,"byte_end":100932,"line_start":1297,"line_end":1297,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<Stack>::ends_with","value":"fn (&self, rhs: &[StackElement]) -> bool","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns true if the top-most elements of this stack are the same as\n the ones passed as parameter.\n"},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":101273,"byte_end":101276,"line_start":1307,"line_end":1307,"column_start":12,"column_end":15},"name":"top","qualname":"<Stack>::top","value":"fn <'l, > (&'l self) -> Option<StackElement<'l>>","parent":{"krate":0,"index":1383},"children":[],"decl_id":null,"docs":" Returns the top-most element (if any).\n"},{"kind":"Struct","id":{"krate":0,"index":1437},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":103322,"byte_end":103328,"line_start":1367,"line_end":1367,"column_start":12,"column_end":18},"name":"Parser","qualname":"::json::Parser","value":"Parser { rdr, ch, line, col, stack, state }","parent":null,"children":[{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443}],"decl_id":null,"docs":" A streaming JSON parser implemented as an iterator of JsonEvent, consuming\n an iterator of char.\n"},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":104327,"byte_end":104330,"line_start":1404,"line_end":1404,"column_start":12,"column_end":15},"name":"new","qualname":"<Parser<T>>::new","value":"fn (rdr: T) -> Parser<T>","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":" Creates the JSON parser.\n"},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":104706,"byte_end":104711,"line_start":1419,"line_end":1419,"column_start":12,"column_end":17},"name":"stack","qualname":"<Parser<T>>::stack","value":"fn <'l, > (&'l self) -> &'l Stack","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":" Provides access to the current position in the logical structure of the\n JSON stream.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":107592,"byte_end":107606,"line_start":1523,"line_end":1523,"column_start":42,"column_end":56},"name":"try_or_invalid","qualname":"try_or_invalid::16877387861782833421","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1568},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":120592,"byte_end":120599,"line_start":1918,"line_end":1918,"column_start":12,"column_end":19},"name":"Builder","qualname":"::json::Builder","value":"Builder { parser, token }","parent":null,"children":[{"krate":0,"index":1569},{"krate":0,"index":1570}],"decl_id":null,"docs":" A Builder consumes a json::Parser to create a generic Json structure.\n"},{"kind":"Method","id":{"krate":0,"index":1574},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":120747,"byte_end":120750,"line_start":1925,"line_end":1925,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder<T>>::new","value":"fn (src: T) -> Builder<T>","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":" Create a JSON Builder.\n"},{"kind":"Method","id":{"krate":0,"index":1576},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":120894,"byte_end":120899,"line_start":1930,"line_end":1930,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder<T>>::build","value":"fn (&mut self) -> Result<Json, BuilderError>","parent":{"krate":0,"index":1568},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1615},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":123593,"byte_end":123600,"line_start":2010,"line_end":2010,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::json::Decoder","value":"Decoder { stack }","parent":null,"children":[{"krate":0,"index":1616}],"decl_id":null,"docs":" A structure to decode JSON to values in rust.\n"},{"kind":"Method","id":{"krate":0,"index":1618},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":123732,"byte_end":123735,"line_start":2016,"line_end":2016,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder>::new","value":"fn (json: Json) -> Decoder","parent":{"krate":0,"index":1615},"children":[],"decl_id":null,"docs":" Creates a new decoder instance for decoding the specified JSON value.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":123994,"byte_end":124000,"line_start":2030,"line_end":2030,"column_start":14,"column_end":20},"name":"expect","qualname":"expect::10402600072461907508","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":124505,"byte_end":124519,"line_start":2049,"line_end":2049,"column_start":14,"column_end":28},"name":"read_primitive","qualname":"read_primitive::2137133903494347758","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":1791},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":134454,"byte_end":134460,"line_start":2348,"line_end":2348,"column_start":11,"column_end":17},"name":"ToJson","qualname":"::json::ToJson","value":"ToJson","parent":null,"children":[{"krate":0,"index":1792}],"decl_id":null,"docs":" A trait for converting values to JSON\n"},{"kind":"Method","id":{"krate":0,"index":1792},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":134530,"byte_end":134537,"line_start":2350,"line_end":2350,"column_start":8,"column_end":15},"name":"to_json","qualname":"::json::ToJson::to_json","value":"fn (&self) -> Json","parent":{"krate":0,"index":1791},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an instance of JSON\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":134570,"byte_end":134586,"line_start":2353,"line_end":2353,"column_start":14,"column_end":30},"name":"to_json_impl_i64","qualname":"to_json_impl_i64::16877091351869863157","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":134791,"byte_end":134807,"line_start":2363,"line_end":2363,"column_start":14,"column_end":30},"name":"to_json_impl_u64","qualname":"to_json_impl_u64::12539092904063120384","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":135759,"byte_end":135769,"line_start":2408,"line_end":2408,"column_start":14,"column_end":24},"name":"tuple_impl","qualname":"tuple_impl::18224095848846593856","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.19/src/json.rs","byte_start":139169,"byte_end":139175,"line_start":2528,"line_end":2528,"column_start":12,"column_end":18},"name":"indent","qualname":"<AsPrettyJson<'a, T>>::indent","value":"fn (mut self, indent: u32) -> AsPrettyJson<'a, T>","parent":{"krate":0,"index":954},"children":[],"decl_id":null,"docs":" Set the indentation level for the emitted JSON\n"}],"refs":[],"macro_refs":[]}