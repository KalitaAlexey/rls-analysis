{"kind":"JsonApi","prelude":{"crate_name":"syn","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"unicode_xid","num":13,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"quote","num":12,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":0,"byte_end":4104,"line_start":1,"line_end":149,"column_start":1,"column_end":1}},"imports":[{"kind":"Use","id":{"krate":0,"index":187},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":442,"byte_end":451,"line_start":25,"line_end":25,"column_start":19,"column_end":28},"name":"ConstExpr","value":""},{"kind":"Use","id":{"krate":0,"index":348},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":1039,"byte_end":1044,"line_start":46,"line_end":46,"column_start":16,"column_end":21},"name":"Ident","value":""},{"kind":"GlobUse","id":{"krate":0,"index":1825},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":2052,"byte_end":2053,"line_start":84,"line_end":84,"column_start":18,"column_end":19},"name":"*","value":""}],"defs":[{"kind":"Enum","id":{"krate":0,"index":1846},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":4340,"byte_end":4347,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"IResult","qualname":"::nom::IResult","value":"IResult::{Done, Error}","parent":null,"children":[{"krate":0,"index":1847},{"krate":0,"index":1850}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":1847},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":4505,"byte_end":4509,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Done","qualname":"::nom::IResult::Done","value":"IResult::Done(I, O)","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":" indicates a correct parsing, the first field containing the rest of the\n unparsed data, the second field contains the parsed data\n"},{"kind":"Tuple","id":{"krate":0,"index":1850},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":4521,"byte_end":4526,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Error","qualname":"::nom::IResult::Error","value":"IResult::Error","parent":{"krate":0,"index":1846},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":7},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":8968,"byte_end":8973,"line_start":161,"line_end":161,"column_start":8,"column_end":13},"name":"many0","qualname":"::nom::many0","value":"fn <'a, T> (mut input: &'a str, f: fn(&'a str) -> IResult<&'a str, T>) -> IResult<&'a str, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":16},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":10559,"byte_end":10568,"line_start":218,"line_end":218,"column_start":8,"column_end":17},"name":"str_chars","qualname":"::nom::str_chars","value":"fn (s: &str) -> Vec<char>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/helper.rs","byte_start":19570,"byte_end":19575,"line_start":10,"line_end":10,"column_start":8,"column_end":13},"name":"punct","qualname":"::helper::punct","value":"fn <'a, > (input: &'a str, token: &'static str) -> IResult<&'a str, &'a str>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":29},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/helper.rs","byte_start":20021,"byte_end":20028,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"keyword","qualname":"::helper::keyword","value":"fn <'a, > (input: &'a str, token: &'static str) -> IResult<&'a str, &'a str>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":34},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/helper.rs","byte_start":21963,"byte_end":21977,"line_start":97,"line_end":97,"column_start":8,"column_end":22},"name":"separated_list","qualname":"::helper::separated_list","value":"fn <'a, T> (mut input: &'a str, sep: &'static str, f: fn(&'a str) -> IResult<&'a str, T>, terminated: bool) -> IResult<&'a str, Vec<T>>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":52},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/escape.rs","byte_start":23363,"byte_end":23376,"line_start":4,"line_end":4,"column_start":8,"column_end":21},"name":"cooked_string","qualname":"::escape::cooked_string","value":"fn (input: &str) -> IResult<&str, String>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":64},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/escape.rs","byte_start":25106,"byte_end":25117,"line_start":53,"line_end":53,"column_start":8,"column_end":19},"name":"cooked_char","qualname":"::escape::cooked_char","value":"fn (input: &str) -> IResult<&str, char>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":75},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/escape.rs","byte_start":25915,"byte_end":25925,"line_start":78,"line_end":78,"column_start":8,"column_end":18},"name":"raw_string","qualname":"::escape::raw_string","value":"fn (input: &str) -> IResult<&str, (String, usize)>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/escape.rs","byte_start":26612,"byte_end":26621,"line_start":101,"line_end":101,"column_start":14,"column_end":23},"name":"next_char","qualname":"next_char::18165451649352688128","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1916},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29103,"byte_end":29112,"line_start":7,"line_end":7,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::attr::Attribute","value":"Attribute { style, value, is_sugared_doc }","parent":null,"children":[{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1919}],"decl_id":null,"docs":" Doc-comments are promoted to attributes that have `is_sugared_doc` = true\n"},{"kind":"Field","id":{"krate":0,"index":1917},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29123,"byte_end":29128,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"name":"style","qualname":"::attr::Attribute::style","value":"","parent":{"krate":0,"index":1916},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":1918},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29149,"byte_end":29154,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"value","qualname":"::attr::Attribute::value","value":"","parent":{"krate":0,"index":1916},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":1919},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29174,"byte_end":29188,"line_start":10,"line_end":10,"column_start":9,"column_end":23},"name":"is_sugared_doc","qualname":"::attr::Attribute::is_sugared_doc","value":"","parent":{"krate":0,"index":1916},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29227,"byte_end":29231,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"name","qualname":"<Attribute>::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":1916},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":1956},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29527,"byte_end":29536,"line_start":23,"line_end":23,"column_start":10,"column_end":19},"name":"AttrStyle","qualname":"::attr::AttrStyle","value":"AttrStyle::{Outer, Inner}","parent":null,"children":[{"krate":0,"index":1957},{"krate":0,"index":1958}],"decl_id":null,"docs":" Distinguishes between Attributes that decorate items and Attributes that\n are contained as statements within items. These two cases need to be\n distinguished for pretty-printing.\n"},{"kind":"Tuple","id":{"krate":0,"index":1957},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29543,"byte_end":29548,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Outer","qualname":"::attr::AttrStyle::Outer","value":"AttrStyle::Outer","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":1958},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29554,"byte_end":29559,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Inner","qualname":"::attr::AttrStyle::Inner","value":"AttrStyle::Inner","parent":{"krate":0,"index":1956},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":1978},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29711,"byte_end":29719,"line_start":32,"line_end":32,"column_start":10,"column_end":18},"name":"MetaItem","qualname":"::attr::MetaItem","value":"MetaItem::{Word, List, NameValue}","parent":null,"children":[{"krate":0,"index":1979},{"krate":0,"index":1981},{"krate":0,"index":1984}],"decl_id":null,"docs":" A compile-time attribute item.\n\n E.g. `#[test]`, `#[derive(..)]` or `#[feature = \"foo\"]`\n"},{"kind":"Tuple","id":{"krate":0,"index":1979},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29794,"byte_end":29798,"line_start":36,"line_end":36,"column_start":5,"column_end":9},"name":"Word","qualname":"::attr::MetaItem::Word","value":"MetaItem::Word(Ident)","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" Word meta item.\n\n E.g. `test` as in `#[test]`\n"},{"kind":"Tuple","id":{"krate":0,"index":1981},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":29891,"byte_end":29895,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"List","qualname":"::attr::MetaItem::List","value":"MetaItem::List(Ident, Vec<MetaItem>)","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" List meta item.\n\n E.g. `derive(..)` as in `#[derive(..)]`\n"},{"kind":"Tuple","id":{"krate":0,"index":1984},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30019,"byte_end":30028,"line_start":44,"line_end":44,"column_start":5,"column_end":14},"name":"NameValue","qualname":"::attr::MetaItem::NameValue","value":"MetaItem::NameValue(Ident, Lit)","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":" Name value meta item.\n\n E.g. `feature = \"foo\"` as in `#[feature = \"foo\"]`\n"},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30072,"byte_end":30076,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"name","qualname":"<MetaItem>::name","value":"fn (&self) -> &str","parent":{"krate":0,"index":1978},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":114},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30289,"byte_end":30300,"line_start":57,"line_end":57,"column_start":11,"column_end":22},"name":"FilterAttrs","qualname":"::attr::FilterAttrs","value":"FilterAttrs<'a>","parent":null,"children":[{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30361,"byte_end":30366,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"outer","qualname":"::attr::FilterAttrs::outer","value":"fn (self) -> Self::Ret","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30394,"byte_end":30399,"line_start":61,"line_end":61,"column_start":8,"column_end":13},"name":"inner","qualname":"::attr::FilterAttrs::inner","value":"fn (self) -> Self::Ret","parent":{"krate":0,"index":114},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":134},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","byte_start":30983,"byte_end":30990,"line_start":85,"line_end":85,"column_start":9,"column_end":16},"name":"parsing","qualname":"::attr::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/attr.rs","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":2041},{"krate":0,"index":2085}],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":4544,"byte_end":4549,"line_start":13,"line_end":13,"column_start":14,"column_end":19},"name":"named","qualname":"named::15669499684456323320","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2112},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":36684,"byte_end":36693,"line_start":4,"line_end":4,"column_start":10,"column_end":19},"name":"ConstExpr","qualname":"::constant::ConstExpr","value":"ConstExpr::{Call, Binary, Unary, Lit, Cast, Path}","parent":null,"children":[{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2120},{"krate":0,"index":2123},{"krate":0,"index":2125},{"krate":0,"index":2128}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2113},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":36843,"byte_end":36847,"line_start":9,"line_end":9,"column_start":5,"column_end":9},"name":"Call","qualname":"::constant::ConstExpr::Call","value":"ConstExpr::Call(Box<ConstExpr>, Vec<ConstExpr>)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" A function call\n\n The first field resolves to the function itself,\n and the second field is the list of arguments\n"},{"kind":"Tuple","id":{"krate":0,"index":2116},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":36944,"byte_end":36950,"line_start":11,"line_end":11,"column_start":5,"column_end":11},"name":"Binary","qualname":"::constant::ConstExpr::Binary","value":"ConstExpr::Binary(BinOp, Box<ConstExpr>, Box<ConstExpr>)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" A binary operation (For example: `a + b`, `a * b`)\n"},{"kind":"Tuple","id":{"krate":0,"index":2120},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":37047,"byte_end":37052,"line_start":13,"line_end":13,"column_start":5,"column_end":10},"name":"Unary","qualname":"::constant::ConstExpr::Unary","value":"ConstExpr::Unary(UnOp, Box<ConstExpr>)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" A unary operation (For example: `!x`, `*x`)\n"},{"kind":"Tuple","id":{"krate":0,"index":2123},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":37126,"byte_end":37129,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Lit","qualname":"::constant::ConstExpr::Lit","value":"ConstExpr::Lit(Lit)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" A literal (For example: `1`, `\"foo\"`)\n"},{"kind":"Tuple","id":{"krate":0,"index":2125},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":37170,"byte_end":37174,"line_start":17,"line_end":17,"column_start":5,"column_end":9},"name":"Cast","qualname":"::constant::ConstExpr::Cast","value":"ConstExpr::Cast(Box<ConstExpr>, Box<Ty>)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" A cast (`foo as f64`)\n"},{"kind":"Tuple","id":{"krate":0,"index":2128},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":37312,"byte_end":37316,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Path","qualname":"::constant::ConstExpr::Path","value":"ConstExpr::Path(Path)","parent":{"krate":0,"index":2112},"children":[],"decl_id":null,"docs":" Variable reference, possibly containing `::` and/or type\n parameters, e.g. foo::bar::<baz>.\n"},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","byte_start":37363,"byte_end":37370,"line_start":24,"line_end":24,"column_start":9,"column_end":16},"name":"parsing","qualname":"::constant::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/constant.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":2223},{"krate":0,"index":2253},{"krate":0,"index":2260},{"krate":0,"index":2266},{"krate":0,"index":2274},{"krate":0,"index":2278}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2284},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40036,"byte_end":40043,"line_start":4,"line_end":4,"column_start":12,"column_end":19},"name":"Variant","qualname":"::data::Variant","value":"Variant { ident, attrs, data, discriminant }","parent":null,"children":[{"krate":0,"index":2285},{"krate":0,"index":2286},{"krate":0,"index":2287},{"krate":0,"index":2288}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2285},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40054,"byte_end":40059,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"ident","qualname":"::data::Variant::ident","value":"","parent":{"krate":0,"index":2284},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2286},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40076,"byte_end":40081,"line_start":6,"line_end":6,"column_start":9,"column_end":14},"name":"attrs","qualname":"::data::Variant::attrs","value":"","parent":{"krate":0,"index":2284},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2287},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40107,"byte_end":40111,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"name":"data","qualname":"::data::Variant::data","value":"","parent":{"krate":0,"index":2284},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2288},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40180,"byte_end":40192,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"name":"discriminant","qualname":"::data::Variant::discriminant","value":"","parent":{"krate":0,"index":2284},"children":[],"decl_id":null,"docs":" Explicit discriminant, e.g. `Foo = 1`\n"},{"kind":"Enum","id":{"krate":0,"index":2331},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40264,"byte_end":40275,"line_start":13,"line_end":13,"column_start":10,"column_end":21},"name":"VariantData","qualname":"::data::VariantData","value":"VariantData::{Struct, Tuple, Unit}","parent":null,"children":[{"krate":0,"index":2332},{"krate":0,"index":2334},{"krate":0,"index":2336}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2332},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40282,"byte_end":40288,"line_start":14,"line_end":14,"column_start":5,"column_end":11},"name":"Struct","qualname":"::data::VariantData::Struct","value":"VariantData::Struct(Vec<Field>)","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2334},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40306,"byte_end":40311,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Tuple","qualname":"::data::VariantData::Tuple","value":"VariantData::Tuple(Vec<Field>)","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2336},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40329,"byte_end":40333,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Unit","qualname":"::data::VariantData::Unit","value":"VariantData::Unit","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40368,"byte_end":40374,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"fields","qualname":"<VariantData>::fields","value":"fn (&self) -> &[Field]","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40584,"byte_end":40594,"line_start":28,"line_end":28,"column_start":12,"column_end":22},"name":"fields_mut","qualname":"<VariantData>::fields_mut","value":"fn (&mut self) -> &mut [Field]","parent":{"krate":0,"index":2331},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2373},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40865,"byte_end":40870,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"Field","qualname":"::data::Field","value":"Field { ident, vis, attrs, ty }","parent":null,"children":[{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2376},{"krate":0,"index":2377}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2374},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40881,"byte_end":40886,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"name":"ident","qualname":"::data::Field::ident","value":"","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2375},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40911,"byte_end":40914,"line_start":40,"line_end":40,"column_start":9,"column_end":12},"name":"vis","qualname":"::data::Field::vis","value":"","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2376},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40936,"byte_end":40941,"line_start":41,"line_end":41,"column_start":9,"column_end":14},"name":"attrs","qualname":"::data::Field::attrs","value":"","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2377},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":40967,"byte_end":40969,"line_start":42,"line_end":42,"column_start":9,"column_end":11},"name":"ty","qualname":"::data::Field::ty","value":"","parent":{"krate":0,"index":2373},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2420},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":41032,"byte_end":41042,"line_start":46,"line_end":46,"column_start":10,"column_end":20},"name":"Visibility","qualname":"::data::Visibility","value":"Visibility::{Public, Inherited}","parent":null,"children":[{"krate":0,"index":2421},{"krate":0,"index":2422}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2421},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":41049,"byte_end":41055,"line_start":47,"line_end":47,"column_start":5,"column_end":11},"name":"Public","qualname":"::data::Visibility::Public","value":"Visibility::Public","parent":{"krate":0,"index":2420},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2422},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":41061,"byte_end":41070,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Inherited","qualname":"::data::Visibility::Inherited","value":"Visibility::Inherited","parent":{"krate":0,"index":2420},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":199},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","byte_start":41111,"byte_end":41118,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"parsing","qualname":"::data::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/data.rs","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":2442},{"krate":0,"index":2457},{"krate":0,"index":2464},{"krate":0,"index":2493},{"krate":0,"index":2500},{"krate":0,"index":2507},{"krate":0,"index":2522},{"krate":0,"index":2533}],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/nom.rs","byte_start":17944,"byte_end":17952,"line_start":451,"line_end":451,"column_start":14,"column_end":22},"name":"do_parse","qualname":"do_parse::9860128853622557470","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2541},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":45272,"byte_end":45280,"line_start":6,"line_end":6,"column_start":12,"column_end":20},"name":"Generics","qualname":"::generics::Generics","value":"Generics { lifetimes, ty_params, where_clause }","parent":null,"children":[{"krate":0,"index":2542},{"krate":0,"index":2543},{"krate":0,"index":2544}],"decl_id":null,"docs":" Represents lifetimes and type parameters attached to a declaration\n of a function, enum, trait, etc.\n"},{"kind":"Field","id":{"krate":0,"index":2542},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":45291,"byte_end":45300,"line_start":7,"line_end":7,"column_start":9,"column_end":18},"name":"lifetimes","qualname":"::generics::Generics::lifetimes","value":"","parent":{"krate":0,"index":2541},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2543},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":45328,"byte_end":45337,"line_start":8,"line_end":8,"column_start":9,"column_end":18},"name":"ty_params","qualname":"::generics::Generics::ty_params","value":"","parent":{"krate":0,"index":2541},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2544},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":45361,"byte_end":45373,"line_start":9,"line_end":9,"column_start":9,"column_end":21},"name":"where_clause","qualname":"::generics::Generics::where_clause","value":"","parent":{"krate":0,"index":2541},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":46013,"byte_end":46027,"line_start":32,"line_end":32,"column_start":12,"column_end":26},"name":"split_for_impl","qualname":"<Generics>::split_for_impl","value":"fn (&self) -> (Generics, Generics, WhereClause)","parent":{"krate":0,"index":2541},"children":[],"decl_id":null,"docs":" Split a type's generics into the pieces required for impl'ing a trait\n for that type.\n\n ```\n # extern crate syn;\n # #[macro_use]\n # extern crate quote;\n # fn main() {\n # let generics: syn::Generics = Default::default();\n # let name = syn::Ident::new(\"MyType\");\n let (impl_generics, ty_generics, where_clause) = generics.split_for_impl();\n quote! {\n     impl #impl_generics MyTrait for #name #ty_generics #where_clause {\n         // ...\n     }\n }\n # ;\n # }\n ```\n"},{"kind":"Struct","id":{"krate":0,"index":2583},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":47600,"byte_end":47608,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"Lifetime","qualname":"::generics::Lifetime","value":"Lifetime { ident }","parent":null,"children":[{"krate":0,"index":2584}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2584},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":47619,"byte_end":47624,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"name":"ident","qualname":"::generics::Lifetime::ident","value":"","parent":{"krate":0,"index":2583},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":47663,"byte_end":47666,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<Lifetime>::new","value":"fn <T> (t: T) -> Self","parent":{"krate":0,"index":2583},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2612},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48062,"byte_end":48073,"line_start":98,"line_end":98,"column_start":12,"column_end":23},"name":"LifetimeDef","qualname":"::generics::LifetimeDef","value":"LifetimeDef { lifetime, bounds }","parent":null,"children":[{"krate":0,"index":2613},{"krate":0,"index":2614}],"decl_id":null,"docs":" A lifetime definition, e.g. `'a: 'b+'c+'d`\n"},{"kind":"Field","id":{"krate":0,"index":2613},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48084,"byte_end":48092,"line_start":99,"line_end":99,"column_start":9,"column_end":17},"name":"lifetime","qualname":"::generics::LifetimeDef::lifetime","value":"","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2614},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48112,"byte_end":48118,"line_start":100,"line_end":100,"column_start":9,"column_end":15},"name":"bounds","qualname":"::generics::LifetimeDef::bounds","value":"","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48168,"byte_end":48171,"line_start":104,"line_end":104,"column_start":12,"column_end":15},"name":"new","qualname":"<LifetimeDef>::new","value":"fn <T> (t: T) -> Self","parent":{"krate":0,"index":2612},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2645},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48367,"byte_end":48374,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"TyParam","qualname":"::generics::TyParam","value":"TyParam { ident, bounds, default }","parent":null,"children":[{"krate":0,"index":2646},{"krate":0,"index":2647},{"krate":0,"index":2648}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2646},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48385,"byte_end":48390,"line_start":114,"line_end":114,"column_start":9,"column_end":14},"name":"ident","qualname":"::generics::TyParam::ident","value":"","parent":{"krate":0,"index":2645},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2647},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48407,"byte_end":48413,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"name":"bounds","qualname":"::generics::TyParam::bounds","value":"","parent":{"krate":0,"index":2645},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2648},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48442,"byte_end":48449,"line_start":116,"line_end":116,"column_start":9,"column_end":16},"name":"default","qualname":"::generics::TyParam::default","value":"","parent":{"krate":0,"index":2645},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2685},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48727,"byte_end":48739,"line_start":124,"line_end":124,"column_start":10,"column_end":22},"name":"TyParamBound","qualname":"::generics::TyParamBound","value":"TyParamBound::{Trait, Region}","parent":null,"children":[{"krate":0,"index":2686},{"krate":0,"index":2689}],"decl_id":null,"docs":" The AST represents all type param bounds as types.\n `typeck::collect::compute_bounds` matches these against\n the \"special\" built-in traits (see `middle::lang_items`) and\n detects Copy, Send and Sync.\n"},{"kind":"Tuple","id":{"krate":0,"index":2686},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48746,"byte_end":48751,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Trait","qualname":"::generics::TyParamBound::Trait","value":"TyParamBound::Trait(PolyTraitRef, TraitBoundModifier)","parent":{"krate":0,"index":2685},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2689},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":48791,"byte_end":48797,"line_start":126,"line_end":126,"column_start":5,"column_end":11},"name":"Region","qualname":"::generics::TyParamBound::Region","value":"TyParamBound::Region(Lifetime)","parent":{"krate":0,"index":2685},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2732},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49015,"byte_end":49033,"line_start":132,"line_end":132,"column_start":10,"column_end":28},"name":"TraitBoundModifier","qualname":"::generics::TraitBoundModifier","value":"TraitBoundModifier::{None, Maybe}","parent":null,"children":[{"krate":0,"index":2733},{"krate":0,"index":2734}],"decl_id":null,"docs":" A modifier on a bound, currently this is only used for `?Sized`, where the\n modifier is `Maybe`. Negative bounds should also be handled here.\n"},{"kind":"Tuple","id":{"krate":0,"index":2733},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49040,"byte_end":49044,"line_start":133,"line_end":133,"column_start":5,"column_end":9},"name":"None","qualname":"::generics::TraitBoundModifier::None","value":"TraitBoundModifier::None","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2734},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49050,"byte_end":49055,"line_start":134,"line_end":134,"column_start":5,"column_end":10},"name":"Maybe","qualname":"::generics::TraitBoundModifier::Maybe","value":"TraitBoundModifier::Maybe","parent":{"krate":0,"index":2732},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":2754},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49156,"byte_end":49167,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"WhereClause","qualname":"::generics::WhereClause","value":"WhereClause { predicates }","parent":null,"children":[{"krate":0,"index":2755}],"decl_id":null,"docs":" A `where` clause in a definition\n"},{"kind":"Field","id":{"krate":0,"index":2755},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49178,"byte_end":49188,"line_start":140,"line_end":140,"column_start":9,"column_end":19},"name":"predicates","qualname":"::generics::WhereClause::predicates","value":"","parent":{"krate":0,"index":2754},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49244,"byte_end":49248,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"none","qualname":"<WhereClause>::none","value":"fn () -> Self","parent":{"krate":0,"index":2754},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2782},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49408,"byte_end":49422,"line_start":151,"line_end":151,"column_start":10,"column_end":24},"name":"WherePredicate","qualname":"::generics::WherePredicate","value":"WherePredicate::{BoundPredicate, RegionPredicate}","parent":null,"children":[{"krate":0,"index":2783},{"krate":0,"index":2785}],"decl_id":null,"docs":" A single predicate in a `where` clause\n"},{"kind":"Tuple","id":{"krate":0,"index":2783},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49487,"byte_end":49501,"line_start":153,"line_end":153,"column_start":5,"column_end":19},"name":"BoundPredicate","qualname":"::generics::WherePredicate::BoundPredicate","value":"WherePredicate::BoundPredicate(WhereBoundPredicate)","parent":{"krate":0,"index":2782},"children":[],"decl_id":null,"docs":" A type binding, e.g. `for<'c> Foo: Send+Clone+'c`\n"},{"kind":"Tuple","id":{"krate":0,"index":2785},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49575,"byte_end":49590,"line_start":155,"line_end":155,"column_start":5,"column_end":20},"name":"RegionPredicate","qualname":"::generics::WherePredicate::RegionPredicate","value":"WherePredicate::RegionPredicate(WhereRegionPredicate)","parent":{"krate":0,"index":2782},"children":[],"decl_id":null,"docs":" A lifetime predicate, e.g. `'a: 'b+'c`\n"},{"kind":"Struct","id":{"krate":0,"index":2822},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49727,"byte_end":49746,"line_start":162,"line_end":162,"column_start":12,"column_end":31},"name":"WhereBoundPredicate","qualname":"::generics::WhereBoundPredicate","value":"WhereBoundPredicate { bound_lifetimes, bounded_ty, bounds }","parent":null,"children":[{"krate":0,"index":2823},{"krate":0,"index":2824},{"krate":0,"index":2825}],"decl_id":null,"docs":" A type bound.\n\n E.g. `for<'c> Foo: Send+Clone+'c`\n"},{"kind":"Field","id":{"krate":0,"index":2823},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49800,"byte_end":49815,"line_start":164,"line_end":164,"column_start":9,"column_end":24},"name":"bound_lifetimes","qualname":"::generics::WhereBoundPredicate::bound_lifetimes","value":"","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" Any lifetimes from a `for` binding\n"},{"kind":"Field","id":{"krate":0,"index":2824},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49874,"byte_end":49884,"line_start":166,"line_end":166,"column_start":9,"column_end":19},"name":"bounded_ty","qualname":"::generics::WhereBoundPredicate::bounded_ty","value":"","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" The type being bounded\n"},{"kind":"Field","id":{"krate":0,"index":2825},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":49955,"byte_end":49961,"line_start":168,"line_end":168,"column_start":9,"column_end":15},"name":"bounds","qualname":"::generics::WhereBoundPredicate::bounds","value":"","parent":{"krate":0,"index":2822},"children":[],"decl_id":null,"docs":" Trait and lifetime bounds (`Clone+Send+'static`)\n"},{"kind":"Struct","id":{"krate":0,"index":2862},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":50086,"byte_end":50106,"line_start":175,"line_end":175,"column_start":12,"column_end":32},"name":"WhereRegionPredicate","qualname":"::generics::WhereRegionPredicate","value":"WhereRegionPredicate { lifetime, bounds }","parent":null,"children":[{"krate":0,"index":2863},{"krate":0,"index":2864}],"decl_id":null,"docs":" A lifetime predicate.\n\n E.g. `'a: 'b+'c`\n"},{"kind":"Field","id":{"krate":0,"index":2863},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":50117,"byte_end":50125,"line_start":176,"line_end":176,"column_start":9,"column_end":17},"name":"lifetime","qualname":"::generics::WhereRegionPredicate::lifetime","value":"","parent":{"krate":0,"index":2862},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":2864},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":50145,"byte_end":50151,"line_start":177,"line_end":177,"column_start":9,"column_end":15},"name":"bounds","qualname":"::generics::WhereRegionPredicate::bounds","value":"","parent":{"krate":0,"index":2862},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":256},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","byte_start":50207,"byte_end":50214,"line_start":181,"line_end":181,"column_start":9,"column_end":16},"name":"parsing","qualname":"::generics::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/generics.rs","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":2895},{"krate":0,"index":2931},{"krate":0,"index":2945},{"krate":0,"index":2968},{"krate":0,"index":2978},{"krate":0,"index":3012},{"krate":0,"index":3030},{"krate":0,"index":3050}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":3086},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ident.rs","byte_start":57440,"byte_end":57445,"line_start":4,"line_end":4,"column_start":12,"column_end":17},"name":"Ident","qualname":"::ident::Ident","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ident.rs","byte_start":57480,"byte_end":57483,"line_start":7,"line_end":7,"column_start":12,"column_end":15},"name":"new","qualname":"<Ident>::new","value":"fn <T> (t: T) -> Self","parent":{"krate":0,"index":3086},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":336},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ident.rs","byte_start":58240,"byte_end":58247,"line_start":51,"line_end":51,"column_start":9,"column_end":16},"name":"parsing","qualname":"::ident::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ident.rs","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":338},{"krate":0,"index":339},{"krate":0,"index":3108}],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3123},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":58863,"byte_end":58866,"line_start":5,"line_end":5,"column_start":10,"column_end":13},"name":"Lit","qualname":"::lit::Lit","value":"Lit::{Str, ByteStr, Byte, Char, Int, Float, Bool}","parent":null,"children":[{"krate":0,"index":3124},{"krate":0,"index":3127},{"krate":0,"index":3129},{"krate":0,"index":3131},{"krate":0,"index":3133},{"krate":0,"index":3136},{"krate":0,"index":3139}],"decl_id":null,"docs":" Literal kind.\n\n E.g. `\"foo\"`, `42`, `12.34` or `bool`\n"},{"kind":"Tuple","id":{"krate":0,"index":3124},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":58908,"byte_end":58911,"line_start":7,"line_end":7,"column_start":5,"column_end":8},"name":"Str","qualname":"::lit::Lit::Str","value":"Lit::Str(String, StrStyle)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A string literal (`\"foo\"`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3127},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":58968,"byte_end":58975,"line_start":9,"line_end":9,"column_start":5,"column_end":12},"name":"ByteStr","qualname":"::lit::Lit::ByteStr","value":"Lit::ByteStr(Vec<u8>)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A byte string (`b\"foo\"`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3129},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59019,"byte_end":59023,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Byte","qualname":"::lit::Lit::Byte","value":"Lit::Byte(u8)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A byte char (`b'f'`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3131},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59069,"byte_end":59073,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Char","qualname":"::lit::Lit::Char","value":"Lit::Char(char)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A character literal (`'a'`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3133},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59118,"byte_end":59121,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"Int","qualname":"::lit::Lit::Int","value":"Lit::Int(u64, IntTy)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" An integer literal (`1`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3136},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59197,"byte_end":59202,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Float","qualname":"::lit::Lit::Float","value":"Lit::Float(String, FloatTy)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A float literal (`1f64` or `1E10f64` or `1.0E10`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3139},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59251,"byte_end":59255,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Bool","qualname":"::lit::Lit::Bool","value":"Lit::Bool(bool)","parent":{"krate":0,"index":3123},"children":[],"decl_id":null,"docs":" A boolean literal\n"},{"kind":"Enum","id":{"krate":0,"index":3229},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59320,"byte_end":59328,"line_start":23,"line_end":23,"column_start":10,"column_end":18},"name":"StrStyle","qualname":"::lit::StrStyle","value":"StrStyle::{Cooked, Raw}","parent":null,"children":[{"krate":0,"index":3230},{"krate":0,"index":3231}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3230},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59374,"byte_end":59380,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Cooked","qualname":"::lit::StrStyle::Cooked","value":"StrStyle::Cooked","parent":{"krate":0,"index":3229},"children":[],"decl_id":null,"docs":" A regular string, like `\"foo\"`\n"},{"kind":"Tuple","id":{"krate":0,"index":3231},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59485,"byte_end":59488,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"name":"Raw","qualname":"::lit::StrStyle::Raw","value":"StrStyle::Raw(usize)","parent":{"krate":0,"index":3229},"children":[],"decl_id":null,"docs":" A raw string, like `r##\"foo\"##`\n\n The uint is the number of `#` symbols used\n"},{"kind":"Enum","id":{"krate":0,"index":3262},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59554,"byte_end":59559,"line_start":33,"line_end":33,"column_start":10,"column_end":15},"name":"IntTy","qualname":"::lit::IntTy","value":"IntTy::{Isize, I8, I16, I32, I64, Usize, U8, U16, U32, U64, Unsuffixed}","parent":null,"children":[{"krate":0,"index":3263},{"krate":0,"index":3264},{"krate":0,"index":3265},{"krate":0,"index":3266},{"krate":0,"index":3267},{"krate":0,"index":3268},{"krate":0,"index":3269},{"krate":0,"index":3270},{"krate":0,"index":3271},{"krate":0,"index":3272},{"krate":0,"index":3273}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3263},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59566,"byte_end":59571,"line_start":34,"line_end":34,"column_start":5,"column_end":10},"name":"Isize","qualname":"::lit::IntTy::Isize","value":"IntTy::Isize","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3264},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59577,"byte_end":59579,"line_start":35,"line_end":35,"column_start":5,"column_end":7},"name":"I8","qualname":"::lit::IntTy::I8","value":"IntTy::I8","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3265},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59585,"byte_end":59588,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"I16","qualname":"::lit::IntTy::I16","value":"IntTy::I16","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3266},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59594,"byte_end":59597,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"I32","qualname":"::lit::IntTy::I32","value":"IntTy::I32","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3267},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59603,"byte_end":59606,"line_start":38,"line_end":38,"column_start":5,"column_end":8},"name":"I64","qualname":"::lit::IntTy::I64","value":"IntTy::I64","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3268},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59612,"byte_end":59617,"line_start":39,"line_end":39,"column_start":5,"column_end":10},"name":"Usize","qualname":"::lit::IntTy::Usize","value":"IntTy::Usize","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3269},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59623,"byte_end":59625,"line_start":40,"line_end":40,"column_start":5,"column_end":7},"name":"U8","qualname":"::lit::IntTy::U8","value":"IntTy::U8","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3270},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59631,"byte_end":59634,"line_start":41,"line_end":41,"column_start":5,"column_end":8},"name":"U16","qualname":"::lit::IntTy::U16","value":"IntTy::U16","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3271},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59640,"byte_end":59643,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"U32","qualname":"::lit::IntTy::U32","value":"IntTy::U32","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3272},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59649,"byte_end":59652,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"U64","qualname":"::lit::IntTy::U64","value":"IntTy::U64","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3273},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59658,"byte_end":59668,"line_start":44,"line_end":44,"column_start":5,"column_end":15},"name":"Unsuffixed","qualname":"::lit::IntTy::Unsuffixed","value":"IntTy::Unsuffixed","parent":{"krate":0,"index":3262},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3302},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59727,"byte_end":59734,"line_start":48,"line_end":48,"column_start":10,"column_end":17},"name":"FloatTy","qualname":"::lit::FloatTy","value":"FloatTy::{F32, F64, Unsuffixed}","parent":null,"children":[{"krate":0,"index":3303},{"krate":0,"index":3304},{"krate":0,"index":3305}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3303},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59741,"byte_end":59744,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"F32","qualname":"::lit::FloatTy::F32","value":"FloatTy::F32","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3304},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59750,"byte_end":59753,"line_start":50,"line_end":50,"column_start":5,"column_end":8},"name":"F64","qualname":"::lit::FloatTy::F64","value":"FloatTy::F64","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3305},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59759,"byte_end":59769,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"Unsuffixed","qualname":"::lit::FloatTy::Unsuffixed","value":"FloatTy::Unsuffixed","parent":{"krate":0,"index":3302},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":350},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":59810,"byte_end":59817,"line_start":55,"line_end":55,"column_start":9,"column_end":16},"name":"parsing","qualname":"::lit::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":3326},{"krate":0,"index":3343},{"krate":0,"index":3360},{"krate":0,"index":3370},{"krate":0,"index":3394},{"krate":0,"index":3402},{"krate":0,"index":3409},{"krate":0,"index":355}],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":355},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lit.rs","byte_start":62137,"byte_end":62143,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"digits","qualname":"::lit::parsing::digits","value":"fn (input: &str) -> IResult<&str, u64>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":3468},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65638,"byte_end":65648,"line_start":4,"line_end":4,"column_start":12,"column_end":22},"name":"MacroInput","qualname":"::macro_input::MacroInput","value":"MacroInput { ident, vis, attrs, generics, body }","parent":null,"children":[{"krate":0,"index":3469},{"krate":0,"index":3470},{"krate":0,"index":3471},{"krate":0,"index":3472},{"krate":0,"index":3473}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3469},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65659,"byte_end":65664,"line_start":5,"line_end":5,"column_start":9,"column_end":14},"name":"ident","qualname":"::macro_input::MacroInput::ident","value":"","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3470},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65681,"byte_end":65684,"line_start":6,"line_end":6,"column_start":9,"column_end":12},"name":"vis","qualname":"::macro_input::MacroInput::vis","value":"","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3471},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65706,"byte_end":65711,"line_start":7,"line_end":7,"column_start":9,"column_end":14},"name":"attrs","qualname":"::macro_input::MacroInput::attrs","value":"","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3472},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65737,"byte_end":65745,"line_start":8,"line_end":8,"column_start":9,"column_end":17},"name":"generics","qualname":"::macro_input::MacroInput::generics","value":"","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3473},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65765,"byte_end":65769,"line_start":9,"line_end":9,"column_start":9,"column_end":13},"name":"body","qualname":"::macro_input::MacroInput::body","value":"","parent":{"krate":0,"index":3468},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3522},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65828,"byte_end":65832,"line_start":13,"line_end":13,"column_start":10,"column_end":14},"name":"Body","qualname":"::macro_input::Body","value":"Body::{Enum, Struct}","parent":null,"children":[{"krate":0,"index":3523},{"krate":0,"index":3525}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3523},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65839,"byte_end":65843,"line_start":14,"line_end":14,"column_start":5,"column_end":9},"name":"Enum","qualname":"::macro_input::Body::Enum","value":"Body::Enum(Vec<Variant>)","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3525},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65863,"byte_end":65869,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"Struct","qualname":"::macro_input::Body::Struct","value":"Body::Struct(VariantData)","parent":{"krate":0,"index":3522},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":399},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","byte_start":65923,"byte_end":65930,"line_start":19,"line_end":19,"column_start":9,"column_end":16},"name":"parsing","qualname":"::macro_input::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/macro_input.rs","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":3562}],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3601},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":68907,"byte_end":68912,"line_start":2,"line_end":2,"column_start":10,"column_end":15},"name":"BinOp","qualname":"::op::BinOp","value":"BinOp::{Add, Sub, Mul, Div, Rem, And, Or, BitXor, BitAnd, BitOr, Shl, Shr, Eq, Lt, Le, Ne, Ge, Gt}","parent":null,"children":[{"krate":0,"index":3602},{"krate":0,"index":3603},{"krate":0,"index":3604},{"krate":0,"index":3605},{"krate":0,"index":3606},{"krate":0,"index":3607},{"krate":0,"index":3608},{"krate":0,"index":3609},{"krate":0,"index":3610},{"krate":0,"index":3611},{"krate":0,"index":3612},{"krate":0,"index":3613},{"krate":0,"index":3614},{"krate":0,"index":3615},{"krate":0,"index":3616},{"krate":0,"index":3617},{"krate":0,"index":3618},{"krate":0,"index":3619}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3602},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":68955,"byte_end":68958,"line_start":4,"line_end":4,"column_start":5,"column_end":8},"name":"Add","qualname":"::op::BinOp::Add","value":"BinOp::Add","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `+` operator (addition)\n"},{"kind":"Tuple","id":{"krate":0,"index":3603},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69003,"byte_end":69006,"line_start":6,"line_end":6,"column_start":5,"column_end":8},"name":"Sub","qualname":"::op::BinOp::Sub","value":"BinOp::Sub","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `-` operator (subtraction)\n"},{"kind":"Tuple","id":{"krate":0,"index":3604},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69054,"byte_end":69057,"line_start":8,"line_end":8,"column_start":5,"column_end":8},"name":"Mul","qualname":"::op::BinOp::Mul","value":"BinOp::Mul","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `*` operator (multiplication)\n"},{"kind":"Tuple","id":{"krate":0,"index":3605},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69099,"byte_end":69102,"line_start":10,"line_end":10,"column_start":5,"column_end":8},"name":"Div","qualname":"::op::BinOp::Div","value":"BinOp::Div","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `/` operator (division)\n"},{"kind":"Tuple","id":{"krate":0,"index":3606},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69143,"byte_end":69146,"line_start":12,"line_end":12,"column_start":5,"column_end":8},"name":"Rem","qualname":"::op::BinOp::Rem","value":"BinOp::Rem","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `%` operator (modulus)\n"},{"kind":"Tuple","id":{"krate":0,"index":3607},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69192,"byte_end":69195,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"And","qualname":"::op::BinOp::And","value":"BinOp::And","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `&&` operator (logical and)\n"},{"kind":"Tuple","id":{"krate":0,"index":3608},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69240,"byte_end":69242,"line_start":16,"line_end":16,"column_start":5,"column_end":7},"name":"Or","qualname":"::op::BinOp::Or","value":"BinOp::Or","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `||` operator (logical or)\n"},{"kind":"Tuple","id":{"krate":0,"index":3609},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69287,"byte_end":69293,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"BitXor","qualname":"::op::BinOp::BitXor","value":"BinOp::BitXor","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `^` operator (bitwise xor)\n"},{"kind":"Tuple","id":{"krate":0,"index":3610},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69338,"byte_end":69344,"line_start":20,"line_end":20,"column_start":5,"column_end":11},"name":"BitAnd","qualname":"::op::BinOp::BitAnd","value":"BinOp::BitAnd","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `&` operator (bitwise and)\n"},{"kind":"Tuple","id":{"krate":0,"index":3611},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69388,"byte_end":69393,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"name":"BitOr","qualname":"::op::BinOp::BitOr","value":"BinOp::BitOr","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `|` operator (bitwise or)\n"},{"kind":"Tuple","id":{"krate":0,"index":3612},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69438,"byte_end":69441,"line_start":24,"line_end":24,"column_start":5,"column_end":8},"name":"Shl","qualname":"::op::BinOp::Shl","value":"BinOp::Shl","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `<<` operator (shift left)\n"},{"kind":"Tuple","id":{"krate":0,"index":3613},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69487,"byte_end":69490,"line_start":26,"line_end":26,"column_start":5,"column_end":8},"name":"Shr","qualname":"::op::BinOp::Shr","value":"BinOp::Shr","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `>>` operator (shift right)\n"},{"kind":"Tuple","id":{"krate":0,"index":3614},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69533,"byte_end":69535,"line_start":28,"line_end":28,"column_start":5,"column_end":7},"name":"Eq","qualname":"::op::BinOp::Eq","value":"BinOp::Eq","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `==` operator (equality)\n"},{"kind":"Tuple","id":{"krate":0,"index":3615},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69578,"byte_end":69580,"line_start":30,"line_end":30,"column_start":5,"column_end":7},"name":"Lt","qualname":"::op::BinOp::Lt","value":"BinOp::Lt","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `<` operator (less than)\n"},{"kind":"Tuple","id":{"krate":0,"index":3616},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69636,"byte_end":69638,"line_start":32,"line_end":32,"column_start":5,"column_end":7},"name":"Le","qualname":"::op::BinOp::Le","value":"BinOp::Le","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `<=` operator (less than or equal to)\n"},{"kind":"Tuple","id":{"krate":0,"index":3617},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69685,"byte_end":69687,"line_start":34,"line_end":34,"column_start":5,"column_end":7},"name":"Ne","qualname":"::op::BinOp::Ne","value":"BinOp::Ne","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `!=` operator (not equal to)\n"},{"kind":"Tuple","id":{"krate":0,"index":3618},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69746,"byte_end":69748,"line_start":36,"line_end":36,"column_start":5,"column_end":7},"name":"Ge","qualname":"::op::BinOp::Ge","value":"BinOp::Ge","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `>=` operator (greater than or equal to)\n"},{"kind":"Tuple","id":{"krate":0,"index":3619},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69794,"byte_end":69796,"line_start":38,"line_end":38,"column_start":5,"column_end":7},"name":"Gt","qualname":"::op::BinOp::Gt","value":"BinOp::Gt","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":" The `>` operator (greater than)\n"},{"kind":"Enum","id":{"krate":0,"index":3655},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69855,"byte_end":69859,"line_start":42,"line_end":42,"column_start":10,"column_end":14},"name":"UnOp","qualname":"::op::UnOp","value":"UnOp::{Deref, Not, Neg}","parent":null,"children":[{"krate":0,"index":3656},{"krate":0,"index":3657},{"krate":0,"index":3658}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3656},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69909,"byte_end":69914,"line_start":44,"line_end":44,"column_start":5,"column_end":10},"name":"Deref","qualname":"::op::UnOp::Deref","value":"UnOp::Deref","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" The `*` operator for dereferencing\n"},{"kind":"Tuple","id":{"krate":0,"index":3657},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":69967,"byte_end":69970,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Not","qualname":"::op::UnOp::Not","value":"UnOp::Not","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" The `!` operator for logical inversion\n"},{"kind":"Tuple","id":{"krate":0,"index":3658},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":70014,"byte_end":70017,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"Neg","qualname":"::op::UnOp::Neg","value":"UnOp::Neg","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":" The `-` operator for negation\n"},{"kind":"Mod","id":{"krate":0,"index":426},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":70058,"byte_end":70065,"line_start":52,"line_end":52,"column_start":9,"column_end":16},"name":"parsing","qualname":"::op::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","parent":null,"children":[{"krate":0,"index":427},{"krate":0,"index":3679},{"krate":0,"index":3735}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":432},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":71998,"byte_end":72000,"line_start":131,"line_end":131,"column_start":16,"column_end":18},"name":"op","qualname":"<BinOp>::op","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":434},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":72731,"byte_end":72740,"line_start":154,"line_end":154,"column_start":16,"column_end":25},"name":"assign_op","qualname":"<BinOp>::assign_op","value":"fn (&self) -> Option<&'static str>","parent":{"krate":0,"index":3601},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/op.rs","byte_start":73455,"byte_end":73457,"line_start":178,"line_end":178,"column_start":16,"column_end":18},"name":"op","qualname":"<UnOp>::op","value":"fn (&self) -> &'static str","parent":{"krate":0,"index":3655},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":451},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/space.rs","byte_start":73836,"byte_end":73846,"line_start":4,"line_end":4,"column_start":8,"column_end":18},"name":"whitespace","qualname":"::space::whitespace","value":"fn (input: &str) -> IResult<&str, ()>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":460},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/space.rs","byte_start":75337,"byte_end":75350,"line_start":56,"line_end":56,"column_start":8,"column_end":21},"name":"block_comment","qualname":"::space::block_comment","value":"fn (input: &str) -> IResult<&str, &str>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":466},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/space.rs","byte_start":75992,"byte_end":76002,"line_start":81,"line_end":81,"column_start":8,"column_end":18},"name":"word_break","qualname":"::space::word_break","value":"fn (input: &str) -> IResult<&str, ()>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3746},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76327,"byte_end":76329,"line_start":5,"line_end":5,"column_start":10,"column_end":12},"name":"Ty","qualname":"::ty::Ty","value":"Ty::{Slice, Array, Ptr, Rptr, BareFn, Never, Tup, Path, ObjectSum, PolyTraitRef, ImplTrait, Paren, Infer}","parent":null,"children":[{"krate":0,"index":3747},{"krate":0,"index":3749},{"krate":0,"index":3752},{"krate":0,"index":3754},{"krate":0,"index":3757},{"krate":0,"index":3759},{"krate":0,"index":3760},{"krate":0,"index":3762},{"krate":0,"index":3765},{"krate":0,"index":3768},{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":3774}],"decl_id":null,"docs":" The different kinds of types recognized by the compiler\n"},{"kind":"Tuple","id":{"krate":0,"index":3747},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76376,"byte_end":76381,"line_start":7,"line_end":7,"column_start":5,"column_end":10},"name":"Slice","qualname":"::ty::Ty::Slice","value":"Ty::Slice(Box<Ty>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A variable-length array (`[T]`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3749},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76436,"byte_end":76441,"line_start":9,"line_end":9,"column_start":5,"column_end":10},"name":"Array","qualname":"::ty::Ty::Array","value":"Ty::Array(Box<Ty>, ConstExpr)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A fixed length array (`[T; n]`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3752},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76514,"byte_end":76517,"line_start":11,"line_end":11,"column_start":5,"column_end":8},"name":"Ptr","qualname":"::ty::Ty::Ptr","value":"Ty::Ptr(Box<MutTy>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A raw pointer (`*const T` or `*mut T`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3754},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76580,"byte_end":76584,"line_start":13,"line_end":13,"column_start":5,"column_end":9},"name":"Rptr","qualname":"::ty::Ty::Rptr","value":"Ty::Rptr(Option<Lifetime>, Box<MutTy>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A reference (`&'a T` or `&'a mut T`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3757},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76671,"byte_end":76677,"line_start":15,"line_end":15,"column_start":5,"column_end":11},"name":"BareFn","qualname":"::ty::Ty::BareFn","value":"Ty::BareFn(Box<BareFnTy>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A bare function (e.g. `fn(usize) -> bool`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3759},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76727,"byte_end":76732,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Never","qualname":"::ty::Ty::Never","value":"Ty::Never","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" The never type (`!`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3760},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76776,"byte_end":76779,"line_start":19,"line_end":19,"column_start":5,"column_end":8},"name":"Tup","qualname":"::ty::Ty::Tup","value":"Ty::Tup(Vec<Ty>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A tuple (`(A, B, C, D, ...)`)\n"},{"kind":"Tuple","id":{"krate":0,"index":3762},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":76974,"byte_end":76978,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"Path","qualname":"::ty::Ty::Path","value":"Ty::Path(Option<QSelf>, Path)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A path (`module::module::...::Type`), optionally\n \"qualified\", e.g. `<Vec<T> as SomeTrait>::SomeType`.\n\n Type parameters are stored in the Path itself\n"},{"kind":"Tuple","id":{"krate":0,"index":3765},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77072,"byte_end":77081,"line_start":26,"line_end":26,"column_start":5,"column_end":14},"name":"ObjectSum","qualname":"::ty::Ty::ObjectSum","value":"Ty::ObjectSum(Box<Ty>, Vec<TyParamBound>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" Something like `A+B`. Note that `B` must always be a path.\n"},{"kind":"Tuple","id":{"krate":0,"index":3768},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77158,"byte_end":77170,"line_start":28,"line_end":28,"column_start":5,"column_end":17},"name":"PolyTraitRef","qualname":"::ty::Ty::PolyTraitRef","value":"Ty::PolyTraitRef(Vec<TyParamBound>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" A type like `for<'a> Foo<&'a Bar>`\n"},{"kind":"Tuple","id":{"krate":0,"index":3770},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77233,"byte_end":77242,"line_start":30,"line_end":30,"column_start":5,"column_end":14},"name":"ImplTrait","qualname":"::ty::Ty::ImplTrait","value":"Ty::ImplTrait(Vec<TyParamBound>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" An `impl TraitA+TraitB` type.\n"},{"kind":"Tuple","id":{"krate":0,"index":3772},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77333,"byte_end":77338,"line_start":32,"line_end":32,"column_start":5,"column_end":10},"name":"Paren","qualname":"::ty::Ty::Paren","value":"Ty::Paren(Box<Ty>)","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" No-op; kept solely so that we can pretty-print faithfully\n"},{"kind":"Tuple","id":{"krate":0,"index":3774},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77490,"byte_end":77495,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"name":"Infer","qualname":"::ty::Ty::Infer","value":"Ty::Infer","parent":{"krate":0,"index":3746},"children":[],"decl_id":null,"docs":" TyKind::Infer means the type should be inferred instead of it having been\n specified. This can appear anywhere in a type.\n"},{"kind":"Struct","id":{"krate":0,"index":3899},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77550,"byte_end":77555,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"MutTy","qualname":"::ty::MutTy","value":"MutTy { ty, mutability }","parent":null,"children":[{"krate":0,"index":3900},{"krate":0,"index":3901}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3900},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77566,"byte_end":77568,"line_start":40,"line_end":40,"column_start":9,"column_end":11},"name":"ty","qualname":"::ty::MutTy::ty","value":"","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3901},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77582,"byte_end":77592,"line_start":41,"line_end":41,"column_start":9,"column_end":19},"name":"mutability","qualname":"::ty::MutTy::mutability","value":"","parent":{"krate":0,"index":3899},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":3932},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77663,"byte_end":77673,"line_start":45,"line_end":45,"column_start":10,"column_end":20},"name":"Mutability","qualname":"::ty::Mutability","value":"Mutability::{Mutable, Immutable}","parent":null,"children":[{"krate":0,"index":3933},{"krate":0,"index":3934}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3933},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77680,"byte_end":77687,"line_start":46,"line_end":46,"column_start":5,"column_end":12},"name":"Mutable","qualname":"::ty::Mutability::Mutable","value":"Mutability::Mutable","parent":{"krate":0,"index":3932},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":3934},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77693,"byte_end":77702,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"Immutable","qualname":"::ty::Mutability::Immutable","value":"Mutability::Immutable","parent":{"krate":0,"index":3932},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":3954},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77950,"byte_end":77954,"line_start":57,"line_end":57,"column_start":12,"column_end":16},"name":"Path","qualname":"::ty::Path","value":"Path { global, segments }","parent":null,"children":[{"krate":0,"index":3955},{"krate":0,"index":3956}],"decl_id":null,"docs":" A \"Path\" is essentially Rust's notion of a name.\n\n It's represented as a sequence of identifiers,\n along with a bunch of supporting information.\n\n E.g. `std::cmp::PartialEq`\n"},{"kind":"Field","id":{"krate":0,"index":3955},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77965,"byte_end":77971,"line_start":58,"line_end":58,"column_start":9,"column_end":15},"name":"global","qualname":"::ty::Path::global","value":"","parent":{"krate":0,"index":3954},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3956},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":77987,"byte_end":77995,"line_start":59,"line_end":59,"column_start":9,"column_end":17},"name":"segments","qualname":"::ty::Path::segments","value":"","parent":{"krate":0,"index":3954},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":3987},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":78388,"byte_end":78399,"line_start":77,"line_end":77,"column_start":12,"column_end":23},"name":"PathSegment","qualname":"::ty::PathSegment","value":"PathSegment { ident, parameters }","parent":null,"children":[{"krate":0,"index":3988},{"krate":0,"index":3989}],"decl_id":null,"docs":" A segment of a path: an identifier, an optional lifetime, and a set of types.\n\n E.g. `std`, `String` or `Box<T>`\n"},{"kind":"Field","id":{"krate":0,"index":3988},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":78410,"byte_end":78415,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"name":"ident","qualname":"::ty::PathSegment::ident","value":"","parent":{"krate":0,"index":3987},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":3989},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":78432,"byte_end":78442,"line_start":79,"line_end":79,"column_start":9,"column_end":19},"name":"parameters","qualname":"::ty::PathSegment::parameters","value":"","parent":{"krate":0,"index":3987},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":4020},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":78828,"byte_end":78842,"line_start":97,"line_end":97,"column_start":10,"column_end":24},"name":"PathParameters","qualname":"::ty::PathParameters","value":"PathParameters::{AngleBracketed, Parenthesized}","parent":null,"children":[{"krate":0,"index":4021},{"krate":0,"index":4023}],"decl_id":null,"docs":" Parameters of a path segment.\n\n E.g. `<A, B>` as in `Foo<A, B>` or `(A, B)` as in `Foo(A, B)`\n"},{"kind":"Tuple","id":{"krate":0,"index":4021},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":78911,"byte_end":78925,"line_start":99,"line_end":99,"column_start":5,"column_end":19},"name":"AngleBracketed","qualname":"::ty::PathParameters::AngleBracketed","value":"PathParameters::AngleBracketed(AngleBracketedParameterData)","parent":{"krate":0,"index":4020},"children":[],"decl_id":null,"docs":" The `<'a, A, B, C>` in `foo::bar::baz::<'a, A, B, C>`\n"},{"kind":"Tuple","id":{"krate":0,"index":4023},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79009,"byte_end":79022,"line_start":101,"line_end":101,"column_start":5,"column_end":18},"name":"Parenthesized","qualname":"::ty::PathParameters::Parenthesized","value":"PathParameters::Parenthesized(ParenthesizedParameterData)","parent":{"krate":0,"index":4020},"children":[],"decl_id":null,"docs":" The `(A, B)` and `C` in `Foo(A, B) -> C`\n"},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79088,"byte_end":79092,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"none","qualname":"<PathParameters>::none","value":"fn () -> Self","parent":{"krate":0,"index":4020},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":4060},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79281,"byte_end":79308,"line_start":112,"line_end":112,"column_start":12,"column_end":39},"name":"AngleBracketedParameterData","qualname":"::ty::AngleBracketedParameterData","value":"AngleBracketedParameterData { lifetimes, types, bindings }","parent":null,"children":[{"krate":0,"index":4061},{"krate":0,"index":4062},{"krate":0,"index":4063}],"decl_id":null,"docs":" A path like `Foo<'a, T>`\n"},{"kind":"Field","id":{"krate":0,"index":4061},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79374,"byte_end":79383,"line_start":114,"line_end":114,"column_start":9,"column_end":18},"name":"lifetimes","qualname":"::ty::AngleBracketedParameterData::lifetimes","value":"","parent":{"krate":0,"index":4060},"children":[],"decl_id":null,"docs":" The lifetime parameters for this path segment.\n"},{"kind":"Field","id":{"krate":0,"index":4062},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79471,"byte_end":79476,"line_start":116,"line_end":116,"column_start":9,"column_end":14},"name":"types","qualname":"::ty::AngleBracketedParameterData::types","value":"","parent":{"krate":0,"index":4060},"children":[],"decl_id":null,"docs":" The type parameters for this path segment, if present.\n"},{"kind":"Field","id":{"krate":0,"index":4063},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79604,"byte_end":79612,"line_start":120,"line_end":120,"column_start":9,"column_end":17},"name":"bindings","qualname":"::ty::AngleBracketedParameterData::bindings","value":"","parent":{"krate":0,"index":4060},"children":[],"decl_id":null,"docs":" Bindings (equality constraints) on associated types, if present.\n\n E.g., `Foo<A=Bar>`.\n"},{"kind":"Struct","id":{"krate":0,"index":4102},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79733,"byte_end":79744,"line_start":125,"line_end":125,"column_start":12,"column_end":23},"name":"TypeBinding","qualname":"::ty::TypeBinding","value":"TypeBinding { ident, ty }","parent":null,"children":[{"krate":0,"index":4103},{"krate":0,"index":4104}],"decl_id":null,"docs":" Bind a type to an associated type: `A=Foo`.\n"},{"kind":"Field","id":{"krate":0,"index":4103},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79755,"byte_end":79760,"line_start":126,"line_end":126,"column_start":9,"column_end":14},"name":"ident","qualname":"::ty::TypeBinding::ident","value":"","parent":{"krate":0,"index":4102},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4104},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79777,"byte_end":79779,"line_start":127,"line_end":127,"column_start":9,"column_end":11},"name":"ty","qualname":"::ty::TypeBinding::ty","value":"","parent":{"krate":0,"index":4102},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":4135},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79870,"byte_end":79896,"line_start":132,"line_end":132,"column_start":12,"column_end":38},"name":"ParenthesizedParameterData","qualname":"::ty::ParenthesizedParameterData","value":"ParenthesizedParameterData { inputs, output }","parent":null,"children":[{"krate":0,"index":4136},{"krate":0,"index":4137}],"decl_id":null,"docs":" A path like `Foo(A,B) -> C`\n"},{"kind":"Field","id":{"krate":0,"index":4136},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79924,"byte_end":79930,"line_start":134,"line_end":134,"column_start":9,"column_end":15},"name":"inputs","qualname":"::ty::ParenthesizedParameterData::inputs","value":"","parent":{"krate":0,"index":4135},"children":[],"decl_id":null,"docs":" `(A, B)`\n"},{"kind":"Field","id":{"krate":0,"index":4137},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":79961,"byte_end":79967,"line_start":136,"line_end":136,"column_start":9,"column_end":15},"name":"output","qualname":"::ty::ParenthesizedParameterData::output","value":"","parent":{"krate":0,"index":4135},"children":[],"decl_id":null,"docs":" `C`\n"},{"kind":"Struct","id":{"krate":0,"index":4168},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80034,"byte_end":80046,"line_start":140,"line_end":140,"column_start":12,"column_end":24},"name":"PolyTraitRef","qualname":"::ty::PolyTraitRef","value":"PolyTraitRef { bound_lifetimes, trait_ref }","parent":null,"children":[{"krate":0,"index":4169},{"krate":0,"index":4170}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4169},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80095,"byte_end":80110,"line_start":142,"line_end":142,"column_start":9,"column_end":24},"name":"bound_lifetimes","qualname":"::ty::PolyTraitRef::bound_lifetimes","value":"","parent":{"krate":0,"index":4168},"children":[],"decl_id":null,"docs":" The `'a` in `<'a> Foo<&'a T>`\n"},{"kind":"Field","id":{"krate":0,"index":4170},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80184,"byte_end":80193,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"name":"trait_ref","qualname":"::ty::PolyTraitRef::trait_ref","value":"","parent":{"krate":0,"index":4168},"children":[],"decl_id":null,"docs":" The `Foo<&'a T>` in `<'a> Foo<&'a T>`\n"},{"kind":"Struct","id":{"krate":0,"index":4201},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80696,"byte_end":80701,"line_start":162,"line_end":162,"column_start":12,"column_end":17},"name":"QSelf","qualname":"::ty::QSelf","value":"QSelf { ty, position }","parent":null,"children":[{"krate":0,"index":4202},{"krate":0,"index":4203}],"decl_id":null,"docs":" The explicit Self type in a \"qualified path\". The actual\n path, including the trait and the associated item, is stored\n separately. `position` represents the index of the associated\n item qualified with this Self type.\n\n ```rust,ignore\n <Vec<T> as a::b::Trait>::AssociatedItem\n  ^~~~~     ~~~~~~~~~~~~~~^\n  ty        position = 3\n\n <Vec<T>>::AssociatedItem\n  ^~~~~    ^\n  ty       position = 0\n ```\n"},{"kind":"Field","id":{"krate":0,"index":4202},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80712,"byte_end":80714,"line_start":163,"line_end":163,"column_start":9,"column_end":11},"name":"ty","qualname":"::ty::QSelf::ty","value":"","parent":{"krate":0,"index":4201},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4203},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80733,"byte_end":80741,"line_start":164,"line_end":164,"column_start":9,"column_end":17},"name":"position","qualname":"::ty::QSelf::position","value":"","parent":{"krate":0,"index":4201},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":4234},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80803,"byte_end":80811,"line_start":168,"line_end":168,"column_start":12,"column_end":20},"name":"BareFnTy","qualname":"::ty::BareFnTy","value":"BareFnTy { lifetimes, inputs, output }","parent":null,"children":[{"krate":0,"index":4235},{"krate":0,"index":4236},{"krate":0,"index":4237}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4235},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80822,"byte_end":80831,"line_start":169,"line_end":169,"column_start":9,"column_end":18},"name":"lifetimes","qualname":"::ty::BareFnTy::lifetimes","value":"","parent":{"krate":0,"index":4234},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4236},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80859,"byte_end":80865,"line_start":170,"line_end":170,"column_start":9,"column_end":15},"name":"inputs","qualname":"::ty::BareFnTy::inputs","value":"","parent":{"krate":0,"index":4234},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4237},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":80891,"byte_end":80897,"line_start":171,"line_end":171,"column_start":9,"column_end":15},"name":"output","qualname":"::ty::BareFnTy::output","value":"","parent":{"krate":0,"index":4234},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":4274},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81056,"byte_end":81065,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"BareFnArg","qualname":"::ty::BareFnArg","value":"BareFnArg { name, ty }","parent":null,"children":[{"krate":0,"index":4275},{"krate":0,"index":4276}],"decl_id":null,"docs":" An argument in a function type.\n\n E.g. `bar: usize` as in `fn foo(bar: usize)`\n"},{"kind":"Field","id":{"krate":0,"index":4275},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81076,"byte_end":81080,"line_start":179,"line_end":179,"column_start":9,"column_end":13},"name":"name","qualname":"::ty::BareFnArg::name","value":"","parent":{"krate":0,"index":4274},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":4276},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81105,"byte_end":81107,"line_start":180,"line_end":180,"column_start":9,"column_end":11},"name":"ty","qualname":"::ty::BareFnArg::ty","value":"","parent":{"krate":0,"index":4274},"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":4307},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81164,"byte_end":81177,"line_start":184,"line_end":184,"column_start":10,"column_end":23},"name":"FunctionRetTy","qualname":"::ty::FunctionRetTy","value":"FunctionRetTy::{Default, Ty}","parent":null,"children":[{"krate":0,"index":4308},{"krate":0,"index":4309}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":4308},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81367,"byte_end":81374,"line_start":190,"line_end":190,"column_start":5,"column_end":12},"name":"Default","qualname":"::ty::FunctionRetTy::Default","value":"FunctionRetTy::Default","parent":{"krate":0,"index":4307},"children":[],"decl_id":null,"docs":" Return type is not specified.\n\n Functions default to `()` and\n closures default to inference. Span points to where return\n type would be inserted.\n"},{"kind":"Tuple","id":{"krate":0,"index":4309},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81404,"byte_end":81406,"line_start":192,"line_end":192,"column_start":5,"column_end":7},"name":"Ty","qualname":"::ty::FunctionRetTy::Ty","value":"FunctionRetTy::Ty(Ty)","parent":{"krate":0,"index":4307},"children":[],"decl_id":null,"docs":" Everything else\n"},{"kind":"Mod","id":{"krate":0,"index":482},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","byte_start":81451,"byte_end":81458,"line_start":196,"line_end":196,"column_start":9,"column_end":16},"name":"parsing","qualname":"::ty::parsing","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/ty.rs","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484},{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":4340},{"krate":0,"index":4354},{"krate":0,"index":4361},{"krate":0,"index":4372},{"krate":0,"index":4387},{"krate":0,"index":4401},{"krate":0,"index":4435},{"krate":0,"index":4440},{"krate":0,"index":4447},{"krate":0,"index":4477},{"krate":0,"index":4495},{"krate":0,"index":4536},{"krate":0,"index":4547},{"krate":0,"index":4560},{"krate":0,"index":4567},{"krate":0,"index":4575},{"krate":0,"index":4592},{"krate":0,"index":4664},{"krate":0,"index":4673},{"krate":0,"index":4690}],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":572},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":1957,"byte_end":1962,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"name":"aster","qualname":"::aster","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","parent":null,"children":[{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":699},{"krate":0,"index":724},{"krate":0,"index":737},{"krate":0,"index":789},{"krate":0,"index":970},{"krate":0,"index":1045},{"krate":0,"index":1368},{"krate":0,"index":1507},{"krate":0,"index":1643},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1649},{"krate":0,"index":1650}],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":574},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97457,"byte_end":97465,"line_start":3,"line_end":3,"column_start":9,"column_end":17},"name":"generics","qualname":"::aster::generics","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","parent":null,"children":[{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":587},{"krate":0,"index":591},{"krate":0,"index":681},{"krate":0,"index":687},{"krate":0,"index":693}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":581},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":98368,"byte_end":98383,"line_start":8,"line_end":8,"column_start":12,"column_end":27},"name":"GenericsBuilder","qualname":"::aster::generics::GenericsBuilder","value":"GenericsBuilder { callback, lifetimes, ty_params, predicates }","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":98553,"byte_end":98556,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<GenericsBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":98636,"byte_end":98649,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"from_generics","qualname":"<GenericsBuilder>::from_generics","value":"fn (generics: Generics) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":98832,"byte_end":98845,"line_start":28,"line_end":28,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<GenericsBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":595},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":99061,"byte_end":99088,"line_start":37,"line_end":37,"column_start":12,"column_end":39},"name":"from_generics_with_callback","qualname":"<GenericsBuilder<F>>::from_generics_with_callback","value":"fn (generics: Generics, callback: F) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":99362,"byte_end":99366,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"with","qualname":"<GenericsBuilder<F>>::with","value":"fn (self, generics: Generics) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":99616,"byte_end":99630,"line_start":52,"line_end":52,"column_start":12,"column_end":26},"name":"with_lifetimes","qualname":"<GenericsBuilder<F>>::with_lifetimes","value":"fn <I, L> (mut self, iter: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":99902,"byte_end":99921,"line_start":61,"line_end":61,"column_start":12,"column_end":31},"name":"with_lifetime_names","qualname":"<GenericsBuilder<F>>::with_lifetime_names","value":"fn <I, N> (mut self, iter: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100144,"byte_end":100157,"line_start":71,"line_end":71,"column_start":12,"column_end":25},"name":"with_lifetime","qualname":"<GenericsBuilder<F>>::with_lifetime","value":"fn (mut self, lifetime: LifetimeDef) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100271,"byte_end":100284,"line_start":76,"line_end":76,"column_start":12,"column_end":25},"name":"lifetime_name","qualname":"<GenericsBuilder<F>>::lifetime_name","value":"fn <N> (self, name: N) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100400,"byte_end":100408,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<GenericsBuilder<F>>::lifetime","value":"fn <N> (self, name: N) -> LifetimeDefBuilder<Self>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100562,"byte_end":100576,"line_start":88,"line_end":88,"column_start":12,"column_end":26},"name":"with_ty_params","qualname":"<GenericsBuilder<F>>::with_ty_params","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100727,"byte_end":100744,"line_start":95,"line_end":95,"column_start":12,"column_end":29},"name":"with_ty_param_ids","qualname":"<GenericsBuilder<F>>::with_ty_param_ids","value":"fn <I, T> (mut self, iter: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":100961,"byte_end":100974,"line_start":105,"line_end":105,"column_start":12,"column_end":25},"name":"with_ty_param","qualname":"<GenericsBuilder<F>>::with_ty_param","value":"fn (mut self, ty_param: TyParam) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":639},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101084,"byte_end":101095,"line_start":110,"line_end":110,"column_start":12,"column_end":23},"name":"ty_param_id","qualname":"<GenericsBuilder<F>>::ty_param_id","value":"fn <I> (self, id: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101207,"byte_end":101215,"line_start":116,"line_end":116,"column_start":12,"column_end":20},"name":"ty_param","qualname":"<GenericsBuilder<F>>::ty_param","value":"fn <I> (self, id: I) -> TyParamBuilder<Self>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101357,"byte_end":101372,"line_start":122,"line_end":122,"column_start":12,"column_end":27},"name":"with_predicates","qualname":"<GenericsBuilder<F>>::with_predicates","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101531,"byte_end":101545,"line_start":129,"line_end":129,"column_start":12,"column_end":26},"name":"with_predicate","qualname":"<GenericsBuilder<F>>::with_predicate","value":"fn (mut self, predicate: WherePredicate) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101665,"byte_end":101674,"line_start":134,"line_end":134,"column_start":12,"column_end":21},"name":"predicate","qualname":"<GenericsBuilder<F>>::predicate","value":"fn (self) -> WherePredicateBuilder<Self>","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":101783,"byte_end":101801,"line_start":138,"line_end":138,"column_start":12,"column_end":30},"name":"add_lifetime_bound","qualname":"<GenericsBuilder<F>>::add_lifetime_bound","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":102275,"byte_end":102293,"line_start":156,"line_end":156,"column_start":12,"column_end":30},"name":"add_ty_param_bound","qualname":"<GenericsBuilder<F>>::add_ty_param_bound","value":"fn <P> (mut self, path: P) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":102648,"byte_end":102660,"line_start":171,"line_end":171,"column_start":12,"column_end":24},"name":"strip_bounds","qualname":"<GenericsBuilder<F>>::strip_bounds","value":"fn (self) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":671},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":102789,"byte_end":102804,"line_start":177,"line_end":177,"column_start":12,"column_end":27},"name":"strip_lifetimes","qualname":"<GenericsBuilder<F>>::strip_lifetimes","value":"fn (mut self) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":674},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":102950,"byte_end":102965,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"strip_ty_params","qualname":"<GenericsBuilder<F>>::strip_ty_params","value":"fn (mut self) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":103111,"byte_end":103127,"line_start":191,"line_end":191,"column_start":12,"column_end":28},"name":"strip_predicates","qualname":"<GenericsBuilder<F>>::strip_predicates","value":"fn (mut self) -> Self","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/generics.rs","byte_start":103213,"byte_end":103218,"line_start":196,"line_end":196,"column_start":12,"column_end":17},"name":"build","qualname":"<GenericsBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":581},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":699},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97475,"byte_end":97480,"line_start":4,"line_end":4,"column_start":9,"column_end":14},"name":"ident","qualname":"::aster::ident","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ident.rs","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":707},{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":719}],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":701},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ident.rs","byte_start":104093,"byte_end":104100,"line_start":3,"line_end":3,"column_start":11,"column_end":18},"name":"ToIdent","qualname":"::aster::ident::ToIdent","value":"ToIdent","parent":null,"children":[{"krate":0,"index":702}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ident.rs","byte_start":104110,"byte_end":104118,"line_start":4,"line_end":4,"column_start":8,"column_end":16},"name":"to_ident","qualname":"::aster::ident::ToIdent::to_ident","value":"fn (&self) -> Ident","parent":{"krate":0,"index":701},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":724},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97490,"byte_end":97496,"line_start":5,"line_end":5,"column_start":9,"column_end":15},"name":"invoke","qualname":"::aster::invoke","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/invoke.rs","parent":null,"children":[{"krate":0,"index":725},{"krate":0,"index":4706},{"krate":0,"index":4708},{"krate":0,"index":4709},{"krate":0,"index":731}],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":725},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/invoke.rs","byte_start":104685,"byte_end":104691,"line_start":1,"line_end":1,"column_start":11,"column_end":17},"name":"Invoke","qualname":"::aster::invoke::Invoke","value":"Invoke<A>","parent":null,"children":[{"krate":0,"index":727},{"krate":0,"index":728}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/invoke.rs","byte_start":104722,"byte_end":104728,"line_start":4,"line_end":4,"column_start":8,"column_end":14},"name":"invoke","qualname":"::aster::invoke::Invoke::invoke","value":"fn (self, arg: A) -> Self::Result","parent":{"krate":0,"index":725},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":4706},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/invoke.rs","byte_start":104797,"byte_end":104805,"line_start":8,"line_end":8,"column_start":12,"column_end":20},"name":"Identity","qualname":"::aster::invoke::Identity","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":737},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97506,"byte_end":97514,"line_start":6,"line_end":6,"column_start":9,"column_end":17},"name":"lifetime","qualname":"::aster::lifetime","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","parent":null,"children":[{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":740},{"krate":0,"index":743},{"krate":0,"index":746},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":759},{"krate":0,"index":763},{"krate":0,"index":766},{"krate":0,"index":771},{"krate":0,"index":775}],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":740},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":105086,"byte_end":105098,"line_start":6,"line_end":6,"column_start":11,"column_end":23},"name":"IntoLifetime","qualname":"::aster::lifetime::IntoLifetime","value":"IntoLifetime","parent":null,"children":[{"krate":0,"index":741}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":105108,"byte_end":105121,"line_start":7,"line_end":7,"column_start":8,"column_end":21},"name":"into_lifetime","qualname":"::aster::lifetime::IntoLifetime::into_lifetime","value":"fn (self) -> Lifetime","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":750},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":105457,"byte_end":105472,"line_start":24,"line_end":24,"column_start":11,"column_end":26},"name":"IntoLifetimeDef","qualname":"::aster::lifetime::IntoLifetimeDef","value":"IntoLifetimeDef","parent":null,"children":[{"krate":0,"index":751}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":105482,"byte_end":105499,"line_start":25,"line_end":25,"column_start":8,"column_end":25},"name":"into_lifetime_def","qualname":"::aster::lifetime::IntoLifetimeDef::into_lifetime_def","value":"fn (self) -> LifetimeDef","parent":{"krate":0,"index":750},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":766},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":106195,"byte_end":106213,"line_start":57,"line_end":57,"column_start":12,"column_end":30},"name":"LifetimeDefBuilder","qualname":"::aster::lifetime::LifetimeDefBuilder","value":"LifetimeDefBuilder { callback, lifetime, bounds }","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":106338,"byte_end":106341,"line_start":64,"line_end":64,"column_start":12,"column_end":15},"name":"new","qualname":"<LifetimeDefBuilder>::new","value":"fn <N> (name: N) -> Self","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":106540,"byte_end":106553,"line_start":74,"line_end":74,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<LifetimeDefBuilder<F>>::with_callback","value":"fn <N> (name: N, callback: F) -> Self","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":106832,"byte_end":106837,"line_start":86,"line_end":86,"column_start":12,"column_end":17},"name":"bound","qualname":"<LifetimeDefBuilder<F>>::bound","value":"fn <N> (mut self, name: N) -> Self","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/lifetime.rs","byte_start":107027,"byte_end":107032,"line_start":95,"line_end":95,"column_start":12,"column_end":17},"name":"build","qualname":"<LifetimeDefBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":789},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97524,"byte_end":97528,"line_start":7,"line_end":7,"column_start":9,"column_end":13},"name":"path","qualname":"::aster::path","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":798},{"krate":0,"index":801},{"krate":0,"index":804},{"krate":0,"index":808},{"krate":0,"index":811},{"krate":0,"index":816},{"krate":0,"index":820},{"krate":0,"index":822},{"krate":0,"index":846},{"krate":0,"index":851},{"krate":0,"index":869},{"krate":0,"index":875},{"krate":0,"index":882},{"krate":0,"index":943},{"krate":0,"index":949},{"krate":0,"index":953},{"krate":0,"index":960},{"krate":0,"index":964}],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":795},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":107553,"byte_end":107561,"line_start":10,"line_end":10,"column_start":11,"column_end":19},"name":"IntoPath","qualname":"::aster::path::IntoPath","value":"IntoPath","parent":null,"children":[{"krate":0,"index":796}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":107571,"byte_end":107580,"line_start":11,"line_end":11,"column_start":8,"column_end":17},"name":"into_path","qualname":"::aster::path::IntoPath::into_path","value":"fn (self) -> Path","parent":{"krate":0,"index":795},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":816},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108242,"byte_end":108253,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"PathBuilder","qualname":"::aster::path::PathBuilder","value":"PathBuilder { callback, global }","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108338,"byte_end":108341,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<PathBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108470,"byte_end":108483,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<PathBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108616,"byte_end":108621,"line_start":69,"line_end":69,"column_start":12,"column_end":17},"name":"build","qualname":"<PathBuilder<F>>::build","value":"fn (self, path: Path) -> F::Result","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":829},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108708,"byte_end":108714,"line_start":73,"line_end":73,"column_start":12,"column_end":18},"name":"global","qualname":"<PathBuilder<F>>::global","value":"fn (mut self) -> Self","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":831},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":108794,"byte_end":108797,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"ids","qualname":"<PathBuilder<F>>::ids","value":"fn <I, T> (self, ids: I) -> PathSegmentsBuilder<F>","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":109065,"byte_end":109067,"line_start":88,"line_end":88,"column_start":12,"column_end":14},"name":"id","qualname":"<PathBuilder<F>>::id","value":"fn <I> (self, id: I) -> PathSegmentsBuilder<F>","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":109192,"byte_end":109199,"line_start":94,"line_end":94,"column_start":12,"column_end":19},"name":"segment","qualname":"<PathBuilder<F>>::segment","value":"fn <I> (self, id: I) -> PathSegmentBuilder<PathSegmentsBuilder<F>>","parent":{"krate":0,"index":816},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":846},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":109755,"byte_end":109774,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"PathSegmentsBuilder","qualname":"::aster::path::PathSegmentsBuilder","value":"PathSegmentsBuilder { callback, global, segments }","parent":null,"children":[{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":109931,"byte_end":109934,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"ids","qualname":"<PathSegmentsBuilder<F>>::ids","value":"fn <I, T> (mut self, ids: I) -> PathSegmentsBuilder<F>","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":110155,"byte_end":110157,"line_start":128,"line_end":128,"column_start":12,"column_end":14},"name":"id","qualname":"<PathSegmentsBuilder<F>>::id","value":"fn <T> (self, id: T) -> PathSegmentsBuilder<F>","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":110282,"byte_end":110289,"line_start":134,"line_end":134,"column_start":12,"column_end":19},"name":"segment","qualname":"<PathSegmentsBuilder<F>>::segment","value":"fn <T> (self, id: T) -> PathSegmentBuilder<Self>","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":110435,"byte_end":110440,"line_start":140,"line_end":140,"column_start":12,"column_end":17},"name":"build","qualname":"<PathSegmentsBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":875},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":110877,"byte_end":110895,"line_start":159,"line_end":159,"column_start":12,"column_end":30},"name":"PathSegmentBuilder","qualname":"::aster::path::PathSegmentBuilder","value":"PathSegmentBuilder { callback, id, lifetimes, tys, bindings }","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":879},{"krate":0,"index":880}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":111103,"byte_end":111116,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<PathSegmentBuilder<F>>::with_callback","value":"fn <I> (id: I, callback: F) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":111397,"byte_end":111410,"line_start":182,"line_end":182,"column_start":12,"column_end":25},"name":"with_generics","qualname":"<PathSegmentBuilder<F>>::with_generics","value":"fn (self, generics: Generics) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":111824,"byte_end":111838,"line_start":196,"line_end":196,"column_start":12,"column_end":26},"name":"with_lifetimes","qualname":"<PathSegmentBuilder<F>>::with_lifetimes","value":"fn <I, L> (mut self, iter: I) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112095,"byte_end":112108,"line_start":205,"line_end":205,"column_start":12,"column_end":25},"name":"with_lifetime","qualname":"<PathSegmentBuilder<F>>::with_lifetime","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112265,"byte_end":112273,"line_start":212,"line_end":212,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<PathSegmentBuilder<F>>::lifetime","value":"fn <N> (self, name: N) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112446,"byte_end":112454,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"with_tys","qualname":"<PathSegmentBuilder<F>>::with_tys","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":918},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112594,"byte_end":112601,"line_start":226,"line_end":226,"column_start":12,"column_end":19},"name":"with_ty","qualname":"<PathSegmentBuilder<F>>::with_ty","value":"fn (mut self, ty: Ty) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112688,"byte_end":112690,"line_start":231,"line_end":231,"column_start":12,"column_end":14},"name":"ty","qualname":"<PathSegmentBuilder<F>>::ty","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112775,"byte_end":112787,"line_start":235,"line_end":235,"column_start":12,"column_end":24},"name":"with_binding","qualname":"<PathSegmentBuilder<F>>::with_binding","value":"fn (mut self, binding: TypeBinding) -> Self","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":112898,"byte_end":112905,"line_start":240,"line_end":240,"column_start":12,"column_end":19},"name":"binding","qualname":"<PathSegmentBuilder<F>>::binding","value":"fn <T> (self, id: T) -> TyBuilder<TypeBindingBuilder<F>>","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":113130,"byte_end":113139,"line_start":249,"line_end":249,"column_start":12,"column_end":21},"name":"no_return","qualname":"<PathSegmentBuilder<F>>::no_return","value":"fn (self) -> F::Result","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":113211,"byte_end":113218,"line_start":253,"line_end":253,"column_start":12,"column_end":19},"name":"return_","qualname":"<PathSegmentBuilder<F>>::return_","value":"fn (self) -> TyBuilder<PathSegmentReturnBuilder<F>>","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":113352,"byte_end":113364,"line_start":257,"line_end":257,"column_start":12,"column_end":24},"name":"build_return","qualname":"<PathSegmentBuilder<F>>::build_return","value":"fn (self, output: Option<Ty>) -> F::Result","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":939},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":113723,"byte_end":113728,"line_start":271,"line_end":271,"column_start":12,"column_end":17},"name":"build","qualname":"<PathSegmentBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":875},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":949},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":114376,"byte_end":114394,"line_start":299,"line_end":299,"column_start":12,"column_end":30},"name":"TypeBindingBuilder","qualname":"::aster::path::TypeBindingBuilder","value":"TypeBindingBuilder { id, builder }","parent":null,"children":[{"krate":0,"index":950},{"krate":0,"index":951}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":960},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/path.rs","byte_start":114852,"byte_end":114876,"line_start":321,"line_end":321,"column_start":12,"column_end":36},"name":"PathSegmentReturnBuilder","qualname":"::aster::path::PathSegmentReturnBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":970},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97538,"byte_end":97543,"line_start":8,"line_end":8,"column_start":9,"column_end":14},"name":"qpath","qualname":"::aster::qpath","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","parent":null,"children":[{"krate":0,"index":971},{"krate":0,"index":972},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":981},{"krate":0,"index":994},{"krate":0,"index":1000},{"krate":0,"index":1004},{"krate":0,"index":1018},{"krate":0,"index":1024},{"krate":0,"index":1029},{"krate":0,"index":1039}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":115387,"byte_end":115399,"line_start":9,"line_end":9,"column_start":12,"column_end":24},"name":"QPathBuilder","qualname":"::aster::qpath::QPathBuilder","value":"QPathBuilder { callback }","parent":null,"children":[{"krate":0,"index":977}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":115467,"byte_end":115470,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<QPathBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":115722,"byte_end":115735,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<QPathBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" Construct a `QPathBuilder` that will call the `callback` with a constructed `QSelf`\n and `Path`.\n"},{"kind":"Method","id":{"krate":0,"index":985},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":115891,"byte_end":115898,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"with_ty","qualname":"<QPathBuilder<F>>::with_ty","value":"fn (self, ty: Ty) -> QPathTyBuilder<F>","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" Build a qualified path first by starting with a type builder.\n"},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":116106,"byte_end":116108,"line_start":37,"line_end":37,"column_start":12,"column_end":14},"name":"ty","qualname":"<QPathBuilder<F>>::ty","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" Build a qualified path first by starting with a type builder.\n"},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":116255,"byte_end":116260,"line_start":42,"line_end":42,"column_start":12,"column_end":17},"name":"build","qualname":"<QPathBuilder<F>>::build","value":"fn (self, qself: QSelf, path: Path) -> F::Result","parent":{"krate":0,"index":976},"children":[],"decl_id":null,"docs":" Build a qualified path with a concrete type and path.\n"},{"kind":"Struct","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":116652,"byte_end":116666,"line_start":59,"line_end":59,"column_start":12,"column_end":26},"name":"QPathTyBuilder","qualname":"::aster::qpath::QPathTyBuilder","value":"QPathTyBuilder { builder, ty }","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":116843,"byte_end":116846,"line_start":68,"line_end":68,"column_start":12,"column_end":15},"name":"as_","qualname":"<QPathTyBuilder<F>>::as_","value":"fn (self) -> PathBuilder<Self>","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":" Build a qualified path with a path builder.\n"},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":116935,"byte_end":116937,"line_start":72,"line_end":72,"column_start":12,"column_end":14},"name":"id","qualname":"<QPathTyBuilder<F>>::id","value":"fn <T> (self, id: T) -> F::Result","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":117148,"byte_end":117155,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"segment","qualname":"<QPathTyBuilder<F>>::segment","value":"fn <T> (self, id: T) -> PathSegmentBuilder<QPathQSelfBuilder<F>>","parent":{"krate":0,"index":1000},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":117898,"byte_end":117915,"line_start":112,"line_end":112,"column_start":12,"column_end":29},"name":"QPathQSelfBuilder","qualname":"::aster::qpath::QPathQSelfBuilder","value":"QPathQSelfBuilder { builder, qself, path }","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1031},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":118065,"byte_end":118067,"line_start":121,"line_end":121,"column_start":12,"column_end":14},"name":"id","qualname":"<QPathQSelfBuilder<F>>::id","value":"fn <T> (self, id: T) -> F::Result","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/qpath.rs","byte_start":118179,"byte_end":118186,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"segment","qualname":"<QPathQSelfBuilder<F>>::segment","value":"fn <T> (self, id: T) -> PathSegmentBuilder<QPathQSelfBuilder<F>>","parent":{"krate":0,"index":1024},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":1045},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97553,"byte_end":97555,"line_start":9,"line_end":9,"column_start":9,"column_end":11},"name":"ty","qualname":"::aster::ty","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","parent":null,"children":[{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1135},{"krate":0,"index":1139},{"krate":0,"index":1145},{"krate":0,"index":1149},{"krate":0,"index":1156},{"krate":0,"index":1160},{"krate":0,"index":1166},{"krate":0,"index":1171},{"krate":0,"index":1185},{"krate":0,"index":1191},{"krate":0,"index":1195},{"krate":0,"index":1202},{"krate":0,"index":1206},{"krate":0,"index":1212},{"krate":0,"index":1217},{"krate":0,"index":1224},{"krate":0,"index":1228},{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1246},{"krate":0,"index":1250},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1266},{"krate":0,"index":1271},{"krate":0,"index":1300},{"krate":0,"index":1306},{"krate":0,"index":1310},{"krate":0,"index":1339},{"krate":0,"index":1345},{"krate":0,"index":1349},{"krate":0,"index":1362}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1053},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":118995,"byte_end":119004,"line_start":11,"line_end":11,"column_start":12,"column_end":21},"name":"TyBuilder","qualname":"::aster::ty::TyBuilder","value":"TyBuilder { callback }","parent":null,"children":[{"krate":0,"index":1054}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119069,"byte_end":119072,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<TyBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119195,"byte_end":119208,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<TyBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119291,"byte_end":119296,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"build","qualname":"<TyBuilder<F>>::build","value":"fn (self, ty: Ty) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119377,"byte_end":119379,"line_start":32,"line_end":32,"column_start":12,"column_end":14},"name":"id","qualname":"<TyBuilder<F>>::id","value":"fn <I> (self, id: I) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1069},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119493,"byte_end":119503,"line_start":38,"line_end":38,"column_start":12,"column_end":22},"name":"build_path","qualname":"<TyBuilder<F>>::build_path","value":"fn (self, path: Path) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119596,"byte_end":119607,"line_start":42,"line_end":42,"column_start":12,"column_end":23},"name":"build_qpath","qualname":"<TyBuilder<F>>::build_qpath","value":"fn (self, qself: QSelf, path: Path) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119721,"byte_end":119725,"line_start":46,"line_end":46,"column_start":12,"column_end":16},"name":"path","qualname":"<TyBuilder<F>>::path","value":"fn (self) -> PathBuilder<TyPathBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119841,"byte_end":119846,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"qpath","qualname":"<TyBuilder<F>>::qpath","value":"fn (self) -> QPathBuilder<TyQPathBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":119966,"byte_end":119971,"line_start":54,"line_end":54,"column_start":12,"column_end":17},"name":"isize","qualname":"<TyBuilder<F>>::isize","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120036,"byte_end":120038,"line_start":58,"line_end":58,"column_start":12,"column_end":14},"name":"i8","qualname":"<TyBuilder<F>>::i8","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120100,"byte_end":120103,"line_start":62,"line_end":62,"column_start":12,"column_end":15},"name":"i16","qualname":"<TyBuilder<F>>::i16","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120166,"byte_end":120169,"line_start":66,"line_end":66,"column_start":12,"column_end":15},"name":"i32","qualname":"<TyBuilder<F>>::i32","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120232,"byte_end":120235,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"i64","qualname":"<TyBuilder<F>>::i64","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120298,"byte_end":120303,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"usize","qualname":"<TyBuilder<F>>::usize","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120368,"byte_end":120370,"line_start":78,"line_end":78,"column_start":12,"column_end":14},"name":"u8","qualname":"<TyBuilder<F>>::u8","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120432,"byte_end":120435,"line_start":82,"line_end":82,"column_start":12,"column_end":15},"name":"u16","qualname":"<TyBuilder<F>>::u16","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120498,"byte_end":120501,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"u32","qualname":"<TyBuilder<F>>::u32","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120564,"byte_end":120567,"line_start":90,"line_end":90,"column_start":12,"column_end":15},"name":"u64","qualname":"<TyBuilder<F>>::u64","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120630,"byte_end":120633,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"f32","qualname":"<TyBuilder<F>>::f32","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120696,"byte_end":120699,"line_start":98,"line_end":98,"column_start":12,"column_end":15},"name":"f64","qualname":"<TyBuilder<F>>::f64","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120762,"byte_end":120766,"line_start":102,"line_end":102,"column_start":12,"column_end":16},"name":"bool","qualname":"<TyBuilder<F>>::bool","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1106},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120830,"byte_end":120834,"line_start":106,"line_end":106,"column_start":12,"column_end":16},"name":"unit","qualname":"<TyBuilder<F>>::unit","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":120903,"byte_end":120908,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"tuple","qualname":"<TyBuilder<F>>::tuple","value":"fn (self) -> TyTupleBuilder<F>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121043,"byte_end":121054,"line_start":117,"line_end":117,"column_start":12,"column_end":23},"name":"build_slice","qualname":"<TyBuilder<F>>::build_slice","value":"fn (self, ty: Ty) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1113},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121146,"byte_end":121151,"line_start":121,"line_end":121,"column_start":12,"column_end":17},"name":"slice","qualname":"<TyBuilder<F>>::slice","value":"fn (self) -> TyBuilder<TySliceBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1115},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121265,"byte_end":121269,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"ref_","qualname":"<TyBuilder<F>>::ref_","value":"fn (self) -> TyRefBuilder<F>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121450,"byte_end":121455,"line_start":133,"line_end":133,"column_start":12,"column_end":17},"name":"never","qualname":"<TyBuilder<F>>::never","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121525,"byte_end":121530,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"infer","qualname":"<TyBuilder<F>>::infer","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1121},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121600,"byte_end":121606,"line_start":141,"line_end":141,"column_start":12,"column_end":18},"name":"option","qualname":"<TyBuilder<F>>::option","value":"fn (self) -> TyBuilder<TyOptionBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1123},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121722,"byte_end":121728,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"result","qualname":"<TyBuilder<F>>::result","value":"fn (self) -> TyBuilder<TyResultOkBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1125},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121848,"byte_end":121860,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"phantom_data","qualname":"<TyBuilder<F>>::phantom_data","value":"fn (self) -> TyBuilder<TyPhantomDataBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1127},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":121986,"byte_end":121990,"line_start":153,"line_end":153,"column_start":12,"column_end":16},"name":"box_","qualname":"<TyBuilder<F>>::box_","value":"fn (self) -> TyBuilder<TyBoxBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":122100,"byte_end":122108,"line_start":157,"line_end":157,"column_start":12,"column_end":20},"name":"iterator","qualname":"<TyBuilder<F>>::iterator","value":"fn (self) -> TyBuilder<TyIteratorBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":122228,"byte_end":122238,"line_start":161,"line_end":161,"column_start":12,"column_end":22},"name":"object_sum","qualname":"<TyBuilder<F>>::object_sum","value":"fn (self) -> TyBuilder<TyObjectSumBuilder<F>>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":122372,"byte_end":122382,"line_start":165,"line_end":165,"column_start":12,"column_end":22},"name":"impl_trait","qualname":"<TyBuilder<F>>::impl_trait","value":"fn (self) -> TyImplTraitTyBuilder<F>","parent":{"krate":0,"index":1053},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1135},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":122619,"byte_end":122632,"line_start":175,"line_end":175,"column_start":12,"column_end":25},"name":"TyPathBuilder","qualname":"::aster::ty::TyPathBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1145},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":122930,"byte_end":122944,"line_start":189,"line_end":189,"column_start":12,"column_end":26},"name":"TyQPathBuilder","qualname":"::aster::ty::TyQPathBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1156},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":123278,"byte_end":123292,"line_start":203,"line_end":203,"column_start":12,"column_end":26},"name":"TySliceBuilder","qualname":"::aster::ty::TySliceBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1166},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":123584,"byte_end":123596,"line_start":217,"line_end":217,"column_start":12,"column_end":24},"name":"TyRefBuilder","qualname":"::aster::ty::TyRefBuilder","value":"TyRefBuilder { builder, lifetime, mutability }","parent":null,"children":[{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1173},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":123753,"byte_end":123757,"line_start":226,"line_end":226,"column_start":12,"column_end":16},"name":"mut_","qualname":"<TyRefBuilder<F>>::mut_","value":"fn (mut self) -> Self","parent":{"krate":0,"index":1166},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1175},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":123856,"byte_end":123864,"line_start":231,"line_end":231,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<TyRefBuilder<F>>::lifetime","value":"fn <N> (mut self, name: N) -> Self","parent":{"krate":0,"index":1166},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":124024,"byte_end":124032,"line_start":238,"line_end":238,"column_start":12,"column_end":20},"name":"build_ty","qualname":"<TyRefBuilder<F>>::build_ty","value":"fn (self, ty: Ty) -> F::Result","parent":{"krate":0,"index":1166},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":124243,"byte_end":124245,"line_start":246,"line_end":246,"column_start":12,"column_end":14},"name":"ty","qualname":"<TyRefBuilder<F>>::ty","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":1166},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1191},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":124586,"byte_end":124601,"line_start":263,"line_end":263,"column_start":12,"column_end":27},"name":"TyOptionBuilder","qualname":"::aster::ty::TyOptionBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1202},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":125104,"byte_end":125121,"line_start":286,"line_end":286,"column_start":12,"column_end":29},"name":"TyResultOkBuilder","qualname":"::aster::ty::TyResultOkBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1212},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":125415,"byte_end":125433,"line_start":298,"line_end":298,"column_start":12,"column_end":30},"name":"TyResultErrBuilder","qualname":"::aster::ty::TyResultErrBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1224},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":125972,"byte_end":125992,"line_start":322,"line_end":322,"column_start":12,"column_end":32},"name":"TyPhantomDataBuilder","qualname":"::aster::ty::TyPhantomDataBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1235},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":126505,"byte_end":126517,"line_start":345,"line_end":345,"column_start":12,"column_end":24},"name":"TyBoxBuilder","qualname":"::aster::ty::TyBoxBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1246},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":127013,"byte_end":127030,"line_start":368,"line_end":368,"column_start":12,"column_end":29},"name":"TyIteratorBuilder","qualname":"::aster::ty::TyIteratorBuilder","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1257},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":127570,"byte_end":127588,"line_start":392,"line_end":392,"column_start":12,"column_end":30},"name":"TyObjectSumBuilder","qualname":"::aster::ty::TyObjectSumBuilder","value":"TyObjectSumBuilder { builder }","parent":null,"children":[{"krate":0,"index":1258}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1266},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":127933,"byte_end":127953,"line_start":410,"line_end":410,"column_start":12,"column_end":32},"name":"TyObjectSumTyBuilder","qualname":"::aster::ty::TyObjectSumTyBuilder","value":"TyObjectSumTyBuilder { builder, ty, bounds }","parent":null,"children":[{"krate":0,"index":1267},{"krate":0,"index":1268},{"krate":0,"index":1269}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1273},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128101,"byte_end":128112,"line_start":419,"line_end":419,"column_start":12,"column_end":23},"name":"with_bounds","qualname":"<TyObjectSumTyBuilder<F>>::with_bounds","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128261,"byte_end":128271,"line_start":426,"line_end":426,"column_start":12,"column_end":22},"name":"with_bound","qualname":"<TyObjectSumTyBuilder<F>>::with_bound","value":"fn (mut self, bound: TyParamBound) -> Self","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1280},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128377,"byte_end":128382,"line_start":431,"line_end":431,"column_start":12,"column_end":17},"name":"bound","qualname":"<TyObjectSumTyBuilder<F>>::bound","value":"fn (self) -> TyParamBoundBuilder<Self>","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1282},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128487,"byte_end":128500,"line_start":435,"line_end":435,"column_start":12,"column_end":25},"name":"with_generics","qualname":"<TyObjectSumTyBuilder<F>>::with_generics","value":"fn (self, generics: Generics) -> Self","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1287},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128665,"byte_end":128679,"line_start":441,"line_end":441,"column_start":12,"column_end":26},"name":"with_lifetimes","qualname":"<TyObjectSumTyBuilder<F>>::with_lifetimes","value":"fn <I, L> (mut self, lifetimes: I) -> Self","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1293},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":128913,"byte_end":128921,"line_start":452,"line_end":452,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<TyObjectSumTyBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> Self","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":129046,"byte_end":129051,"line_start":458,"line_end":458,"column_start":12,"column_end":17},"name":"build","qualname":"<TyObjectSumTyBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1266},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1306},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":129476,"byte_end":129496,"line_start":476,"line_end":476,"column_start":12,"column_end":32},"name":"TyImplTraitTyBuilder","qualname":"::aster::ty::TyImplTraitTyBuilder","value":"TyImplTraitTyBuilder { builder, bounds }","parent":null,"children":[{"krate":0,"index":1307},{"krate":0,"index":1308}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1312},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":129632,"byte_end":129643,"line_start":484,"line_end":484,"column_start":12,"column_end":23},"name":"with_bounds","qualname":"<TyImplTraitTyBuilder<F>>::with_bounds","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":129792,"byte_end":129802,"line_start":491,"line_end":491,"column_start":12,"column_end":22},"name":"with_bound","qualname":"<TyImplTraitTyBuilder<F>>::with_bound","value":"fn (mut self, bound: TyParamBound) -> Self","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":129908,"byte_end":129913,"line_start":496,"line_end":496,"column_start":12,"column_end":17},"name":"bound","qualname":"<TyImplTraitTyBuilder<F>>::bound","value":"fn (self) -> TyParamBoundBuilder<Self>","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":130018,"byte_end":130031,"line_start":500,"line_end":500,"column_start":12,"column_end":25},"name":"with_generics","qualname":"<TyImplTraitTyBuilder<F>>::with_generics","value":"fn (self, generics: Generics) -> Self","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":130196,"byte_end":130210,"line_start":506,"line_end":506,"column_start":12,"column_end":26},"name":"with_lifetimes","qualname":"<TyImplTraitTyBuilder<F>>::with_lifetimes","value":"fn <I, L> (mut self, lifetimes: I) -> Self","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1332},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":130444,"byte_end":130452,"line_start":517,"line_end":517,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<TyImplTraitTyBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> Self","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":130577,"byte_end":130582,"line_start":523,"line_end":523,"column_start":12,"column_end":17},"name":"build","qualname":"<TyImplTraitTyBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1306},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1345},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":130988,"byte_end":131002,"line_start":541,"line_end":541,"column_start":12,"column_end":26},"name":"TyTupleBuilder","qualname":"::aster::ty::TyTupleBuilder","value":"TyTupleBuilder { builder, tys }","parent":null,"children":[{"krate":0,"index":1346},{"krate":0,"index":1347}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":131119,"byte_end":131127,"line_start":549,"line_end":549,"column_start":12,"column_end":20},"name":"with_tys","qualname":"<TyTupleBuilder<F>>::with_tys","value":"fn <I> (mut self, iter: I) -> Self","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":131267,"byte_end":131274,"line_start":556,"line_end":556,"column_start":12,"column_end":19},"name":"with_ty","qualname":"<TyTupleBuilder<F>>::with_ty","value":"fn (mut self, ty: Ty) -> Self","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":131361,"byte_end":131363,"line_start":561,"line_end":561,"column_start":12,"column_end":14},"name":"ty","qualname":"<TyTupleBuilder<F>>::ty","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty.rs","byte_start":131448,"byte_end":131453,"line_start":565,"line_end":565,"column_start":12,"column_end":17},"name":"build","qualname":"<TyTupleBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1345},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":1368},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97565,"byte_end":97573,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"name":"ty_param","qualname":"::aster::ty_param","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","parent":null,"children":[{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1380},{"krate":0,"index":1386},{"krate":0,"index":1419},{"krate":0,"index":1425},{"krate":0,"index":1431},{"krate":0,"index":1437},{"krate":0,"index":1440},{"krate":0,"index":1442},{"krate":0,"index":1470},{"krate":0,"index":1474},{"krate":0,"index":1480},{"krate":0,"index":1485},{"krate":0,"index":1501}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1374},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":132061,"byte_end":132075,"line_start":9,"line_end":9,"column_start":12,"column_end":26},"name":"TyParamBuilder","qualname":"::aster::ty_param::TyParamBuilder","value":"TyParamBuilder { callback, id, bounds, default }","parent":null,"children":[{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1381},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":132216,"byte_end":132219,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<TyParamBuilder>::new","value":"fn <I> (id: I) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1384},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":132343,"byte_end":132356,"line_start":23,"line_end":23,"column_start":12,"column_end":25},"name":"from_ty_param","qualname":"<TyParamBuilder>::from_ty_param","value":"fn (ty_param: TyParam) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":132535,"byte_end":132548,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<TyParamBuilder<F>>::with_callback","value":"fn <I> (id: I, callback: F) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":132786,"byte_end":132813,"line_start":42,"line_end":42,"column_start":12,"column_end":39},"name":"from_ty_param_with_callback","qualname":"<TyParamBuilder<F>>::from_ty_param_with_callback","value":"fn (callback: F, ty_param: TyParam) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1395},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133049,"byte_end":133061,"line_start":51,"line_end":51,"column_start":12,"column_end":24},"name":"with_default","qualname":"<TyParamBuilder<F>>::with_default","value":"fn (mut self, ty: Ty) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133154,"byte_end":133161,"line_start":56,"line_end":56,"column_start":12,"column_end":19},"name":"default","qualname":"<TyParamBuilder<F>>::default","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133246,"byte_end":133256,"line_start":60,"line_end":60,"column_start":12,"column_end":22},"name":"with_bound","qualname":"<TyParamBuilder<F>>::with_bound","value":"fn (mut self, bound: TyParamBound) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133362,"byte_end":133367,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"bound","qualname":"<TyParamBuilder<F>>::bound","value":"fn (self) -> TyParamBoundBuilder<Self>","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1405},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133472,"byte_end":133488,"line_start":69,"line_end":69,"column_start":12,"column_end":28},"name":"with_trait_bound","qualname":"<TyParamBuilder<F>>::with_trait_bound","value":"fn (self, trait_ref: PolyTraitRef) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1408},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133618,"byte_end":133629,"line_start":73,"line_end":73,"column_start":12,"column_end":23},"name":"trait_bound","qualname":"<TyParamBuilder<F>>::trait_bound","value":"fn <P> (self, path: P) -> PolyTraitRefBuilder<Self>","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1412},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":133782,"byte_end":133796,"line_start":79,"line_end":79,"column_start":12,"column_end":26},"name":"lifetime_bound","qualname":"<TyParamBuilder<F>>::lifetime_bound","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":134006,"byte_end":134011,"line_start":88,"line_end":88,"column_start":12,"column_end":17},"name":"build","qualname":"<TyParamBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1374},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1437},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":134864,"byte_end":134883,"line_start":129,"line_end":129,"column_start":12,"column_end":31},"name":"TyParamBoundBuilder","qualname":"::aster::ty_param::TyParamBoundBuilder","value":"TyParamBoundBuilder { callback }","parent":null,"children":[{"krate":0,"index":1438}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":134958,"byte_end":134961,"line_start":134,"line_end":134,"column_start":12,"column_end":15},"name":"new","qualname":"<TyParamBoundBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":135114,"byte_end":135127,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<TyParamBoundBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":135220,"byte_end":135231,"line_start":146,"line_end":146,"column_start":12,"column_end":23},"name":"build_trait","qualname":"<TyParamBoundBuilder<F>>::build_trait","value":"fn (self, poly_trait: PolyTraitRef, modifier: TraitBoundModifier) -> F::Result","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":135426,"byte_end":135432,"line_start":151,"line_end":151,"column_start":12,"column_end":18},"name":"trait_","qualname":"<TyParamBoundBuilder<F>>::trait_","value":"fn <P> (self, path: P) -> PolyTraitRefBuilder<TraitTyParamBoundBuilder<F>>","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":135747,"byte_end":135758,"line_start":162,"line_end":162,"column_start":12,"column_end":23},"name":"maybe_trait","qualname":"<TyParamBoundBuilder<F>>::maybe_trait","value":"fn <P> (self, path: P) -> PolyTraitRefBuilder<TraitTyParamBoundBuilder<F>>","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":136074,"byte_end":136082,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"iterator","qualname":"<TyParamBoundBuilder<F>>::iterator","value":"fn (self, ty: Ty) -> PolyTraitRefBuilder<TraitTyParamBoundBuilder<F>>","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":136430,"byte_end":136438,"line_start":186,"line_end":186,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<TyParamBoundBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> F::Result","parent":{"krate":0,"index":1437},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1470},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":136721,"byte_end":136745,"line_start":196,"line_end":196,"column_start":12,"column_end":36},"name":"TraitTyParamBoundBuilder","qualname":"::aster::ty_param::TraitTyParamBoundBuilder","value":"TraitTyParamBoundBuilder { builder, modifier }","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1480},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":137177,"byte_end":137196,"line_start":213,"line_end":213,"column_start":12,"column_end":31},"name":"PolyTraitRefBuilder","qualname":"::aster::ty_param::PolyTraitRefBuilder","value":"PolyTraitRefBuilder { callback, trait_ref, lifetimes }","parent":null,"children":[{"krate":0,"index":1481},{"krate":0,"index":1482},{"krate":0,"index":1483}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1487},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":137354,"byte_end":137367,"line_start":222,"line_end":222,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<PolyTraitRefBuilder<F>>::with_callback","value":"fn <P> (path: P, callback: F) -> Self","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1491},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":137599,"byte_end":137612,"line_start":232,"line_end":232,"column_start":12,"column_end":25},"name":"with_lifetime","qualname":"<PolyTraitRefBuilder<F>>::with_lifetime","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":137776,"byte_end":137784,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<PolyTraitRefBuilder<F>>::lifetime","value":"fn <N> (self, name: N) -> LifetimeDefBuilder<Self>","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/ty_param.rs","byte_start":137938,"byte_end":137943,"line_start":245,"line_end":245,"column_start":12,"column_end":17},"name":"build","qualname":"<PolyTraitRefBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1480},"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":1507},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97583,"byte_end":97598,"line_start":11,"line_end":11,"column_start":9,"column_end":24},"name":"where_predicate","qualname":"::aster::where_predicate","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1529},{"krate":0,"index":1535},{"krate":0,"index":1538},{"krate":0,"index":1544},{"krate":0,"index":1549},{"krate":0,"index":1573},{"krate":0,"index":1579},{"krate":0,"index":1585},{"krate":0,"index":1591},{"krate":0,"index":1617},{"krate":0,"index":1623},{"krate":0,"index":1629},{"krate":0,"index":1634}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1514},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":138796,"byte_end":138817,"line_start":11,"line_end":11,"column_start":12,"column_end":33},"name":"WherePredicateBuilder","qualname":"::aster::where_predicate::WherePredicateBuilder","value":"WherePredicateBuilder { callback }","parent":null,"children":[{"krate":0,"index":1515}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":138894,"byte_end":138897,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<WherePredicateBuilder>::new","value":"fn () -> Self","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":139056,"byte_end":139069,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"with_callback","qualname":"<WherePredicateBuilder<F>>::with_callback","value":"fn (callback: F) -> Self","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":139164,"byte_end":139169,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"bound","qualname":"<WherePredicateBuilder<F>>::bound","value":"fn (self) -> TyBuilder<Self>","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":139254,"byte_end":139262,"line_start":32,"line_end":32,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<WherePredicateBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> WhereRegionPredicateBuilder<F>","parent":{"krate":0,"index":1514},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1535},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":139961,"byte_end":139987,"line_start":59,"line_end":59,"column_start":12,"column_end":38},"name":"WhereBoundPredicateBuilder","qualname":"::aster::where_predicate::WhereBoundPredicateBuilder","value":"WhereBoundPredicateBuilder { callback }","parent":null,"children":[{"krate":0,"index":1536}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1544},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":140450,"byte_end":140478,"line_start":79,"line_end":79,"column_start":12,"column_end":40},"name":"WhereBoundPredicateTyBuilder","qualname":"::aster::where_predicate::WhereBoundPredicateTyBuilder","value":"WhereBoundPredicateTyBuilder { callback, ty, bound_lifetimes }","parent":null,"children":[{"krate":0,"index":1545},{"krate":0,"index":1546},{"krate":0,"index":1547}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1551},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":140644,"byte_end":140661,"line_start":88,"line_end":88,"column_start":12,"column_end":29},"name":"with_for_lifetime","qualname":"<WhereBoundPredicateTyBuilder<F>>::with_for_lifetime","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1555},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":140831,"byte_end":140843,"line_start":95,"line_end":95,"column_start":12,"column_end":24},"name":"for_lifetime","qualname":"<WhereBoundPredicateTyBuilder<F>>::for_lifetime","value":"fn <N> (self, name: N) -> LifetimeDefBuilder<Self>","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1559},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":140997,"byte_end":141007,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"with_bound","qualname":"<WhereBoundPredicateTyBuilder<F>>::with_bound","value":"fn (self, bound: TyParamBound) -> WhereBoundPredicateTyBoundsBuilder<F>","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1562},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":141297,"byte_end":141302,"line_start":110,"line_end":110,"column_start":12,"column_end":17},"name":"bound","qualname":"<WhereBoundPredicateTyBuilder<F>>::bound","value":"fn (self) -> TyParamBoundBuilder<WhereBoundPredicateTyBoundsBuilder<F>>","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1565},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":141654,"byte_end":141660,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"trait_","qualname":"<WhereBoundPredicateTyBuilder<F>>::trait_","value":"fn <P> (self, path: P) -> PolyTraitRefBuilder<TraitTyParamBoundBuilder<WhereBoundPredicateTyBoundsBuilder<F>>>","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1569},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":141878,"byte_end":141886,"line_start":129,"line_end":129,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<WhereBoundPredicateTyBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> WhereBoundPredicateTyBoundsBuilder<F>","parent":{"krate":0,"index":1544},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1585},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":142617,"byte_end":142651,"line_start":158,"line_end":158,"column_start":12,"column_end":46},"name":"WhereBoundPredicateTyBoundsBuilder","qualname":"::aster::where_predicate::WhereBoundPredicateTyBoundsBuilder","value":"WhereBoundPredicateTyBoundsBuilder { callback, ty, bound_lifetimes, bounds }","parent":null,"children":[{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1588},{"krate":0,"index":1589}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":142854,"byte_end":142871,"line_start":168,"line_end":168,"column_start":12,"column_end":29},"name":"with_for_lifetime","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::with_for_lifetime","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143041,"byte_end":143053,"line_start":175,"line_end":175,"column_start":12,"column_end":24},"name":"for_lifetime","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::for_lifetime","value":"fn <N> (self, name: N) -> LifetimeDefBuilder<Self>","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143207,"byte_end":143217,"line_start":181,"line_end":181,"column_start":12,"column_end":22},"name":"with_bound","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::with_bound","value":"fn (mut self, bound: TyParamBound) -> Self","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1604},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143323,"byte_end":143328,"line_start":186,"line_end":186,"column_start":12,"column_end":17},"name":"bound","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::bound","value":"fn (self) -> TyParamBoundBuilder<Self>","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1606},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143433,"byte_end":143439,"line_start":190,"line_end":190,"column_start":12,"column_end":18},"name":"trait_","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::trait_","value":"fn <P> (self, path: P) -> PolyTraitRefBuilder<TraitTyParamBoundBuilder<Self>>","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1610},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143597,"byte_end":143605,"line_start":196,"line_end":196,"column_start":12,"column_end":20},"name":"lifetime","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::lifetime","value":"fn <L> (self, lifetime: L) -> Self","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":143730,"byte_end":143735,"line_start":202,"line_end":202,"column_start":12,"column_end":17},"name":"build","qualname":"<WhereBoundPredicateTyBoundsBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1585},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1629},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":144566,"byte_end":144593,"line_start":235,"line_end":235,"column_start":12,"column_end":39},"name":"WhereRegionPredicateBuilder","qualname":"::aster::where_predicate::WhereRegionPredicateBuilder","value":"WhereRegionPredicateBuilder { callback, lifetime, bounds }","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632}],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1636},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":144758,"byte_end":144763,"line_start":244,"line_end":244,"column_start":12,"column_end":17},"name":"bound","qualname":"<WhereRegionPredicateBuilder<F>>::bound","value":"fn <L> (mut self, lifetime: L) -> Self","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1640},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/where_predicate.rs","byte_start":144917,"byte_end":144922,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"build","qualname":"<WhereRegionPredicateBuilder<F>>::build","value":"fn (self) -> F::Result","parent":{"krate":0,"index":1629},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1643},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97608,"byte_end":97610,"line_start":13,"line_end":13,"column_start":8,"column_end":10},"name":"id","qualname":"::aster::id","value":"fn <I> (id: I) -> Ident","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1646},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97681,"byte_end":97694,"line_start":19,"line_end":19,"column_start":8,"column_end":21},"name":"from_generics","qualname":"::aster::from_generics","value":"fn (generics: Generics) -> generics::GenericsBuilder","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1648},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97811,"byte_end":97826,"line_start":23,"line_end":23,"column_start":8,"column_end":23},"name":"where_predicate","qualname":"::aster::where_predicate","value":"fn () -> where_predicate::WherePredicateBuilder","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1649},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97933,"byte_end":97935,"line_start":27,"line_end":27,"column_start":8,"column_end":10},"name":"ty","qualname":"::aster::ty","value":"fn () -> ty::TyBuilder","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1650},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/aster/mod.rs","byte_start":97992,"byte_end":97996,"line_start":31,"line_end":31,"column_start":8,"column_end":12},"name":"path","qualname":"::aster::path","value":"fn () -> path::PathBuilder","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":1651},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":1999,"byte_end":2004,"line_start":81,"line_end":81,"column_start":9,"column_end":14},"name":"visit","qualname":"::visit","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1715},{"krate":0,"index":1720},{"krate":0,"index":1724},{"krate":0,"index":1728},{"krate":0,"index":1734},{"krate":0,"index":1739},{"krate":0,"index":1760},{"krate":0,"index":1765},{"krate":0,"index":1769},{"krate":0,"index":1775},{"krate":0,"index":1779},{"krate":0,"index":1786},{"krate":0,"index":1797},{"krate":0,"index":1802},{"krate":0,"index":1806},{"krate":0,"index":1810}],"decl_id":null,"docs":" AST walker. Each overridden visit method has full control over what\n happens with its node, it can do its own traversal of the node's children,\n call `visit::walk_*` to apply the default traversal algorithm, or prevent\n deeper traversal by doing nothing.\n\n Note: it is an important invariant that the default visitor walks the body\n of a function in \"execution order\" (more concretely, reverse post-order\n with respect to the CFG implied by the AST), meaning that if AST node A may\n execute before AST node B, then A is visited first.  The borrow checker in\n particular relies on this property.\n\n Note: walking an AST before macro expansion is probably a bad idea. For\n instance, a walker looking for item names in a module will miss all of\n those that are created by the expansion of a macro.\n"},{"kind":"Trait","id":{"krate":0,"index":1653},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146580,"byte_end":146587,"line_start":29,"line_end":29,"column_start":11,"column_end":18},"name":"Visitor","qualname":"::visit::Visitor","value":"Visitor:  Sized","parent":null,"children":[{"krate":0,"index":1654},{"krate":0,"index":1657},{"krate":0,"index":1660},{"krate":0,"index":1663},{"krate":0,"index":1666},{"krate":0,"index":1669},{"krate":0,"index":1673},{"krate":0,"index":1678},{"krate":0,"index":1681},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1691},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1706},{"krate":0,"index":1709},{"krate":0,"index":1712}],"decl_id":null,"docs":" Each method of the Visitor trait is a hook to be potentially\n overridden.  Each method's default implementation recursively visits\n the substructure of the input via the corresponding `walk` method;\n e.g. the `visit_mod` method by default calls `visit::walk_mod`.\n\n If you want to ensure that your code handles every variant\n explicitly, you need to override each method.  (And you also need\n to monitor future changes to `Visitor` in case a new method with a\n new default implementation gets introduced.)\n"},{"kind":"Method","id":{"krate":0,"index":1654},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146604,"byte_end":146615,"line_start":30,"line_end":30,"column_start":8,"column_end":19},"name":"visit_ident","qualname":"::visit::Visitor::visit_ident","value":"fn (&mut self, _ident: &Ident) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1657},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146653,"byte_end":146670,"line_start":31,"line_end":31,"column_start":8,"column_end":25},"name":"visit_macro_input","qualname":"::visit::Visitor::visit_macro_input","value":"fn (&mut self, macro_input: &MacroInput) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1660},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146767,"byte_end":146775,"line_start":34,"line_end":34,"column_start":8,"column_end":16},"name":"visit_ty","qualname":"::visit::Visitor::visit_ty","value":"fn (&mut self, ty: &Ty) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1663},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146837,"byte_end":146851,"line_start":37,"line_end":37,"column_start":8,"column_end":22},"name":"visit_generics","qualname":"::visit::Visitor::visit_generics","value":"fn (&mut self, generics: &Generics) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":146937,"byte_end":146957,"line_start":40,"line_end":40,"column_start":8,"column_end":28},"name":"visit_ty_param_bound","qualname":"::visit::Visitor::visit_ty_param_bound","value":"fn (&mut self, bound: &TyParamBound) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1669},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147047,"byte_end":147067,"line_start":43,"line_end":43,"column_start":8,"column_end":28},"name":"visit_poly_trait_ref","qualname":"::visit::Visitor::visit_poly_trait_ref","value":"fn (&mut self, trait_ref: &PolyTraitRef, modifier: &TraitBoundModifier) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1673},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147206,"byte_end":147224,"line_start":46,"line_end":46,"column_start":8,"column_end":26},"name":"visit_variant_data","qualname":"::visit::Visitor::visit_variant_data","value":"fn (&mut self, data: &VariantData, _ident: &Ident, _generics: &Generics) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147347,"byte_end":147358,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"visit_field","qualname":"::visit::Visitor::visit_field","value":"fn (&mut self, field: &Field) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147432,"byte_end":147445,"line_start":52,"line_end":52,"column_start":8,"column_end":21},"name":"visit_variant","qualname":"::visit::Visitor::visit_variant","value":"fn (&mut self, variant: &Variant, generics: &Generics) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147558,"byte_end":147572,"line_start":55,"line_end":55,"column_start":8,"column_end":22},"name":"visit_lifetime","qualname":"::visit::Visitor::visit_lifetime","value":"fn (&mut self, _lifetime: &Lifetime) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147616,"byte_end":147634,"line_start":56,"line_end":56,"column_start":8,"column_end":26},"name":"visit_lifetime_def","qualname":"::visit::Visitor::visit_lifetime_def","value":"fn (&mut self, lifetime: &LifetimeDef) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147727,"byte_end":147737,"line_start":59,"line_end":59,"column_start":8,"column_end":18},"name":"visit_path","qualname":"::visit::Visitor::visit_path","value":"fn (&mut self, path: &Path) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147807,"byte_end":147825,"line_start":62,"line_end":62,"column_start":8,"column_end":26},"name":"visit_path_segment","qualname":"::visit::Visitor::visit_path_segment","value":"fn (&mut self, path_segment: &PathSegment) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1697},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":147926,"byte_end":147947,"line_start":65,"line_end":65,"column_start":8,"column_end":29},"name":"visit_path_parameters","qualname":"::visit::Visitor::visit_path_parameters","value":"fn (&mut self, path_parameters: &PathParameters) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1700},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148060,"byte_end":148084,"line_start":68,"line_end":68,"column_start":8,"column_end":32},"name":"visit_assoc_type_binding","qualname":"::visit::Visitor::visit_assoc_type_binding","value":"fn (&mut self, type_binding: &TypeBinding) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1703},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148191,"byte_end":148206,"line_start":71,"line_end":71,"column_start":8,"column_end":23},"name":"visit_attribute","qualname":"::visit::Visitor::visit_attribute","value":"fn (&mut self, _attr: &Attribute) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148247,"byte_end":148262,"line_start":72,"line_end":72,"column_start":8,"column_end":23},"name":"visit_fn_ret_ty","qualname":"::visit::Visitor::visit_fn_ret_ty","value":"fn (&mut self, ret_ty: &FunctionRetTy) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1709},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148350,"byte_end":148366,"line_start":75,"line_end":75,"column_start":8,"column_end":24},"name":"visit_const_expr","qualname":"::visit::Visitor::visit_const_expr","value":"fn (&mut self, expr: &ConstExpr) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1712},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148447,"byte_end":148456,"line_start":78,"line_end":78,"column_start":8,"column_end":17},"name":"visit_lit","qualname":"::visit::Visitor::visit_lit","value":"fn (&mut self, _lit: &Lit) -> ()","parent":{"krate":0,"index":1653},"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1715},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148848,"byte_end":148862,"line_start":95,"line_end":95,"column_start":8,"column_end":22},"name":"walk_opt_ident","qualname":"::visit::walk_opt_ident","value":"fn <V> (visitor: &mut V, opt_ident: &Option<Ident>) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1720},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":149015,"byte_end":149032,"line_start":101,"line_end":101,"column_start":8,"column_end":25},"name":"walk_lifetime_def","qualname":"::visit::walk_lifetime_def","value":"fn <V> (visitor: &mut V, lifetime_def: &LifetimeDef) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":148515,"byte_end":148524,"line_start":82,"line_end":82,"column_start":14,"column_end":23},"name":"walk_list","qualname":"walk_list::3575827240807189920","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1724},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":149217,"byte_end":149236,"line_start":106,"line_end":106,"column_start":8,"column_end":27},"name":"walk_poly_trait_ref","qualname":"::visit::walk_poly_trait_ref","value":"fn <V> (visitor: &mut V, trait_ref: &PolyTraitRef, _: &TraitBoundModifier) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1728},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":149459,"byte_end":149475,"line_start":113,"line_end":113,"column_start":8,"column_end":24},"name":"walk_macro_input","qualname":"::visit::walk_macro_input","value":"fn <V> (visitor: &mut V, macro_input: &MacroInput) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1734},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":150016,"byte_end":150028,"line_start":127,"line_end":127,"column_start":8,"column_end":20},"name":"walk_variant","qualname":"::visit::walk_variant","value":"fn <V> (visitor: &mut V, variant: &Variant, generics: &Generics) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1739},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":150294,"byte_end":150301,"line_start":135,"line_end":135,"column_start":8,"column_end":15},"name":"walk_ty","qualname":"::visit::walk_ty","value":"fn <V> (visitor: &mut V, ty: &Ty) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1760},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":151946,"byte_end":151955,"line_start":180,"line_end":180,"column_start":8,"column_end":17},"name":"walk_path","qualname":"::visit::walk_path","value":"fn <V> (visitor: &mut V, path: &Path) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1765},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":152097,"byte_end":152114,"line_start":186,"line_end":186,"column_start":8,"column_end":25},"name":"walk_path_segment","qualname":"::visit::walk_path_segment","value":"fn <V> (visitor: &mut V, segment: &PathSegment) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1769},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":152276,"byte_end":152296,"line_start":191,"line_end":191,"column_start":8,"column_end":28},"name":"walk_path_parameters","qualname":"::visit::walk_path_parameters","value":"fn <V> (visitor: &mut V, path_parameters: &PathParameters) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1775},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":152857,"byte_end":152880,"line_start":207,"line_end":207,"column_start":8,"column_end":31},"name":"walk_assoc_type_binding","qualname":"::visit::walk_assoc_type_binding","value":"fn <V> (visitor: &mut V, type_binding: &TypeBinding) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1779},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":153036,"byte_end":153055,"line_start":212,"line_end":212,"column_start":8,"column_end":27},"name":"walk_ty_param_bound","qualname":"::visit::walk_ty_param_bound","value":"fn <V> (visitor: &mut V, bound: &TyParamBound) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1786},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":153369,"byte_end":153382,"line_start":223,"line_end":223,"column_start":8,"column_end":21},"name":"walk_generics","qualname":"::visit::walk_generics","value":"fn <V> (visitor: &mut V, generics: &Generics) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1797},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":154704,"byte_end":154718,"line_start":250,"line_end":250,"column_start":8,"column_end":22},"name":"walk_fn_ret_ty","qualname":"::visit::walk_fn_ret_ty","value":"fn <V> (visitor: &mut V, ret_ty: &FunctionRetTy) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1802},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":154882,"byte_end":154899,"line_start":256,"line_end":256,"column_start":8,"column_end":25},"name":"walk_variant_data","qualname":"::visit::walk_variant_data","value":"fn <V> (visitor: &mut V, data: &VariantData) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1806},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":155014,"byte_end":155024,"line_start":260,"line_end":260,"column_start":8,"column_end":18},"name":"walk_field","qualname":"::visit::walk_field","value":"fn <V> (visitor: &mut V, field: &Field) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1810},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/visit.rs","byte_start":155213,"byte_end":155228,"line_start":266,"line_end":266,"column_start":8,"column_end":23},"name":"walk_const_expr","qualname":"::visit::walk_const_expr","value":"fn <V> (visitor: &mut V, len: &ConstExpr) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1830},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":2251,"byte_end":2268,"line_start":95,"line_end":95,"column_start":12,"column_end":29},"name":"parse_macro_input","qualname":"::parsing::parse_macro_input","value":"fn (input: &str) -> Result<MacroInput, String>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1832},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":2859,"byte_end":2869,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"parse_type","qualname":"::parsing::parse_type","value":"fn (input: &str) -> Result<Ty, String>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1834},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":2972,"byte_end":2982,"line_start":118,"line_end":118,"column_start":12,"column_end":22},"name":"parse_path","qualname":"::parsing::parse_path","value":"fn (input: &str) -> Result<Path, String>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":1836},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-0.9.2/src/lib.rs","byte_start":3089,"byte_end":3107,"line_start":122,"line_end":122,"column_start":12,"column_end":30},"name":"parse_where_clause","qualname":"::parsing::parse_where_clause","value":"fn (input: &str) -> Result<WhereClause, String>","parent":null,"children":[],"decl_id":null,"docs":""}],"refs":[],"macro_refs":[]}