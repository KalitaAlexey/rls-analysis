{"kind":"JsonApi","prelude":{"crate_name":"log","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":467,"byte_end":31680,"line_start":11,"line_end":1013,"column_start":1,"column_end":1}},"imports":[],"defs":[{"kind":"Enum","id":{"krate":0,"index":234},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":8705,"byte_end":8713,"line_start":247,"line_end":247,"column_start":10,"column_end":18},"name":"LogLevel","qualname":"::LogLevel","value":"LogLevel::{Error, Warn, Info, Debug, Trace}","parent":null,"children":[{"krate":0,"index":235},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240}],"decl_id":null,"docs":" An enum representing the available verbosity levels of the logging framework\n\n A `LogLevel` may be compared directly to a `LogLevelFilter`.\n"},{"kind":"Tuple","id":{"krate":0,"index":235},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":8795,"byte_end":8800,"line_start":251,"line_end":251,"column_start":5,"column_end":10},"name":"Error","qualname":"::LogLevel::Error","value":"LogLevel::Error","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" The \"error\" level.\n\n Designates very serious errors.\n"},{"kind":"Tuple","id":{"krate":0,"index":237},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":8959,"byte_end":8963,"line_start":255,"line_end":255,"column_start":5,"column_end":9},"name":"Warn","qualname":"::LogLevel::Warn","value":"LogLevel::Warn","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" The \"warn\" level.\n\n Designates hazardous situations.\n"},{"kind":"Tuple","id":{"krate":0,"index":238},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":9042,"byte_end":9046,"line_start":259,"line_end":259,"column_start":5,"column_end":9},"name":"Info","qualname":"::LogLevel::Info","value":"LogLevel::Info","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" The \"info\" level.\n\n Designates useful information.\n"},{"kind":"Tuple","id":{"krate":0,"index":239},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":9134,"byte_end":9139,"line_start":263,"line_end":263,"column_start":5,"column_end":10},"name":"Debug","qualname":"::LogLevel::Debug","value":"LogLevel::Debug","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" The \"debug\" level.\n\n Designates lower priority information.\n"},{"kind":"Tuple","id":{"krate":0,"index":240},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":9256,"byte_end":9261,"line_start":267,"line_end":267,"column_start":5,"column_end":10},"name":"Trace","qualname":"::LogLevel::Trace","value":"LogLevel::Trace","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" The \"trace\" level.\n\n Designates very low priority, often extremely verbose, information.\n"},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":11696,"byte_end":11699,"line_start":370,"line_end":370,"column_start":12,"column_end":15},"name":"max","qualname":"<LogLevel>::max","value":"fn () -> LogLevel","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Returns the most verbose logging level.\n"},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":11840,"byte_end":11859,"line_start":376,"line_end":376,"column_start":12,"column_end":31},"name":"to_log_level_filter","qualname":"<LogLevel>::to_log_level_filter","value":"fn (&self) -> LogLevelFilter","parent":{"krate":0,"index":234},"children":[],"decl_id":null,"docs":" Converts the `LogLevel` to the equivalent `LogLevelFilter`.\n"},{"kind":"Enum","id":{"krate":0,"index":254},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12169,"byte_end":12183,"line_start":387,"line_end":387,"column_start":10,"column_end":24},"name":"LogLevelFilter","qualname":"::LogLevelFilter","value":"LogLevelFilter::{Off, Error, Warn, Info, Debug, Trace}","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":259},{"krate":0,"index":260}],"decl_id":null,"docs":" An enum representing the available verbosity level filters of the logging\n framework.\n\n A `LogLevelFilter` may be compared directly to a `LogLevel`.\n"},{"kind":"Tuple","id":{"krate":0,"index":255},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12233,"byte_end":12236,"line_start":389,"line_end":389,"column_start":5,"column_end":8},"name":"Off","qualname":"::LogLevelFilter::Off","value":"LogLevelFilter::Off","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" A level lower than all log levels.\n"},{"kind":"Tuple","id":{"krate":0,"index":256},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12288,"byte_end":12293,"line_start":391,"line_end":391,"column_start":5,"column_end":10},"name":"Error","qualname":"::LogLevelFilter::Error","value":"LogLevelFilter::Error","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Corresponds to the `Error` log level.\n"},{"kind":"Tuple","id":{"krate":0,"index":257},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12344,"byte_end":12348,"line_start":393,"line_end":393,"column_start":5,"column_end":9},"name":"Warn","qualname":"::LogLevelFilter::Warn","value":"LogLevelFilter::Warn","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Corresponds to the `Warn` log level.\n"},{"kind":"Tuple","id":{"krate":0,"index":258},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12399,"byte_end":12403,"line_start":395,"line_end":395,"column_start":5,"column_end":9},"name":"Info","qualname":"::LogLevelFilter::Info","value":"LogLevelFilter::Info","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Corresponds to the `Info` log level.\n"},{"kind":"Tuple","id":{"krate":0,"index":259},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12455,"byte_end":12460,"line_start":397,"line_end":397,"column_start":5,"column_end":10},"name":"Debug","qualname":"::LogLevelFilter::Debug","value":"LogLevelFilter::Debug","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Corresponds to the `Debug` log level.\n"},{"kind":"Tuple","id":{"krate":0,"index":260},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":12512,"byte_end":12517,"line_start":399,"line_end":399,"column_start":5,"column_end":10},"name":"Trace","qualname":"::LogLevelFilter::Trace","value":"LogLevelFilter::Trace","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Corresponds to the `Trace` log level.\n"},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":14459,"byte_end":14462,"line_start":475,"line_end":475,"column_start":12,"column_end":15},"name":"max","qualname":"<LogLevelFilter>::max","value":"fn () -> LogLevelFilter","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Returns the most verbose logging level filter.\n"},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":14668,"byte_end":14680,"line_start":483,"line_end":483,"column_start":12,"column_end":24},"name":"to_log_level","qualname":"<LogLevelFilter>::to_log_level","value":"fn (&self) -> Option<LogLevel>","parent":{"krate":0,"index":254},"children":[],"decl_id":null,"docs":" Converts `self` to the equivalent `LogLevel`.\n\n Returns `None` if `self` is `LogLevelFilter::Off`.\n"},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":14811,"byte_end":14820,"line_start":489,"line_end":489,"column_start":12,"column_end":21},"name":"LogRecord","qualname":"::LogRecord","value":"LogRecord { metadata, location, args }","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" The \"payload\" of a log message.\n"},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":14984,"byte_end":14988,"line_start":497,"line_end":497,"column_start":12,"column_end":16},"name":"args","qualname":"<LogRecord<'a>>::args","value":"fn (&self) -> &fmt::Arguments<'a>","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The message body.\n"},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15100,"byte_end":15108,"line_start":502,"line_end":502,"column_start":12,"column_end":20},"name":"metadata","qualname":"<LogRecord<'a>>::metadata","value":"fn (&self) -> &LogMetadata","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" Metadata about the log directive.\n"},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15218,"byte_end":15226,"line_start":507,"line_end":507,"column_start":12,"column_end":20},"name":"location","qualname":"<LogRecord<'a>>::location","value":"fn (&self) -> &LogLocation","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The location of the log directive.\n"},{"kind":"Method","id":{"krate":0,"index":135},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15336,"byte_end":15341,"line_start":512,"line_end":512,"column_start":12,"column_end":17},"name":"level","qualname":"<LogRecord<'a>>::level","value":"fn (&self) -> LogLevel","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The verbosity level of the message.\n"},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15460,"byte_end":15466,"line_start":517,"line_end":517,"column_start":12,"column_end":18},"name":"target","qualname":"<LogRecord<'a>>::target","value":"fn (&self) -> &str","parent":{"krate":0,"index":122},"children":[],"decl_id":null,"docs":" The name of the target of the directive.\n"},{"kind":"Struct","id":{"krate":0,"index":139},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15569,"byte_end":15580,"line_start":523,"line_end":523,"column_start":12,"column_end":23},"name":"LogMetadata","qualname":"::LogMetadata","value":"LogMetadata { level, target }","parent":null,"children":[{"krate":0,"index":140},{"krate":0,"index":141}],"decl_id":null,"docs":" Metadata about a log message.\n"},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15714,"byte_end":15719,"line_start":530,"line_end":530,"column_start":12,"column_end":17},"name":"level","qualname":"<LogMetadata<'a>>::level","value":"fn (&self) -> LogLevel","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" The verbosity level of the message.\n"},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15827,"byte_end":15833,"line_start":535,"line_end":535,"column_start":12,"column_end":18},"name":"target","qualname":"<LogMetadata<'a>>::target","value":"fn (&self) -> &str","parent":{"krate":0,"index":139},"children":[],"decl_id":null,"docs":" The name of the target of the directive.\n"},{"kind":"Trait","id":{"krate":0,"index":149},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":15952,"byte_end":15955,"line_start":541,"line_end":541,"column_start":11,"column_end":14},"name":"Log","qualname":"::Log","value":"Log:  Sync + Send","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":153}],"decl_id":null,"docs":" A trait encapsulating the operations required of a logger\n"},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":16253,"byte_end":16260,"line_start":548,"line_end":548,"column_start":8,"column_end":15},"name":"enabled","qualname":"::Log::enabled","value":"fn (&self, metadata: &LogMetadata) -> bool","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Determines if a log message with the specified metadata would be\n logged.\n\n This is used by the `log_enabled!` macro to allow callers to avoid\n expensive computation of log message arguments if the message would be\n discarded anyway.\n"},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":16515,"byte_end":16518,"line_start":555,"line_end":555,"column_start":8,"column_end":11},"name":"log","qualname":"::Log::log","value":"fn (&self, record: &LogRecord) -> ()","parent":{"krate":0,"index":149},"children":[],"decl_id":null,"docs":" Logs the `LogRecord`.\n\n Note that `enabled` is *not* necessarily called before this method.\n Implementations of `log` should perform all necessary filtering\n internally.\n"},{"kind":"Struct","id":{"krate":0,"index":277},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17018,"byte_end":17029,"line_start":575,"line_end":575,"column_start":12,"column_end":23},"name":"LogLocation","qualname":"::LogLocation","value":"LogLocation { __module_path, __file, __line }","parent":null,"children":[{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280}],"decl_id":null,"docs":" The location of a log message.\n\n # Warning\n\n The fields of this struct are public so that they may be initialized by the\n `log!` macro. They are subject to change at any time and should never be\n accessed directly.\n"},{"kind":"Field","id":{"krate":0,"index":278},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17059,"byte_end":17072,"line_start":577,"line_end":577,"column_start":9,"column_end":22},"name":"__module_path","qualname":"::LogLocation::__module_path","value":"","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":279},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17115,"byte_end":17121,"line_start":579,"line_end":579,"column_start":9,"column_end":15},"name":"__file","qualname":"::LogLocation::__file","value":"","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":280},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17164,"byte_end":17170,"line_start":581,"line_end":581,"column_start":9,"column_end":15},"name":"__line","qualname":"::LogLocation::__line","value":"","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17250,"byte_end":17261,"line_start":586,"line_end":586,"column_start":12,"column_end":23},"name":"module_path","qualname":"<LogLocation>::module_path","value":"fn (&self) -> &str","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" The module path of the message.\n"},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17372,"byte_end":17376,"line_start":591,"line_end":591,"column_start":12,"column_end":16},"name":"file","qualname":"<LogLocation>::file","value":"fn (&self) -> &str","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" The source file containing the message.\n"},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17473,"byte_end":17477,"line_start":596,"line_end":596,"column_start":12,"column_end":16},"name":"line","qualname":"<LogLocation>::line","value":"fn (&self) -> u32","parent":{"krate":0,"index":277},"children":[],"decl_id":null,"docs":" The line containing the message.\n"},{"kind":"Struct","id":{"krate":0,"index":170},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":17989,"byte_end":18006,"line_start":610,"line_end":610,"column_start":12,"column_end":29},"name":"MaxLogLevelFilter","qualname":"::MaxLogLevelFilter","value":"","parent":null,"children":[],"decl_id":null,"docs":" A token providing read and write access to the global maximum log level\n filter.\n\n The maximum log level is used as an optimization to avoid evaluating log\n messages that will be ignored by the logger. Any message with a level\n higher than the maximum log level filter will be ignored. A logger should\n make sure to keep the maximum log level filter in sync with its current\n configuration.\n"},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":18251,"byte_end":18254,"line_start":620,"line_end":620,"column_start":12,"column_end":15},"name":"get","qualname":"<MaxLogLevelFilter>::get","value":"fn (&self) -> LogLevelFilter","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Gets the current maximum log level filter.\n"},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":18360,"byte_end":18363,"line_start":625,"line_end":625,"column_start":12,"column_end":15},"name":"set","qualname":"<MaxLogLevelFilter>::set","value":"fn (&self, level: LogLevelFilter) -> ()","parent":{"krate":0,"index":170},"children":[],"decl_id":null,"docs":" Sets the maximum log level.\n"},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":18770,"byte_end":18783,"line_start":636,"line_end":636,"column_start":8,"column_end":21},"name":"max_log_level","qualname":"::max_log_level","value":"fn () -> LogLevelFilter","parent":null,"children":[],"decl_id":null,"docs":" Returns the current maximum log level.\n\n The `log!`, `error!`, `warn!`, `info!`, `debug!`, and `trace!` macros check\n this value and discard any message logged at a higher level. The maximum\n log level is set by the `MaxLogLevel` token passed to loggers.\n"},{"kind":"Function","id":{"krate":0,"index":184},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":19563,"byte_end":19573,"line_start":656,"line_end":656,"column_start":8,"column_end":18},"name":"set_logger","qualname":"::set_logger","value":"fn <M> (make_logger: M) -> Result<(), SetLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" Sets the global logger.\n\n The `make_logger` closure is passed a `MaxLogLevel` object, which the\n logger should use to keep the global maximum log level in sync with the\n highest log level that the logger will not ignore.\n\n This function may only be called once in the lifetime of a program. Any log\n events that occur before the call to `set_logger` completes will be\n ignored.\n\n This function does not typically need to be called manually. Logger\n implementations should provide an initialization method that calls\n `set_logger` internally.\n\n Requires the `use_std` feature (enabled by default).\n"},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":20727,"byte_end":20741,"line_start":683,"line_end":683,"column_start":15,"column_end":29},"name":"set_logger_raw","qualname":"::set_logger_raw","value":"fn <M> (make_logger: M) -> Result<(), SetLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" Sets the global logger from a raw pointer.\n\n This function is similar to `set_logger` except that it is usable in\n `no_std` code.\n\n The `make_logger` closure is passed a `MaxLogLevel` object, which the\n logger should use to keep the global maximum log level in sync with the\n highest log level that the logger will not ignore.\n\n This function may only be called once in the lifetime of a program. Any log\n events that occur before the call to `set_logger_raw` completes will be\n ignored.\n\n This function does not typically need to be called manually. Logger\n implementations should provide an initialization method that calls\n `set_logger_raw` internally.\n\n # Safety\n\n The pointer returned by `make_logger` must remain valid for the entire\n duration of the program or until `shutdown_logger_raw` is called. In\n addition, `shutdown_logger` *must not* be called after this function.\n"},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":21727,"byte_end":21742,"line_start":706,"line_end":706,"column_start":8,"column_end":23},"name":"shutdown_logger","qualname":"::shutdown_logger","value":"fn () -> Result<Box<Log>, ShutdownLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" Shuts down the global logger.\n\n This function may only be called once in the lifetime of a program, and may\n not be called before `set_logger`. Once the global logger has been shut\n down, it can no longer be re-initialized by `set_logger`. Any log events\n that occur after the call to `shutdown_logger` completes will be ignored.\n\n The logger that was originally created by the call to to `set_logger` is\n returned on success. At that point it is guaranteed that no other threads\n are concurrently accessing the logger object.\n"},{"kind":"Function","id":{"krate":0,"index":195},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":22526,"byte_end":22545,"line_start":724,"line_end":724,"column_start":8,"column_end":27},"name":"shutdown_logger_raw","qualname":"::shutdown_logger_raw","value":"fn () -> Result<*const Log, ShutdownLoggerError>","parent":null,"children":[],"decl_id":null,"docs":" Shuts down the global logger.\n\n This function is similar to `shutdown_logger` except that it is usable in\n `no_std` code.\n\n This function may only be called once in the lifetime of a program, and may\n not be called before `set_logger_raw`. Once the global logger has been shut\n down, it can no longer be re-initialized by `set_logger_raw`. Any log\n events that occur after the call to `shutdown_logger_raw` completes will be\n ignored.\n\n The pointer that was originally passed to `set_logger_raw` is returned on\n success. At that point it is guaranteed that no other threads are\n concurrently accessing the logger object.\n"},{"kind":"Struct","id":{"krate":0,"index":294},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":23315,"byte_end":23329,"line_start":748,"line_end":748,"column_start":12,"column_end":26},"name":"SetLoggerError","qualname":"::SetLoggerError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type returned by `set_logger` if `set_logger` has already been called.\n"},{"kind":"Struct","id":{"krate":0,"index":304},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":23973,"byte_end":23992,"line_start":767,"line_end":767,"column_start":12,"column_end":31},"name":"ShutdownLoggerError","qualname":"::ShutdownLoggerError","value":"","parent":null,"children":[],"decl_id":null,"docs":" The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\n already been called or if `set_logger_raw` has not been called yet.\n"},{"kind":"Function","id":{"krate":0,"index":222},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":26394,"byte_end":26403,"line_start":853,"line_end":853,"column_start":8,"column_end":17},"name":"__enabled","qualname":"::__enabled","value":"fn (level: LogLevel, target: &str) -> bool","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":226},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":26719,"byte_end":26724,"line_start":865,"line_end":865,"column_start":8,"column_end":13},"name":"__log","qualname":"::__log","value":"fn (level: LogLevel, target: &str, loc: &LogLocation, args: fmt::Arguments) -> ()","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Function","id":{"krate":0,"index":233},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/log-0.3.6/src/lib.rs","byte_start":27242,"byte_end":27260,"line_start":885,"line_end":885,"column_start":8,"column_end":26},"name":"__static_max_level","qualname":"::__static_max_level","value":"fn () -> LogLevelFilter","parent":null,"children":[],"decl_id":null,"docs":""}],"refs":[],"macro_refs":[]}