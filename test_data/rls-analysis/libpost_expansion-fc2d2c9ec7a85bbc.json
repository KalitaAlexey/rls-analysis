{"kind":"JsonApi","prelude":{"crate_name":"post_expansion","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"quote","num":13,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"syn","num":12,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"unicode_xid","num":14,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs","byte_start":0,"byte_end":16208,"line_start":1,"line_end":433,"column_start":1,"column_end":1}},"imports":[],"defs":[{"kind":"Function","id":{"krate":0,"index":7},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs","byte_start":6961,"byte_end":6964,"line_start":199,"line_end":199,"column_start":8,"column_end":11},"name":"run","qualname":"::run","value":"fn (input: String) -> String","parent":null,"children":[],"decl_id":null,"docs":" Run post-expansion pass. This is called from the `register_post_expansion!`\n macro and should not need to be called directly.\n\n The post-expansion pass strips any remaining `PostExpansion` derives and\n strips the attributes that were queued to be stripped \"later\".\n\n ```ignore\n #[proc_macro_derive(PostExpansion_elastic_types)]\n pub fn post_expansion(input: TokenStream) -> TokenStream {\n     let source = input.to_string();\n     let clean = post_expansion::run(source);\n     clean.parse().unwrap()\n }\n ```\n"},{"kind":"Function","id":{"krate":0,"index":27},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs","byte_start":10728,"byte_end":10743,"line_start":290,"line_end":290,"column_start":8,"column_end":23},"name":"strip_attrs_now","qualname":"::strip_attrs_now","value":"fn (ast: MacroInput, strip: &[&str]) -> MacroInput","parent":null,"children":[],"decl_id":null,"docs":" Strip the specified attributes from the AST. Note that if it is possible\n those attributes may be needed by other custom derives, you should use\n `strip_attrs_later` instead which strips the attributes only after other\n custom derives have had a chance to see them.\n\n ```ignore\n ast = post_expansion::strip_attrs_now(ast, &[\"serde\"]);\n ```\n"},{"kind":"Function","id":{"krate":0,"index":54},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/post-expansion-0.1.0/src/lib.rs","byte_start":13084,"byte_end":13101,"line_start":355,"line_end":355,"column_start":8,"column_end":25},"name":"strip_attrs_later","qualname":"::strip_attrs_later","value":"fn (mut ast: MacroInput, strip: &[&str], identifier: &str) -> MacroInput","parent":null,"children":[],"decl_id":null,"docs":" Set up a post-expansion pass to strip the given attributes after other\n custom derives have had a chance to see them. Must be used together with the\n `register_post_expansion!` macro. The third argument is the unique\n identifier from the invocation of `register_post_expansion!`. Recommended to\n use the crate name of the current crate as the unique identifier.\n\n ```ignore\n let ast = post_expansion::strip_attrs_later(ast, &[\"serde\", \"elastic\"], \"elastic_types\");\n ```\n"}],"refs":[],"macro_refs":[]}