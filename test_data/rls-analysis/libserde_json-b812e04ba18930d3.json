{"kind":"JsonApi","prelude":{"crate_name":"serde_json","crate_root":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src","external_crates":[{"name":"alloc","num":5,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"libc","num":7,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"std","num":1,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"collections","num":3,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"serde","num":13,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"dtoa","num":15,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"compiler_builtins","num":9,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"panic_unwind","num":11,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"rustc_unicode","num":4,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"rand","num":6,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"core","num":2,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"num_traits","num":12,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"itoa","num":14,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"unwind","num":8,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"},{"name":"alloc_jemalloc","num":10,"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs"}],"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":0,"byte_end":5474,"line_start":1,"line_end":162,"column_start":1,"column_end":9}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":13},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":5401,"byte_end":5408,"line_start":156,"line_end":156,"column_start":9,"column_end":16},"name":"builder","qualname":"::builder","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","parent":null,"children":[{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":1762},{"krate":0,"index":1764},{"krate":0,"index":16},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":34}],"decl_id":null,"docs":" JSON Builders\n\n This module provides Builders that simplify constructing complex `Value`s. This can be useful\n when dynamically constructing a `Value`, or when it is inconvenient to write a custom\n `Serialize` implementation or to use `#[derive(Serialize)]`.\n\n # Example\n\n ```rust\n use serde_json::builder::ObjectBuilder;\n\n let value = ObjectBuilder::new()\n     .insert(\"name\", \"point\")\n     .insert_array(\"points\", |builder| {\n         builder\n             .push_object(|builder| {\n                 builder.insert(\"x\", 1).insert(\"y\", 2)\n             })\n             .push_object(|builder| {\n                 builder.insert(\"x\", 3).insert(\"y\", 4)\n             })\n     })\n     .build();\n ```\n"},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":6871,"byte_end":6883,"line_start":42,"line_end":42,"column_start":12,"column_end":24},"name":"ArrayBuilder","qualname":"::builder::ArrayBuilder","value":"ArrayBuilder { array }","parent":null,"children":[{"krate":0,"index":1763}],"decl_id":null,"docs":" This structure provides a simple interface for constructing a JSON array.\n"},{"kind":"Method","id":{"krate":0,"index":17},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":6981,"byte_end":6984,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<ArrayBuilder>::new","value":"fn () -> ArrayBuilder","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" Construct an `ObjectBuilder`.\n"},{"kind":"Method","id":{"krate":0,"index":18},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":7095,"byte_end":7100,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"build","qualname":"<ArrayBuilder>::build","value":"fn (self) -> Value","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" Return the constructed `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":7208,"byte_end":7212,"line_start":58,"line_end":58,"column_start":12,"column_end":16},"name":"push","qualname":"<ArrayBuilder>::push","value":"fn <T> (mut self, v: T) -> ArrayBuilder","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" Insert a value into the array.\n"},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":7462,"byte_end":7472,"line_start":65,"line_end":65,"column_start":12,"column_end":22},"name":"push_array","qualname":"<ArrayBuilder>::push_array","value":"fn <F> (mut self, f: F) -> ArrayBuilder","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\n this array.\n"},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":7808,"byte_end":7819,"line_start":75,"line_end":75,"column_start":12,"column_end":23},"name":"push_object","qualname":"<ArrayBuilder>::push_object","value":"fn <F> (mut self, f: F) -> ArrayBuilder","parent":{"krate":0,"index":1762},"children":[],"decl_id":null,"docs":" Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\n this array.\n"},{"kind":"Struct","id":{"krate":0,"index":1766},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":8138,"byte_end":8151,"line_start":86,"line_end":86,"column_start":12,"column_end":25},"name":"ObjectBuilder","qualname":"::builder::ObjectBuilder","value":"ObjectBuilder { object }","parent":null,"children":[{"krate":0,"index":1767}],"decl_id":null,"docs":" This structure provides a simple interface for constructing a JSON object.\n"},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":8259,"byte_end":8262,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<ObjectBuilder>::new","value":"fn () -> ObjectBuilder","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Construct an `ObjectBuilder`.\n"},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":8375,"byte_end":8380,"line_start":97,"line_end":97,"column_start":12,"column_end":17},"name":"build","qualname":"<ObjectBuilder>::build","value":"fn (self) -> Value","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Return the constructed `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":8500,"byte_end":8506,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"insert","qualname":"<ObjectBuilder>::insert","value":"fn <S, V> (mut self, key: S, value: V) -> ObjectBuilder","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Insert a key-value pair into the object.\n"},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":8845,"byte_end":8857,"line_start":112,"line_end":112,"column_start":12,"column_end":24},"name":"insert_array","qualname":"<ObjectBuilder>::insert_array","value":"fn <S, F> (mut self, key: S, f: F) -> ObjectBuilder","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\n this object.\n"},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/builder.rs","byte_start":9253,"byte_end":9266,"line_start":123,"line_end":123,"column_start":12,"column_end":25},"name":"insert_object","qualname":"<ObjectBuilder>::insert_object","value":"fn <S, F> (mut self, key: S, f: F) -> ObjectBuilder","parent":{"krate":0,"index":1766},"children":[],"decl_id":null,"docs":" Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\n this object.\n"},{"kind":"Mod","id":{"krate":0,"index":58},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":5418,"byte_end":5420,"line_start":157,"line_end":157,"column_start":9,"column_end":11},"name":"de","qualname":"::de","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","parent":null,"children":[{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":69},{"krate":0,"index":75},{"krate":0,"index":97},{"krate":0,"index":101},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":233},{"krate":0,"index":238},{"krate":0,"index":243},{"krate":0,"index":255},{"krate":0,"index":260},{"krate":0,"index":265},{"krate":0,"index":300},{"krate":0,"index":304},{"krate":0,"index":309},{"krate":0,"index":332},{"krate":0,"index":336},{"krate":0,"index":341},{"krate":0,"index":363},{"krate":0,"index":368},{"krate":0,"index":373},{"krate":0,"index":383},{"krate":0,"index":389},{"krate":0,"index":393},{"krate":0,"index":397},{"krate":0,"index":400}],"decl_id":null,"docs":" JSON Deserialization\n\n This module provides for JSON deserialization with the type `Deserializer`.\n"},{"kind":"Struct","id":{"krate":0,"index":65},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":9945,"byte_end":9957,"line_start":18,"line_end":18,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::de::Deserializer","value":"","parent":null,"children":[],"decl_id":null,"docs":" A structure that deserializes JSON into Rust values.\n"},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":10227,"byte_end":10230,"line_start":26,"line_end":26,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer<Iter>>::new","value":"fn (rdr: Iter) -> Self","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" Creates the JSON parser from an `std::iter::Iterator`.\n"},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":10593,"byte_end":10596,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"end","qualname":"<Deserializer<Iter>>::end","value":"fn (&mut self) -> Result<()>","parent":{"krate":0,"index":65},"children":[],"decl_id":null,"docs":" The `Deserializer::end` method should be called after a value has been fully deserialized.\n This allows the `Deserializer` to validate that the input stream is at the end or that it\n only has trailing whitespace.\n"},{"kind":"Macro","id":{"krate":4294967295,"index":4294967295},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":12296,"byte_end":12304,"line_start":99,"line_end":99,"column_start":14,"column_end":22},"name":"overflow","qualname":"overflow::1636636693580745378","value":"","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":363},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":37230,"byte_end":37248,"line_start":908,"line_end":908,"column_start":12,"column_end":30},"name":"StreamDeserializer","qualname":"::de::StreamDeserializer","value":"StreamDeserializer { deser, _marker }","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365}],"decl_id":null,"docs":" Iterator that deserializes a stream into multiple JSON values.\n"},{"kind":"Method","id":{"krate":0,"index":371},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":37676,"byte_end":37679,"line_start":922,"line_end":922,"column_start":12,"column_end":15},"name":"new","qualname":"<StreamDeserializer<T, Iter>>::new","value":"fn (iter: Iter) -> StreamDeserializer<T, Iter>","parent":{"krate":0,"index":363},"children":[],"decl_id":null,"docs":" Returns an `Iterator` of decoded JSON values from an iterator over\n `Iterator<Item=io::Result<u8>>`.\n"},{"kind":"Function","id":{"krate":0,"index":389},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":39147,"byte_end":39156,"line_start":973,"line_end":973,"column_start":8,"column_end":17},"name":"from_iter","qualname":"::de::from_iter","value":"fn <I, T> (iter: I) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a json value from an iterator over an iterator\n `Iterator<Item=io::Result<u8>>`.\n"},{"kind":"Function","id":{"krate":0,"index":393},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":39368,"byte_end":39379,"line_start":981,"line_end":981,"column_start":8,"column_end":19},"name":"from_reader","qualname":"::de::from_reader","value":"fn <R, T> (rdr: R) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a json value from a `std::io::Read`.\n"},{"kind":"Function","id":{"krate":0,"index":397},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":39551,"byte_end":39561,"line_start":989,"line_end":989,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::de::from_slice","value":"fn <T> (v: &[u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a json value from a byte slice `&[u8]`.\n"},{"kind":"Function","id":{"krate":0,"index":400},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/de.rs","byte_start":39710,"byte_end":39718,"line_start":996,"line_end":996,"column_start":8,"column_end":16},"name":"from_str","qualname":"::de::from_str","value":"fn <T> (s: &str) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Decodes a json value from a `&str`.\n"},{"kind":"Mod","id":{"krate":0,"index":403},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":5430,"byte_end":5435,"line_start":158,"line_end":158,"column_start":9,"column_end":14},"name":"error","qualname":"::error","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","parent":null,"children":[{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":2215},{"krate":0,"index":2247},{"krate":0,"index":2257},{"krate":0,"index":2296},{"krate":0,"index":410},{"krate":0,"index":2345},{"krate":0,"index":2352},{"krate":0,"index":421},{"krate":0,"index":428},{"krate":0,"index":436},{"krate":0,"index":439},{"krate":0,"index":449},{"krate":0,"index":466},{"krate":0,"index":470}],"decl_id":null,"docs":" JSON Errors\n\n This module is centered around the `Error` and `ErrorCode` types, which represents all possible\n `serde_json` errors.\n"},{"kind":"Enum","id":{"krate":0,"index":2215},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40159,"byte_end":40168,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"ErrorCode","qualname":"::error::ErrorCode","value":"ErrorCode::{Custom, InvalidType, InvalidValue, InvalidLength, UnknownVariant, UnknownField, MissingField, EOFWhileParsingList, EOFWhileParsingObject, EOFWhileParsingString, EOFWhileParsingValue, ExpectedColon, ExpectedListCommaOrEnd, ExpectedObjectCommaOrEnd, ExpectedSomeIdent, ExpectedSomeValue, InvalidEscape, InvalidNumber, NumberOutOfRange, InvalidUnicodeCodePoint, KeyMustBeAString, LoneLeadingSurrogateInHexEscape, TrailingCharacters, UnexpectedEndOfHexEscape}","parent":null,"children":[{"krate":0,"index":2216},{"krate":0,"index":2218},{"krate":0,"index":2220},{"krate":0,"index":2222},{"krate":0,"index":2224},{"krate":0,"index":2226},{"krate":0,"index":2228},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2241},{"krate":0,"index":2242},{"krate":0,"index":2243},{"krate":0,"index":2244},{"krate":0,"index":2245},{"krate":0,"index":2246}],"decl_id":null,"docs":" The errors that can arise while parsing a JSON stream.\n"},{"kind":"Tuple","id":{"krate":0,"index":2216},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40218,"byte_end":40224,"line_start":18,"line_end":18,"column_start":5,"column_end":11},"name":"Custom","qualname":"::error::ErrorCode::Custom","value":"ErrorCode::Custom(String)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Catchall for syntax error messages\n"},{"kind":"Tuple","id":{"krate":0,"index":2218},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40273,"byte_end":40284,"line_start":21,"line_end":21,"column_start":5,"column_end":16},"name":"InvalidType","qualname":"::error::ErrorCode::InvalidType","value":"ErrorCode::InvalidType(de::Type)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Incorrect type from value\n"},{"kind":"Tuple","id":{"krate":0,"index":2220},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40325,"byte_end":40337,"line_start":24,"line_end":24,"column_start":5,"column_end":17},"name":"InvalidValue","qualname":"::error::ErrorCode::InvalidValue","value":"ErrorCode::InvalidValue(String)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Incorrect value\n"},{"kind":"Tuple","id":{"krate":0,"index":2222},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40375,"byte_end":40388,"line_start":27,"line_end":27,"column_start":5,"column_end":18},"name":"InvalidLength","qualname":"::error::ErrorCode::InvalidLength","value":"ErrorCode::InvalidLength(usize)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Invalid length\n"},{"kind":"Tuple","id":{"krate":0,"index":2224},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40438,"byte_end":40452,"line_start":30,"line_end":30,"column_start":5,"column_end":19},"name":"UnknownVariant","qualname":"::error::ErrorCode::UnknownVariant","value":"ErrorCode::UnknownVariant(String)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Unknown variant in an enum.\n"},{"kind":"Tuple","id":{"krate":0,"index":2226},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40500,"byte_end":40512,"line_start":33,"line_end":33,"column_start":5,"column_end":17},"name":"UnknownField","qualname":"::error::ErrorCode::UnknownField","value":"ErrorCode::UnknownField(String)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Unknown field in struct.\n"},{"kind":"Tuple","id":{"krate":0,"index":2228},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40562,"byte_end":40574,"line_start":36,"line_end":36,"column_start":5,"column_end":17},"name":"MissingField","qualname":"::error::ErrorCode::MissingField","value":"ErrorCode::MissingField(&'static str)","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Struct is missing a field.\n"},{"kind":"Tuple","id":{"krate":0,"index":2230},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40629,"byte_end":40648,"line_start":39,"line_end":39,"column_start":5,"column_end":24},"name":"EOFWhileParsingList","qualname":"::error::ErrorCode::EOFWhileParsingList","value":"ErrorCode::EOFWhileParsingList","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" EOF while parsing a list.\n"},{"kind":"Tuple","id":{"krate":0,"index":2231},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40692,"byte_end":40713,"line_start":42,"line_end":42,"column_start":5,"column_end":26},"name":"EOFWhileParsingObject","qualname":"::error::ErrorCode::EOFWhileParsingObject","value":"ErrorCode::EOFWhileParsingObject","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" EOF while parsing an object.\n"},{"kind":"Tuple","id":{"krate":0,"index":2232},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40756,"byte_end":40777,"line_start":45,"line_end":45,"column_start":5,"column_end":26},"name":"EOFWhileParsingString","qualname":"::error::ErrorCode::EOFWhileParsingString","value":"ErrorCode::EOFWhileParsingString","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" EOF while parsing a string.\n"},{"kind":"Tuple","id":{"krate":0,"index":2233},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40824,"byte_end":40844,"line_start":48,"line_end":48,"column_start":5,"column_end":25},"name":"EOFWhileParsingValue","qualname":"::error::ErrorCode::EOFWhileParsingValue","value":"ErrorCode::EOFWhileParsingValue","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" EOF while parsing a JSON value.\n"},{"kind":"Tuple","id":{"krate":0,"index":2234},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40898,"byte_end":40911,"line_start":51,"line_end":51,"column_start":5,"column_end":18},"name":"ExpectedColon","qualname":"::error::ErrorCode::ExpectedColon","value":"ErrorCode::ExpectedColon","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Expected this character to be a `':'`.\n"},{"kind":"Tuple","id":{"krate":0,"index":2235},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":40981,"byte_end":41003,"line_start":54,"line_end":54,"column_start":5,"column_end":27},"name":"ExpectedListCommaOrEnd","qualname":"::error::ErrorCode::ExpectedListCommaOrEnd","value":"ErrorCode::ExpectedListCommaOrEnd","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Expected this character to be either a `','` or a `]`.\n"},{"kind":"Tuple","id":{"krate":0,"index":2236},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41073,"byte_end":41097,"line_start":57,"line_end":57,"column_start":5,"column_end":29},"name":"ExpectedObjectCommaOrEnd","qualname":"::error::ErrorCode::ExpectedObjectCommaOrEnd","value":"ErrorCode::ExpectedObjectCommaOrEnd","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Expected this character to be either a `','` or a `}`.\n"},{"kind":"Tuple","id":{"krate":0,"index":2237},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41169,"byte_end":41186,"line_start":60,"line_end":60,"column_start":5,"column_end":22},"name":"ExpectedSomeIdent","qualname":"::error::ErrorCode::ExpectedSomeIdent","value":"ErrorCode::ExpectedSomeIdent","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Expected to parse either a `true`, `false`, or a `null`.\n"},{"kind":"Tuple","id":{"krate":0,"index":2238},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41248,"byte_end":41265,"line_start":63,"line_end":63,"column_start":5,"column_end":22},"name":"ExpectedSomeValue","qualname":"::error::ErrorCode::ExpectedSomeValue","value":"ErrorCode::ExpectedSomeValue","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Expected this character to start a JSON value.\n"},{"kind":"Tuple","id":{"krate":0,"index":2239},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41305,"byte_end":41318,"line_start":66,"line_end":66,"column_start":5,"column_end":18},"name":"InvalidEscape","qualname":"::error::ErrorCode::InvalidEscape","value":"ErrorCode::InvalidEscape","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Invalid hex escape code.\n"},{"kind":"Tuple","id":{"krate":0,"index":2240},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41349,"byte_end":41362,"line_start":69,"line_end":69,"column_start":5,"column_end":18},"name":"InvalidNumber","qualname":"::error::ErrorCode::InvalidNumber","value":"ErrorCode::InvalidNumber","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Invalid number.\n"},{"kind":"Tuple","id":{"krate":0,"index":2241},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41430,"byte_end":41446,"line_start":72,"line_end":72,"column_start":5,"column_end":21},"name":"NumberOutOfRange","qualname":"::error::ErrorCode::NumberOutOfRange","value":"ErrorCode::NumberOutOfRange","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Number is bigger than the maximum value of its type.\n"},{"kind":"Tuple","id":{"krate":0,"index":2242},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41489,"byte_end":41512,"line_start":75,"line_end":75,"column_start":5,"column_end":28},"name":"InvalidUnicodeCodePoint","qualname":"::error::ErrorCode::InvalidUnicodeCodePoint","value":"ErrorCode::InvalidUnicodeCodePoint","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Invalid unicode code point.\n"},{"kind":"Tuple","id":{"krate":0,"index":2243},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41555,"byte_end":41571,"line_start":78,"line_end":78,"column_start":5,"column_end":21},"name":"KeyMustBeAString","qualname":"::error::ErrorCode::KeyMustBeAString","value":"ErrorCode::KeyMustBeAString","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Object key is not a string.\n"},{"kind":"Tuple","id":{"krate":0,"index":2244},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41624,"byte_end":41655,"line_start":81,"line_end":81,"column_start":5,"column_end":36},"name":"LoneLeadingSurrogateInHexEscape","qualname":"::error::ErrorCode::LoneLeadingSurrogateInHexEscape","value":"ErrorCode::LoneLeadingSurrogateInHexEscape","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Lone leading surrogate in hex escape.\n"},{"kind":"Tuple","id":{"krate":0,"index":2245},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41731,"byte_end":41749,"line_start":84,"line_end":84,"column_start":5,"column_end":23},"name":"TrailingCharacters","qualname":"::error::ErrorCode::TrailingCharacters","value":"ErrorCode::TrailingCharacters","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" JSON has non-whitespace trailing characters after the value.\n"},{"kind":"Tuple","id":{"krate":0,"index":2246},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":41794,"byte_end":41818,"line_start":87,"line_end":87,"column_start":5,"column_end":29},"name":"UnexpectedEndOfHexEscape","qualname":"::error::ErrorCode::UnexpectedEndOfHexEscape","value":"ErrorCode::UnexpectedEndOfHexEscape","parent":{"krate":0,"index":2215},"children":[],"decl_id":null,"docs":" Unexpected end of hex excape.\n"},{"kind":"Enum","id":{"krate":0,"index":2345},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":44373,"byte_end":44378,"line_start":146,"line_end":146,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Error::{Syntax, Io}","parent":null,"children":[{"krate":0,"index":2346},{"krate":0,"index":2350}],"decl_id":null,"docs":" This type represents all possible errors that can occur when serializing or deserializing a\n value into JSON.\n"},{"kind":"Tuple","id":{"krate":0,"index":2346},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":44433,"byte_end":44439,"line_start":148,"line_end":148,"column_start":5,"column_end":11},"name":"Syntax","qualname":"::error::Error::Syntax","value":"Error::Syntax(ErrorCode, usize, usize)","parent":{"krate":0,"index":2345},"children":[],"decl_id":null,"docs":" The JSON value had some syntatic error.\n"},{"kind":"Tuple","id":{"krate":0,"index":2350},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":44545,"byte_end":44547,"line_start":151,"line_end":151,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":2345},"children":[],"decl_id":null,"docs":" Some IO error occurred when serializing or deserializing a value.\n"},{"kind":"Type","id":{"krate":0,"index":470},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/error.rs","byte_start":47783,"byte_end":47789,"line_start":258,"line_end":258,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Mod","id":{"krate":0,"index":472},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":5445,"byte_end":5448,"line_start":159,"line_end":159,"column_start":9,"column_end":12},"name":"ser","qualname":"::ser","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","parent":null,"children":[{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":484},{"krate":0,"index":488},{"krate":0,"index":493},{"krate":0,"index":2366},{"krate":0,"index":2370},{"krate":0,"index":2373},{"krate":0,"index":501},{"krate":0,"index":684},{"krate":0,"index":689},{"krate":0,"index":872},{"krate":0,"index":2429},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":892},{"krate":0,"index":2439},{"krate":0,"index":2443},{"krate":0,"index":2449},{"krate":0,"index":912},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":941},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":967},{"krate":0,"index":971},{"krate":0,"index":975},{"krate":0,"index":981},{"krate":0,"index":987},{"krate":0,"index":991},{"krate":0,"index":995},{"krate":0,"index":1000},{"krate":0,"index":1005}],"decl_id":null,"docs":" JSON Serialization\n\n This module provides for JSON serialization with the type `Serializer`.\n"},{"kind":"Struct","id":{"krate":0,"index":479},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":48116,"byte_end":48126,"line_start":15,"line_end":15,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::ser::Serializer","value":"Serializer { writer, formatter }","parent":null,"children":[{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" A structure for serializing Rust values into JSON.\n"},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":48302,"byte_end":48305,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer<W>>::new","value":"fn (writer: W) -> Self","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":" Creates a new JSON serializer.\n"},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":48547,"byte_end":48553,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"pretty","qualname":"<Serializer<W, PrettyFormatter<'a>>>::pretty","value":"fn (writer: W) -> Self","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":" Creates a new JSON pretty print serializer.\n"},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":48851,"byte_end":48865,"line_start":47,"line_end":47,"column_start":12,"column_end":26},"name":"with_formatter","qualname":"<Serializer<W, F>>::with_formatter","value":"fn (writer: W, formatter: F) -> Self","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":" Creates a new JSON visitor whose output will be written to the writer\n specified.\n"},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":49077,"byte_end":49087,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Serializer<W, F>>::into_inner","value":"fn (self) -> W","parent":{"krate":0,"index":479},"children":[],"decl_id":null,"docs":" Unwrap the `Writer` from the `Serializer`.\n"},{"kind":"Enum","id":{"krate":0,"index":2366},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":49179,"byte_end":49184,"line_start":63,"line_end":63,"column_start":10,"column_end":15},"name":"State","qualname":"::ser::State","value":"State::{Empty, First, Rest}","parent":null,"children":[{"krate":0,"index":2367},{"krate":0,"index":2368},{"krate":0,"index":2369}],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2367},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":49191,"byte_end":49196,"line_start":64,"line_end":64,"column_start":5,"column_end":10},"name":"Empty","qualname":"::ser::State::Empty","value":"State::Empty","parent":{"krate":0,"index":2366},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2368},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":49202,"byte_end":49207,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"First","qualname":"::ser::State::First","value":"State::First","parent":{"krate":0,"index":2366},"children":[],"decl_id":null,"docs":""},{"kind":"Tuple","id":{"krate":0,"index":2369},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":49213,"byte_end":49217,"line_start":66,"line_end":66,"column_start":5,"column_end":9},"name":"Rest","qualname":"::ser::State::Rest","value":"State::Rest","parent":{"krate":0,"index":2366},"children":[],"decl_id":null,"docs":""},{"kind":"Trait","id":{"krate":0,"index":872},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67210,"byte_end":67219,"line_start":727,"line_end":727,"column_start":11,"column_end":20},"name":"Formatter","qualname":"::ser::Formatter","value":"Formatter","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":878},{"krate":0,"index":883},{"krate":0,"index":887}],"decl_id":null,"docs":" This trait abstracts away serializing the JSON control characters, which allows the user to\n optionally pretty print the JSON output.\n"},{"kind":"Method","id":{"krate":0,"index":873},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67275,"byte_end":67279,"line_start":729,"line_end":729,"column_start":8,"column_end":12},"name":"open","qualname":"::ser::Formatter::open","value":"fn <W> (&mut self, writer: &mut W, ch: u8) -> Result<()>","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" Called when serializing a '{' or '['.\n"},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67407,"byte_end":67412,"line_start":733,"line_end":733,"column_start":8,"column_end":13},"name":"comma","qualname":"::ser::Formatter::comma","value":"fn <W> (&mut self, writer: &mut W, first: bool) -> Result<()>","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" Called when serializing a ','.\n"},{"kind":"Method","id":{"krate":0,"index":883},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67545,"byte_end":67550,"line_start":737,"line_end":737,"column_start":8,"column_end":13},"name":"colon","qualname":"::ser::Formatter::colon","value":"fn <W> (&mut self, writer: &mut W) -> Result<()>","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" Called when serializing a ':'.\n"},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67669,"byte_end":67674,"line_start":740,"line_end":740,"column_start":8,"column_end":13},"name":"close","qualname":"::ser::Formatter::close","value":"fn <W> (&mut self, writer: &mut W, ch: u8) -> Result<()>","parent":{"krate":0,"index":872},"children":[],"decl_id":null,"docs":" Called when serializing a '}' or ']'.\n"},{"kind":"Struct","id":{"krate":0,"index":2429},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":67860,"byte_end":67876,"line_start":746,"line_end":746,"column_start":12,"column_end":28},"name":"CompactFormatter","qualname":"::ser::CompactFormatter","value":"","parent":null,"children":[],"decl_id":null,"docs":" This structure compacts a JSON value with no extra whitespace.\n"},{"kind":"Struct","id":{"krate":0,"index":2439},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":68722,"byte_end":68737,"line_start":780,"line_end":780,"column_start":12,"column_end":27},"name":"PrettyFormatter","qualname":"::ser::PrettyFormatter","value":"PrettyFormatter { current_indent, indent }","parent":null,"children":[{"krate":0,"index":2440},{"krate":0,"index":2441}],"decl_id":null,"docs":" This structure pretty prints a JSON value to make it human readable.\n"},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":68934,"byte_end":68937,"line_start":787,"line_end":787,"column_start":12,"column_end":15},"name":"new","qualname":"<PrettyFormatter<'a>>::new","value":"fn () -> Self","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" Construct a pretty printer formatter that defaults to using two spaces for indentation.\n"},{"kind":"Method","id":{"krate":0,"index":915},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":69104,"byte_end":69115,"line_start":792,"line_end":792,"column_start":12,"column_end":23},"name":"with_indent","qualname":"<PrettyFormatter<'a>>::with_indent","value":"fn (indent: &'a [u8]) -> Self","parent":{"krate":0,"index":2439},"children":[],"decl_id":null,"docs":" Construct a pretty printer formatter that uses the `indent` string for indentation.\n"},{"kind":"Function","id":{"krate":0,"index":941},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":70403,"byte_end":70413,"line_start":844,"line_end":844,"column_start":8,"column_end":18},"name":"escape_str","qualname":"::ser::escape_str","value":"fn <W> (wr: &mut W, value: &str) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serializes and escapes a `&str` into a JSON string.\n"},{"kind":"Function","id":{"krate":0,"index":975},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":74055,"byte_end":74064,"line_start":953,"line_end":953,"column_start":8,"column_end":17},"name":"to_writer","qualname":"::ser::to_writer","value":"fn <W, T> (writer: &mut W, value: &T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `[u8]` writer.\n"},{"kind":"Function","id":{"krate":0,"index":981},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":74345,"byte_end":74361,"line_start":964,"line_end":964,"column_start":8,"column_end":24},"name":"to_writer_pretty","qualname":"::ser::to_writer_pretty","value":"fn <W, T> (writer: &mut W, value: &T) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `[u8]` writer.\n"},{"kind":"Function","id":{"krate":0,"index":987},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":74645,"byte_end":74651,"line_start":975,"line_end":975,"column_start":8,"column_end":14},"name":"to_vec","qualname":"::ser::to_vec","value":"fn <T> (value: &T) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `[u8]` buffer.\n"},{"kind":"Function","id":{"krate":0,"index":991},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":74984,"byte_end":74997,"line_start":987,"line_end":987,"column_start":8,"column_end":21},"name":"to_vec_pretty","qualname":"::ser::to_vec_pretty","value":"fn <T> (value: &T) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `[u8]` buffer.\n"},{"kind":"Function","id":{"krate":0,"index":995},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":75339,"byte_end":75348,"line_start":999,"line_end":999,"column_start":8,"column_end":17},"name":"to_string","qualname":"::ser::to_string","value":"fn <T> (value: &T) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `String` buffer.\n"},{"kind":"Function","id":{"krate":0,"index":1000},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/ser.rs","byte_start":75658,"byte_end":75674,"line_start":1012,"line_end":1012,"column_start":8,"column_end":24},"name":"to_string_pretty","qualname":"::ser::to_string_pretty","value":"fn <T> (value: &T) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Encode the specified struct into a json `String` buffer.\n"},{"kind":"Mod","id":{"krate":0,"index":1010},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/lib.rs","byte_start":5458,"byte_end":5463,"line_start":160,"line_end":160,"column_start":9,"column_end":14},"name":"value","qualname":"::value","value":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1023},{"krate":0,"index":1026},{"krate":0,"index":2499},{"krate":0,"index":2515},{"krate":0,"index":2525},{"krate":0,"index":1029},{"krate":0,"index":1126},{"krate":0,"index":1138},{"krate":0,"index":1190},{"krate":0,"index":1194},{"krate":0,"index":1205},{"krate":0,"index":1211},{"krate":0,"index":1217},{"krate":0,"index":1221},{"krate":0,"index":1223},{"krate":0,"index":1227},{"krate":0,"index":1229},{"krate":0,"index":1232},{"krate":0,"index":1235},{"krate":0,"index":1238},{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1432},{"krate":0,"index":1476},{"krate":0,"index":1481},{"krate":0,"index":1510},{"krate":0,"index":1515},{"krate":0,"index":1522},{"krate":0,"index":1534},{"krate":0,"index":1540},{"krate":0,"index":1576},{"krate":0,"index":1583},{"krate":0,"index":1587},{"krate":0,"index":1591},{"krate":0,"index":1594}],"decl_id":null,"docs":" JSON Value\n\n This module is centered around the `Value` type, which can represent all possible JSON values.\n\n # Example of use:\n\n ```rust\n extern crate serde_json;\n\n use serde_json::Value;\n\n fn main() {\n     let s = \"{\\\"x\\\": 1.0, \\\"y\\\": 2.0}\";\n     let value: Value = serde_json::from_str(s).unwrap();\n }\n ```\n\n It is also possible to deserialize from a `Value` type:\n\n ```rust\n extern crate serde_json;\n\n use serde_json::{Value, Map};\n\n fn main() {\n     let mut map = Map::new();\n     map.insert(String::from(\"x\"), Value::F64(1.0));\n     map.insert(String::from(\"y\"), Value::F64(2.0));\n     let value = Value::Object(map);\n\n     let map: Map<String, f64> = serde_json::from_value(value).unwrap();\n }\n ```\n"},{"kind":"Type","id":{"krate":0,"index":1020},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":77271,"byte_end":77274,"line_start":55,"line_end":55,"column_start":10,"column_end":13},"name":"Map","qualname":"::value::Map","value":"BTreeMap<K, V>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Type","id":{"krate":0,"index":1023},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":77495,"byte_end":77506,"line_start":62,"line_end":62,"column_start":10,"column_end":21},"name":"MapIntoIter","qualname":"::value::MapIntoIter","value":"btree_map::IntoIter<K, V>","parent":null,"children":[],"decl_id":null,"docs":""},{"kind":"Enum","id":{"krate":0,"index":2499},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":77949,"byte_end":77954,"line_start":74,"line_end":74,"column_start":10,"column_end":15},"name":"Value","qualname":"::value::Value","value":"Value::{Null, Bool, I64, U64, F64, String, Array, Object}","parent":null,"children":[{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513}],"decl_id":null,"docs":" Represents a JSON value\n"},{"kind":"Tuple","id":{"krate":0,"index":2500},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":77998,"byte_end":78002,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Null","qualname":"::value::Value::Null","value":"Value::Null","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON null value\n"},{"kind":"Tuple","id":{"krate":0,"index":2501},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78043,"byte_end":78047,"line_start":79,"line_end":79,"column_start":5,"column_end":9},"name":"Bool","qualname":"::value::Value::Bool","value":"Value::Bool(bool)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON Boolean\n"},{"kind":"Tuple","id":{"krate":0,"index":2503},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78101,"byte_end":78104,"line_start":82,"line_end":82,"column_start":5,"column_end":8},"name":"I64","qualname":"::value::Value::I64","value":"Value::I64(i64)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON signed integer\n"},{"kind":"Tuple","id":{"krate":0,"index":2505},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78159,"byte_end":78162,"line_start":85,"line_end":85,"column_start":5,"column_end":8},"name":"U64","qualname":"::value::Value::U64","value":"Value::U64(u64)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON unsigned integer\n"},{"kind":"Tuple","id":{"krate":0,"index":2507},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78222,"byte_end":78225,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"name":"F64","qualname":"::value::Value::F64","value":"Value::F64(f64)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON floating point number\n"},{"kind":"Tuple","id":{"krate":0,"index":2509},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78270,"byte_end":78276,"line_start":91,"line_end":91,"column_start":5,"column_end":11},"name":"String","qualname":"::value::Value::String","value":"Value::String(String)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON string\n"},{"kind":"Tuple","id":{"krate":0,"index":2511},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78323,"byte_end":78328,"line_start":94,"line_end":94,"column_start":5,"column_end":10},"name":"Array","qualname":"::value::Value::Array","value":"Value::Array(Vec<Value>)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON array\n"},{"kind":"Tuple","id":{"krate":0,"index":2513},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78380,"byte_end":78386,"line_start":97,"line_end":97,"column_start":5,"column_end":11},"name":"Object","qualname":"::value::Value::Object","value":"Value::Object(Map<String, Value>)","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Represents a JSON object\n"},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78557,"byte_end":78561,"line_start":103,"line_end":103,"column_start":12,"column_end":16},"name":"find","qualname":"<Value>::find","value":"fn <'a, > (&'a self, key: &str) -> Option<&'a Value>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Object, returns the value associated with the provided key.\n Otherwise, returns None.\n"},{"kind":"Method","id":{"krate":0,"index":1035},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":78952,"byte_end":78961,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"find_path","qualname":"<Value>::find_path","value":"fn <'a, > (&'a self, keys: &[&str]) -> Option<&'a Value>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Attempts to get a nested Value Object for each key in `keys`.\n If any key is found not to exist, find_path will return None.\n Otherwise, it will return the `Value` associated with the final key.\n"},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":79741,"byte_end":79747,"line_start":139,"line_end":139,"column_start":12,"column_end":18},"name":"lookup","qualname":"<Value>::lookup","value":"fn <'a, > (&'a self, path: &str) -> Option<&'a Value>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" **Deprecated**: Use `Value.pointer()` and pointer syntax instead.\n\n Looks up a value by path.\n\n This is a convenience method that splits the path by `'.'`\n and then feeds the sequence of keys into the `find_path`\n method.\n\n ``` ignore\n let obj: Value = json::from_str(r#\"{\"x\": {\"a\": 1}}\"#).unwrap();\n\n assert!(obj.lookup(\"x.a\").unwrap() == &Value::U64(1));\n ```\n"},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":80625,"byte_end":80632,"line_start":163,"line_end":163,"column_start":12,"column_end":19},"name":"pointer","qualname":"<Value>::pointer","value":"fn <'a, > (&'a self, pointer: &str) -> Option<&'a Value>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Looks up a value by a JSON Pointer.\n\n JSON Pointer defines a string syntax for identifying a specific value\n within a JavaScript Object Notation (JSON) document.\n\n A Pointer is a Unicode string with the reference tokens separated by `/`.\n Inside tokens `/` is replaced by `~1` and `~` is replaced by `~0`. The\n addressed value is returned and if there is no such value `None` is\n returned.\n\n For more information read [RFC6901](https://tools.ietf.org/html/rfc6901).\n"},{"kind":"Method","id":{"krate":0,"index":1066},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":81880,"byte_end":81886,"line_start":198,"line_end":198,"column_start":12,"column_end":18},"name":"search","qualname":"<Value>::search","value":"fn <'a, > (&'a self, key: &str) -> Option<&'a Value>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Object, performs a depth-first search until\n a value associated with the provided key is found. If no value is found\n or the `Value` is not an Object, returns None.\n"},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":82591,"byte_end":82600,"line_start":219,"line_end":219,"column_start":12,"column_end":21},"name":"is_object","qualname":"<Value>::is_object","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is an Object. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":82768,"byte_end":82777,"line_start":225,"line_end":225,"column_start":12,"column_end":21},"name":"as_object","qualname":"<Value>::as_object","value":"fn (&self) -> Option<&Map<String, Value>>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Object, returns the associated Map.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":83045,"byte_end":83058,"line_start":234,"line_end":234,"column_start":12,"column_end":25},"name":"as_object_mut","qualname":"<Value>::as_object_mut","value":"fn (&mut self) -> Option<&mut Map<String, Value>>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Object, returns the associated mutable Map.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":83307,"byte_end":83315,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"is_array","qualname":"<Value>::is_array","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is an Array. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":83484,"byte_end":83492,"line_start":248,"line_end":248,"column_start":12,"column_end":20},"name":"as_array","qualname":"<Value>::as_array","value":"fn (&self) -> Option<&Vec<Value>>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Array, returns the associated vector.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":83759,"byte_end":83771,"line_start":257,"line_end":257,"column_start":12,"column_end":24},"name":"as_array_mut","qualname":"<Value>::as_array_mut","value":"fn (&mut self) -> Option<&mut Vec<Value>>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is an Array, returns the associated mutable vector.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":84013,"byte_end":84022,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"is_string","qualname":"<Value>::is_string","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a String. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":84186,"byte_end":84192,"line_start":271,"line_end":271,"column_start":12,"column_end":18},"name":"as_str","qualname":"<Value>::as_str","value":"fn (&self) -> Option<&str>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a String, returns the associated str.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":84410,"byte_end":84419,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"is_number","qualname":"<Value>::is_number","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a Number. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":84649,"byte_end":84655,"line_start":287,"line_end":287,"column_start":12,"column_end":18},"name":"is_i64","qualname":"<Value>::is_i64","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a i64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":84853,"byte_end":84859,"line_start":295,"line_end":295,"column_start":12,"column_end":18},"name":"is_u64","qualname":"<Value>::is_u64","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a u64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":85057,"byte_end":85063,"line_start":303,"line_end":303,"column_start":12,"column_end":18},"name":"is_f64","qualname":"<Value>::is_f64","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a f64. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":85286,"byte_end":85292,"line_start":312,"line_end":312,"column_start":12,"column_end":18},"name":"as_i64","qualname":"<Value>::as_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a number, return or cast it to a i64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":85571,"byte_end":85577,"line_start":322,"line_end":322,"column_start":12,"column_end":18},"name":"as_u64","qualname":"<Value>::as_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a number, return or cast it to a u64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":85856,"byte_end":85862,"line_start":332,"line_end":332,"column_start":12,"column_end":18},"name":"as_f64","qualname":"<Value>::as_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a number, return or cast it to a f64.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":86167,"byte_end":86177,"line_start":342,"line_end":342,"column_start":12,"column_end":22},"name":"is_boolean","qualname":"<Value>::is_boolean","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a Boolean. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1119},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":86344,"byte_end":86351,"line_start":348,"line_end":348,"column_start":12,"column_end":19},"name":"as_bool","qualname":"<Value>::as_bool","value":"fn (&self) -> Option<bool>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a Boolean, returns the associated bool.\n Returns None otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":86561,"byte_end":86568,"line_start":356,"line_end":356,"column_start":12,"column_end":19},"name":"is_null","qualname":"<Value>::is_null","value":"fn (&self) -> bool","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" Returns true if the `Value` is a Null. Returns false otherwise.\n"},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":86715,"byte_end":86722,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"as_null","qualname":"<Value>::as_null","value":"fn (&self) -> Option<()>","parent":{"krate":0,"index":2499},"children":[],"decl_id":null,"docs":" If the `Value` is a Null, returns ().\n Returns None otherwise.\n"},{"kind":"Struct","id":{"krate":0,"index":1221},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":91547,"byte_end":91557,"line_start":525,"line_end":525,"column_start":12,"column_end":22},"name":"Serializer","qualname":"::value::Serializer","value":"Serializer { value }","parent":null,"children":[{"krate":0,"index":1222}],"decl_id":null,"docs":" Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.\n"},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":91648,"byte_end":91651,"line_start":531,"line_end":531,"column_start":12,"column_end":15},"name":"new","qualname":"<Serializer>::new","value":"fn () -> Serializer","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Construct a new `Serializer`.\n"},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":91807,"byte_end":91813,"line_start":538,"line_end":538,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<Serializer>::unwrap","value":"fn (self) -> Value","parent":{"krate":0,"index":1221},"children":[],"decl_id":null,"docs":" Unwrap the `Serializer` and return the `Value`.\n"},{"kind":"Struct","id":{"krate":0,"index":1229},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":91977,"byte_end":91994,"line_start":550,"line_end":550,"column_start":12,"column_end":29},"name":"TupleVariantState","qualname":"::value::TupleVariantState","value":"TupleVariantState { name, vec }","parent":null,"children":[{"krate":0,"index":1230},{"krate":0,"index":1231}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1232},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":92065,"byte_end":92083,"line_start":556,"line_end":556,"column_start":12,"column_end":30},"name":"StructVariantState","qualname":"::value::StructVariantState","value":"StructVariantState { name, map }","parent":null,"children":[{"krate":0,"index":1233},{"krate":0,"index":1234}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1235},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":92162,"byte_end":92170,"line_start":562,"line_end":562,"column_start":12,"column_end":20},"name":"MapState","qualname":"::value::MapState","value":"MapState { map, next_key }","parent":null,"children":[{"krate":0,"index":1236},{"krate":0,"index":1237}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1427},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":101800,"byte_end":101812,"line_start":947,"line_end":947,"column_start":12,"column_end":24},"name":"Deserializer","qualname":"::value::Deserializer","value":"Deserializer { value }","parent":null,"children":[{"krate":0,"index":1428}],"decl_id":null,"docs":" Creates a `serde::Deserializer` from a `json::Value` object.\n"},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":101963,"byte_end":101966,"line_start":953,"line_end":953,"column_start":12,"column_end":15},"name":"new","qualname":"<Deserializer>::new","value":"fn (value: Value) -> Deserializer","parent":{"krate":0,"index":1427},"children":[],"decl_id":null,"docs":" Creates a new deserializer instance for deserializing the specified JSON value.\n"},{"kind":"Function","id":{"krate":0,"index":1583},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":112474,"byte_end":112482,"line_start":1311,"line_end":1311,"column_start":8,"column_end":16},"name":"to_value","qualname":"::value::to_value","value":"fn <T> (value: T) -> Value","parent":null,"children":[],"decl_id":null,"docs":" Shortcut function to encode a `T` into a JSON `Value`\n\n ```rust\n use serde_json::to_value;\n let val = to_value(\"foo\");\n assert_eq!(val.as_str(), Some(\"foo\"))\n ```\n"},{"kind":"Function","id":{"krate":0,"index":1587},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":112719,"byte_end":112729,"line_start":1320,"line_end":1320,"column_start":8,"column_end":18},"name":"from_value","qualname":"::value::from_value","value":"fn <T> (value: Value) -> Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Shortcut function to decode a JSON `Value` into a `T`\n"},{"kind":"Trait","id":{"krate":0,"index":1591},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":112939,"byte_end":112945,"line_start":1328,"line_end":1328,"column_start":11,"column_end":17},"name":"ToJson","qualname":"::value::ToJson","value":"ToJson","parent":null,"children":[{"krate":0,"index":1592}],"decl_id":null,"docs":" A trait for converting values to JSON\n"},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/value.rs","byte_start":113015,"byte_end":113022,"line_start":1330,"line_end":1330,"column_start":8,"column_end":15},"name":"to_json","qualname":"::value::ToJson::to_json","value":"fn (&self) -> Value","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an instance of JSON\n"},{"kind":"Trait","id":{"krate":0,"index":1602},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":113492,"byte_end":113496,"line_start":10,"line_end":10,"column_start":11,"column_end":15},"name":"Read","qualname":"::read::Read","value":"Read","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613}],"decl_id":null,"docs":" Trait used by the deserializer for iterating over input. This is manually\n \"specialized\" for iterating over &[u8]. Once feature(specialization) is\n stable we can use actual specialization.\n"},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":113506,"byte_end":113510,"line_start":11,"line_end":11,"column_start":8,"column_end":12},"name":"next","qualname":"::read::Read::next","value":"fn (&mut self) -> io::Result<Option<u8>>","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1605},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":113556,"byte_end":113560,"line_start":12,"line_end":12,"column_start":8,"column_end":12},"name":"peek","qualname":"::read::Read::peek","value":"fn (&mut self) -> io::Result<Option<u8>>","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1607},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":113676,"byte_end":113683,"line_start":15,"line_end":15,"column_start":8,"column_end":15},"name":"discard","qualname":"::read::Read::discard","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Only valid after a call to peek(). Discards the peeked byte.\n"},{"kind":"Method","id":{"krate":0,"index":1609},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114056,"byte_end":114064,"line_start":24,"line_end":24,"column_start":8,"column_end":16},"name":"position","qualname":"::read::Read::position","value":"fn (&self) -> Position","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Position of the most recent call to next().\n\n The most recent call was probably next() and not peek(), but this method\n should try to return a sensible result if the most recent call was\n actually peek() because we don't always know.\n\n Only called in case of an error, so performance is not important.\n"},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114445,"byte_end":114458,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"peek_position","qualname":"::read::Read::peek_position","value":"fn (&self) -> Position","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Position of the most recent call to peek().\n\n The most recent call was probably peek() and not next(), but this method\n should try to return a sensible result if the most recent call was\n actually next() because we don't always know.\n\n Only called in case of an error, so performance is not important.\n"},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114700,"byte_end":114709,"line_start":38,"line_end":38,"column_start":8,"column_end":17},"name":"parse_str","qualname":"::read::Read::parse_str","value":"fn <'s, > (&'s mut self, scratch: &'s mut Vec<u8>) -> Result<&'s str>","parent":{"krate":0,"index":1602},"children":[],"decl_id":null,"docs":" Assumes the previous byte was a quotation mark. Parses a JSON-escaped\n string until the next quotation mark using the given scratch space if\n necessary. The scratch space is initially empty.\n"},{"kind":"Struct","id":{"krate":0,"index":1617},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114810,"byte_end":114818,"line_start":44,"line_end":44,"column_start":12,"column_end":20},"name":"Position","qualname":"::read::Position","value":"Position { line, column }","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619}],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":1618},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114829,"byte_end":114833,"line_start":45,"line_end":45,"column_start":9,"column_end":13},"name":"line","qualname":"::read::Position::line","value":"","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":""},{"kind":"Field","id":{"krate":0,"index":1619},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114850,"byte_end":114856,"line_start":46,"line_end":46,"column_start":9,"column_end":15},"name":"column","qualname":"::read::Position::column","value":"","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1620},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":114879,"byte_end":114891,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"IteratorRead","qualname":"::read::IteratorRead","value":"IteratorRead { iter, ch }","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622}],"decl_id":null,"docs":""},{"kind":"Struct","id":{"krate":0,"index":1624},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":115240,"byte_end":115249,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"SliceRead","qualname":"::read::SliceRead","value":"SliceRead { slice, index }","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626}],"decl_id":null,"docs":" Specialization for Iter=&[u8]. This is more efficient than other iterators\n because peek() can be read-only and we can compute line/col position only if\n an error happens.\n"},{"kind":"Struct","id":{"krate":0,"index":1628},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":115451,"byte_end":115458,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"name":"StrRead","qualname":"::read::StrRead","value":"StrRead { delegate }","parent":null,"children":[{"krate":0,"index":1629}],"decl_id":null,"docs":" Elide UTF-8 checks by assuming that the input is valid UTF-8.\n"},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":115669,"byte_end":115672,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<IteratorRead<Iter>>::new","value":"fn (iter: Iter) -> Self","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1666},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":118086,"byte_end":118089,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceRead<'a>>::new","value":"fn (slice: &'a [u8]) -> Self","parent":{"krate":0,"index":1624},"children":[],"decl_id":null,"docs":""},{"kind":"Method","id":{"krate":0,"index":1701},"span":{"file_name":"/home/ncameron/.cargo/registry/src/github.com-1ecc6299db9ec823/serde_json-0.8.3/src/read.rs","byte_start":121940,"byte_end":121943,"line_start":296,"line_end":296,"column_start":12,"column_end":15},"name":"new","qualname":"<StrRead<'a>>::new","value":"fn (s: &'a str) -> Self","parent":{"krate":0,"index":1628},"children":[],"decl_id":null,"docs":""}],"refs":[],"macro_refs":[]}